"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[1933],{6026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"examples/deployment-examples","title":"Deployment Examples","description":"This guide provides real-world deployment examples for PMDaemon across different environments and use cases. From simple single-server deployments to complex multi-tier architectures, these examples will help you deploy your applications effectively.","source":"@site/docs/examples/deployment-examples.md","sourceDirName":"examples","slug":"/examples/deployment-examples","permalink":"/pmdaemon/docs/examples/deployment-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/examples/deployment-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Real-World Use Cases","permalink":"/pmdaemon/docs/examples/use-cases"},"next":{"title":"Integration Examples","permalink":"/pmdaemon/docs/examples/integration-examples"}}');var t=r(4848),a=r(8453);const o={},i="Deployment Examples",l={},c=[{value:"Single Server Deployments",id:"single-server-deployments",level:2},{value:"Basic Web Application",id:"basic-web-application",level:3},{value:"Python API Service",id:"python-api-service",level:3},{value:"Multi-Tier Architecture",id:"multi-tier-architecture",level:2},{value:"Complete Web Stack",id:"complete-web-stack",level:3},{value:"Microservices Architecture",id:"microservices-architecture",level:2},{value:"Service Mesh Deployment",id:"service-mesh-deployment",level:3},{value:"Container Deployments",id:"container-deployments",level:2},{value:"Docker Compose Integration",id:"docker-compose-integration",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Cloud Platform Deployments",id:"cloud-platform-deployments",level:2},{value:"AWS EC2 with Auto Scaling",id:"aws-ec2-with-auto-scaling",level:3},{value:"Google Cloud Platform",id:"google-cloud-platform",level:3},{value:"Blue-Green Deployments",id:"blue-green-deployments",level:2},{value:"Zero-Downtime Deployment",id:"zero-downtime-deployment",level:3},{value:"Monitoring and Alerting",id:"monitoring-and-alerting",level:2},{value:"Comprehensive Monitoring Setup",id:"comprehensive-monitoring-setup",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"1. Use Configuration Files",id:"1-use-configuration-files",level:3},{value:"2. Implement Health Checks",id:"2-implement-health-checks",level:3},{value:"3. Use Namespaces for Organization",id:"3-use-namespaces-for-organization",level:3},{value:"4. Automate Deployments",id:"4-automate-deployments",level:3},{value:"5. Monitor Resource Usage",id:"5-monitor-resource-usage",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deployment-examples",children:"Deployment Examples"})}),"\n",(0,t.jsx)(n.p,{children:"This guide provides real-world deployment examples for PMDaemon across different environments and use cases. From simple single-server deployments to complex multi-tier architectures, these examples will help you deploy your applications effectively."}),"\n",(0,t.jsx)(n.h2,{id:"single-server-deployments",children:"Single Server Deployments"}),"\n",(0,t.jsx)(n.h3,{id:"basic-web-application",children:"Basic Web Application"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario:"})," Deploy a Node.js web application with health checks and monitoring."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ecosystem.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "node",\r\n      "args": ["dist/server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "cwd": "/var/www/myapp",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://localhost/myapp",\r\n        "REDIS_URL": "redis://localhost:6379"\r\n      },\r\n      "max_memory_restart": "512M",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Deployment script:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# deploy.sh\r\n\r\nset -e\r\n\r\necho "\ud83d\ude80 Deploying web application..."\r\n\r\n# Stop existing processes\r\npmdaemon delete web-app 2>/dev/null || true\r\n\r\n# Pull latest code\r\ncd /var/www/myapp\r\ngit pull origin main\r\n\r\n# Install dependencies and build\r\nnpm ci --production\r\nnpm run build\r\n\r\n# Start with health check validation\r\npmdaemon --config ecosystem.json start --wait-ready\r\n\r\necho "\u2705 Deployment complete!"\r\necho "\ud83c\udf10 Application available at http://localhost:3000"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-api-service",children:"Python API Service"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario:"})," Deploy a FastAPI service with worker processes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ecosystem.yaml:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apps:\r\n  - name: api-server\r\n    script: python\r\n    args: ["-m", "uvicorn", "main:app", "--host", "0.0.0.0"]\r\n    instances: 4\r\n    port: "8000-8003"\r\n    cwd: /opt/api-service\r\n    env:\r\n      PYTHONPATH: /opt/api-service\r\n      DATABASE_URL: postgresql://localhost/apidb\r\n      REDIS_URL: redis://localhost:6379\r\n    max_memory_restart: 256M\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8000/health\r\n      timeout: 15\r\n      interval: 45\r\n\r\n  - name: worker-processes\r\n    script: python\r\n    args: ["-m", "celery", "worker", "-A", "tasks"]\r\n    instances: 2\r\n    cwd: /opt/api-service\r\n    env:\r\n      PYTHONPATH: /opt/api-service\r\n      CELERY_BROKER_URL: redis://localhost:6379/0\r\n      CELERY_RESULT_BACKEND: redis://localhost:6379/0\r\n    max_memory_restart: 512M\r\n    health_check:\r\n      check_type: script\r\n      script: ./scripts/worker-health.sh\r\n      timeout: 10\r\n      interval: 60\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Health check script (worker-health.sh):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\r\n\r\n# Check if Celery worker is responding\r\npython -c \"\r\nfrom celery import Celery\r\napp = Celery('tasks', broker='redis://localhost:6379/0')\r\nresult = app.control.ping()\r\nif not result:\r\n    exit(1)\r\nprint('Worker is healthy')\r\n\"\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-tier-architecture",children:"Multi-Tier Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"complete-web-stack",children:"Complete Web Stack"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario:"})," Deploy a full web stack with frontend, API, workers, and database."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ecosystem.production.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "nginx-proxy",\r\n      "script": "nginx",\r\n      "args": ["-g", "daemon off;"],\r\n      "autorestart": true,\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:80/health",\r\n        "timeout": 5,\r\n        "interval": 30\r\n      }\r\n    },\r\n    {\r\n      "name": "frontend-servers",\r\n      "script": "node",\r\n      "args": ["dist/server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "cwd": "/var/www/frontend",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "API_URL": "http://localhost:8000"\r\n      },\r\n      "max_memory_restart": "256M",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-servers",\r\n      "script": "node",\r\n      "args": ["dist/api.js"],\r\n      "instances": 4,\r\n      "port": "8000-8003",\r\n      "cwd": "/var/www/api",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://db-server/myapp",\r\n        "REDIS_URL": "redis://cache-server:6379",\r\n        "JWT_SECRET": "${JWT_SECRET}"\r\n      },\r\n      "max_memory_restart": "512M",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:8000/api/health",\r\n        "timeout": 10,\r\n        "interval": 30\r\n      }\r\n    },\r\n    {\r\n      "name": "background-workers",\r\n      "script": "node",\r\n      "args": ["dist/worker.js"],\r\n      "instances": 3,\r\n      "cwd": "/var/www/workers",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "REDIS_URL": "redis://cache-server:6379",\r\n        "EMAIL_SERVICE_URL": "https://api.sendgrid.com"\r\n      },\r\n      "max_memory_restart": "256M",\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./health-checks/worker.sh",\r\n        "timeout": 15,\r\n        "interval": 60\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Nginx configuration (/etc/nginx/sites-available/myapp):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nginx",children:'upstream frontend {\r\n    server localhost:3000;\r\n    server localhost:3001;\r\n}\r\n\r\nupstream api {\r\n    server localhost:8000;\r\n    server localhost:8001;\r\n    server localhost:8002;\r\n    server localhost:8003;\r\n}\r\n\r\nserver {\r\n    listen 80;\r\n    server_name myapp.com;\r\n\r\n    location /health {\r\n        return 200 "healthy\\n";\r\n        add_header Content-Type text/plain;\r\n    }\r\n\r\n    location /api/ {\r\n        proxy_pass http://api;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n    }\r\n\r\n    location / {\r\n        proxy_pass http://frontend;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"service-mesh-deployment",children:"Service Mesh Deployment"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario:"})," Deploy multiple microservices with service discovery."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"services/user-service.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "user-service",\r\n  "script": "node",\r\n  "args": ["dist/server.js"],\r\n  "instances": 3,\r\n  "port": "auto:9000-9100",\r\n  "namespace": "microservices",\r\n  "env": {\r\n    "SERVICE_NAME": "user-service",\r\n    "SERVICE_VERSION": "1.2.0",\r\n    "DATABASE_URL": "postgres://db-cluster/users",\r\n    "CONSUL_URL": "http://consul:8500"\r\n  },\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:${PORT}/health",\r\n    "timeout": 10,\r\n    "interval": 30\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"services/order-service.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "order-service",\r\n  "script": "python",\r\n  "args": ["-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "${PORT}"],\r\n  "instances": 2,\r\n  "port": "auto:9000-9100",\r\n  "namespace": "microservices",\r\n  "env": {\r\n    "SERVICE_NAME": "order-service",\r\n    "SERVICE_VERSION": "2.1.0",\r\n    "DATABASE_URL": "postgres://db-cluster/orders",\r\n    "USER_SERVICE_URL": "http://user-service:9001"\r\n  },\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:${PORT}/health",\r\n    "timeout": 15,\r\n    "interval": 45\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Deployment script for microservices:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# deploy-microservices.sh\r\n\r\nset -e\r\n\r\nSERVICES=("user-service" "order-service" "payment-service" "notification-service")\r\n\r\necho "\ud83d\ude80 Deploying microservices..."\r\n\r\nfor service in "${SERVICES[@]}"; do\r\n    echo "\ud83d\udce6 Deploying $service..."\r\n    \r\n    # Stop existing service\r\n    pmdaemon delete "$service" --namespace microservices 2>/dev/null || true\r\n    \r\n    # Deploy new version\r\n    pmdaemon --config "services/${service}.json" start --wait-ready\r\n    \r\n    # Verify deployment\r\n    if pmdaemon info "$service" --namespace microservices | grep -q "online"; then\r\n        echo "\u2705 $service deployed successfully"\r\n    else\r\n        echo "\u274c $service deployment failed"\r\n        pmdaemon logs "$service" --namespace microservices --lines 20\r\n        exit 1\r\n    fi\r\ndone\r\n\r\necho "\ud83c\udf89 All microservices deployed successfully!"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"container-deployments",children:"Container Deployments"}),"\n",(0,t.jsx)(n.h3,{id:"docker-compose-integration",children:"Docker Compose Integration"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"docker-compose.yml:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\r\n\r\nservices:\r\n  pmdaemon:\r\n    image: pmdaemon:latest\r\n    volumes:\r\n      - ./ecosystem.docker.json:/app/ecosystem.json\r\n      - ./app:/app/src\r\n      - logs:/app/logs\r\n    ports:\r\n      - "3000-3003:3000-3003"\r\n      - "9615:9615"\r\n    environment:\r\n      - NODE_ENV=production\r\n      - DATABASE_URL=postgres://db:5432/myapp\r\n    command: pmdaemon --config ecosystem.json start\r\n    depends_on:\r\n      - db\r\n      - redis\r\n\r\n  db:\r\n    image: postgres:13\r\n    environment:\r\n      POSTGRES_DB: myapp\r\n      POSTGRES_USER: app\r\n      POSTGRES_PASSWORD: secret\r\n    volumes:\r\n      - postgres_data:/var/lib/postgresql/data\r\n\r\n  redis:\r\n    image: redis:6-alpine\r\n    volumes:\r\n      - redis_data:/data\r\n\r\nvolumes:\r\n  postgres_data:\r\n  redis_data:\r\n  logs:\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ecosystem.docker.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "node",\r\n      "args": ["src/server.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://db:5432/myapp",\r\n        "REDIS_URL": "redis://redis:6379"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"k8s/pmdaemon-deployment.yaml:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: pmdaemon-app\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: pmdaemon-app\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: pmdaemon-app\r\n    spec:\r\n      containers:\r\n      - name: pmdaemon\r\n        image: pmdaemon:latest\r\n        ports:\r\n        - containerPort: 3000\r\n        - containerPort: 9615\r\n        env:\r\n        - name: NODE_ENV\r\n          value: "production"\r\n        - name: DATABASE_URL\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: app-secrets\r\n              key: database-url\r\n        volumeMounts:\r\n        - name: config\r\n          mountPath: /app/ecosystem.json\r\n          subPath: ecosystem.json\r\n        livenessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 3000\r\n          initialDelaySeconds: 30\r\n          periodSeconds: 10\r\n        readinessProbe:\r\n          httpGet:\r\n            path: /ready\r\n            port: 3000\r\n          initialDelaySeconds: 5\r\n          periodSeconds: 5\r\n      volumes:\r\n      - name: config\r\n        configMap:\r\n          name: pmdaemon-config\n'})}),"\n",(0,t.jsx)(n.h2,{id:"cloud-platform-deployments",children:"Cloud Platform Deployments"}),"\n",(0,t.jsx)(n.h3,{id:"aws-ec2-with-auto-scaling",children:"AWS EC2 with Auto Scaling"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"user-data.sh (EC2 launch script):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\n# Install PMDaemon\r\ncurl -sSL https://install.pmdaemon.io | bash\r\n\r\n# Download application\r\naws s3 cp s3://my-app-bucket/latest.tar.gz /tmp/\r\ntar -xzf /tmp/latest.tar.gz -C /opt/\r\n\r\n# Create ecosystem configuration\r\ncat > /opt/myapp/ecosystem.json << EOF\r\n{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": "max",\r\n      "port": "auto:3000-3100",\r\n      "cwd": "/opt/myapp",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "AWS_REGION": "us-east-1"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health"\r\n      }\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\n# Start application\r\ncd /opt/myapp\r\npmdaemon --config ecosystem.json start --wait-ready\r\n\r\n# Register with load balancer\r\naws elbv2 register-targets --target-group-arn $TARGET_GROUP_ARN \\\r\n  --targets Id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id),Port=3000\n'})}),"\n",(0,t.jsx)(n.h3,{id:"google-cloud-platform",children:"Google Cloud Platform"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"startup-script.sh:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\n# Install PMDaemon\r\ncurl -sSL https://install.pmdaemon.io | bash\r\n\r\n# Get application from Cloud Storage\r\ngsutil cp gs://my-app-bucket/app.tar.gz /tmp/\r\ntar -xzf /tmp/app.tar.gz -C /opt/\r\n\r\n# Configure for GCP\r\nexport DATABASE_URL=$(gcloud secrets versions access latest --secret="database-url")\r\nexport REDIS_URL=$(gcloud secrets versions access latest --secret="redis-url")\r\n\r\n# Start application\r\ncd /opt/myapp\r\npmdaemon start "node server.js" --name web-app \\\r\n  --instances 4 --port 8080 \\\r\n  --env NODE_ENV=production \\\r\n  --env DATABASE_URL="$DATABASE_URL" \\\r\n  --env REDIS_URL="$REDIS_URL" \\\r\n  --health-check-url http://localhost:8080/health \\\r\n  --wait-ready\n'})}),"\n",(0,t.jsx)(n.h2,{id:"blue-green-deployments",children:"Blue-Green Deployments"}),"\n",(0,t.jsx)(n.h3,{id:"zero-downtime-deployment",children:"Zero-Downtime Deployment"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"blue-green-deploy.sh:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\nset -e\r\n\r\nCURRENT_COLOR=$(pmdaemon list --namespace production | grep -q "web-app-blue" && echo "blue" || echo "green")\r\nNEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")\r\n\r\necho "\ud83d\udd04 Current deployment: $CURRENT_COLOR"\r\necho "\ud83d\ude80 Deploying to: $NEW_COLOR"\r\n\r\n# Deploy to new color\r\npmdaemon start "node server.js" \\\r\n  --name "web-app-$NEW_COLOR" \\\r\n  --namespace production \\\r\n  --instances 4 \\\r\n  --port "auto:3000-3100" \\\r\n  --health-check-url "http://localhost:\\${PORT}/health" \\\r\n  --wait-ready\r\n\r\n# Wait for health checks to stabilize\r\nsleep 30\r\n\r\n# Verify new deployment\r\nif pmdaemon info "web-app-$NEW_COLOR" --namespace production | grep -q "healthy"; then\r\n    echo "\u2705 New deployment is healthy"\r\n    \r\n    # Update load balancer (example with nginx)\r\n    sed -i "s/web-app-$CURRENT_COLOR/web-app-$NEW_COLOR/g" /etc/nginx/sites-available/myapp\r\n    nginx -s reload\r\n    \r\n    # Wait for traffic to drain\r\n    sleep 60\r\n    \r\n    # Stop old deployment\r\n    pmdaemon delete "web-app-$CURRENT_COLOR" --namespace production\r\n    \r\n    echo "\ud83c\udf89 Blue-green deployment complete!"\r\nelse\r\n    echo "\u274c New deployment failed health checks"\r\n    pmdaemon delete "web-app-$NEW_COLOR" --namespace production\r\n    exit 1\r\nfi\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-alerting",children:"Monitoring and Alerting"}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-monitoring-setup",children:"Comprehensive Monitoring Setup"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"monitoring.json:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "prometheus-exporter",\r\n      "script": "node",\r\n      "args": ["monitoring/prometheus-exporter.js"],\r\n      "port": "9090",\r\n      "env": {\r\n        "PMDAEMON_API_URL": "http://localhost:9615"\r\n      }\r\n    },\r\n    {\r\n      "name": "log-aggregator",\r\n      "script": "node",\r\n      "args": ["monitoring/log-aggregator.js"],\r\n      "env": {\r\n        "ELASTICSEARCH_URL": "http://elasticsearch:9200"\r\n      }\r\n    },\r\n    {\r\n      "name": "alerting-service",\r\n      "script": "python",\r\n      "args": ["monitoring/alerts.py"],\r\n      "env": {\r\n        "SLACK_WEBHOOK_URL": "${SLACK_WEBHOOK_URL}",\r\n        "PAGERDUTY_API_KEY": "${PAGERDUTY_API_KEY}"\r\n      },\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./monitoring/health-check.sh"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Prometheus configuration (prometheus.yml):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"global:\r\n  scrape_interval: 15s\r\n\r\nscrape_configs:\r\n  - job_name: 'pmdaemon'\r\n    static_configs:\r\n      - targets: ['localhost:9090']\r\n    metrics_path: /metrics\r\n    scrape_interval: 5s\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-configuration-files",children:"1. Use Configuration Files"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Good: Use configuration files for complex deployments\r\npmdaemon --config ecosystem.production.json start\r\n\r\n# Avoid: Long CLI commands in production\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-implement-health-checks",children:"2. Implement Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Always include health checks for web services\r\n{\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "timeout": 10,\r\n    "interval": 30\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-namespaces-for-organization",children:"3. Use Namespaces for Organization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Organize by environment\r\npmdaemon start app.js --name api --namespace production\r\npmdaemon start app.js --name api --namespace staging\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-automate-deployments",children:"4. Automate Deployments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Use deployment scripts with validation\r\npmdaemon validate ecosystem.json --strict\r\npmdaemon --config ecosystem.json start --wait-ready\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-monitor-resource-usage",children:"5. Monitor Resource Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set appropriate resource limits\r\n{\r\n  "max_memory_restart": "512M",\r\n  "instances": 4\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/examples/integration-examples",children:"Integration Examples"})})," - Framework-specific examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimization strategies"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Security best practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Common issues and solutions"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);