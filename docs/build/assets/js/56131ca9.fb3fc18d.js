"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[8872],{1167:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced/clustering","title":"Clustering","description":"PMDaemon\'s advanced clustering capabilities enable you to scale applications horizontally across multiple instances with intelligent load distribution, automatic failover, and sophisticated process management strategies.","source":"@site/docs/advanced/clustering.md","sourceDirName":"advanced","slug":"/advanced/clustering","permalink":"/pmdaemon/docs/advanced/clustering","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/advanced/clustering.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Security","permalink":"/pmdaemon/docs/advanced/security"},"next":{"title":"Logging","permalink":"/pmdaemon/docs/advanced/logging"}}');var t=r(4848),a=r(8453);const i={},l="Clustering",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Basic Clustering",id:"basic-clustering",level:2},{value:"Simple Cluster Setup",id:"simple-cluster-setup",level:3},{value:"Configuration File Clustering",id:"configuration-file-clustering",level:3},{value:"Advanced Clustering Patterns",id:"advanced-clustering-patterns",level:2},{value:"CPU-Based Auto Scaling",id:"cpu-based-auto-scaling",level:3},{value:"Heterogeneous Clustering",id:"heterogeneous-clustering",level:3},{value:"Multi-Tier Clustering",id:"multi-tier-clustering",level:3},{value:"Instance Management",id:"instance-management",level:2},{value:"Dynamic Scaling",id:"dynamic-scaling",level:3},{value:"Instance-Specific Operations",id:"instance-specific-operations",level:3},{value:"Rolling Updates",id:"rolling-updates",level:3},{value:"Load Balancing Integration",id:"load-balancing-integration",level:2},{value:"Nginx Load Balancer",id:"nginx-load-balancer",level:3},{value:"HAProxy Configuration",id:"haproxy-configuration",level:3},{value:"Application-Level Clustering",id:"application-level-clustering",level:2},{value:"Node.js Cluster Integration",id:"nodejs-cluster-integration",level:3},{value:"Session Affinity",id:"session-affinity",level:3},{value:"Monitoring Clusters",id:"monitoring-clusters",level:2},{value:"Cluster Metrics",id:"cluster-metrics",level:3},{value:"Per-Instance Monitoring",id:"per-instance-monitoring",level:3},{value:"Cluster Health Dashboard",id:"cluster-health-dashboard",level:3},{value:"Fault Tolerance",id:"fault-tolerance",level:2},{value:"Automatic Failover",id:"automatic-failover",level:3},{value:"Circuit Breaker Pattern",id:"circuit-breaker-pattern",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Cluster-Specific Tuning",id:"cluster-specific-tuning",level:3},{value:"Resource Allocation",id:"resource-allocation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Right-Size Your Clusters",id:"1-right-size-your-clusters",level:3},{value:"2. Use Health Checks",id:"2-use-health-checks",level:3},{value:"3. Implement Graceful Shutdown",id:"3-implement-graceful-shutdown",level:3},{value:"4. Monitor Cluster Health",id:"4-monitor-cluster-health",level:3},{value:"5. Use Load Balancer Health Checks",id:"5-use-load-balancer-health-checks",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"clustering",children:"Clustering"})}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon's advanced clustering capabilities enable you to scale applications horizontally across multiple instances with intelligent load distribution, automatic failover, and sophisticated process management strategies."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon clustering provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd04 Automatic load balancing"})," - Distribute traffic across instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcc8 Horizontal scaling"})," - Add/remove instances dynamically"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udee1\ufe0f Fault tolerance"})," - Automatic failover and recovery"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83c\udfaf Smart port allocation"})," - Automatic port distribution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcca Instance monitoring"})," - Per-instance health and metrics"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-clustering",children:"Basic Clustering"}),"\n",(0,t.jsx)(n.h3,{id:"simple-cluster-setup",children:"Simple Cluster Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start a basic cluster with 4 instances\r\npmdaemon start "node server.js" --name web-cluster \\\r\n  --instances 4 \\\r\n  --port 3000-3003\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What happens:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"4 Node.js processes start"}),"\n",(0,t.jsx)(n.li,{children:"Ports 3000, 3001, 3002, 3003 are assigned"}),"\n",(0,t.jsxs)(n.li,{children:["Each instance gets ",(0,t.jsx)(n.code,{children:"PM2_INSTANCE_ID"})," environment variable"]}),"\n",(0,t.jsx)(n.li,{children:"Load balancing can be configured externally"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-file-clustering",children:"Configuration File Clustering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "web-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "exec_mode": "cluster",\r\n  "port": "3000-3003",\r\n  "env": {\r\n    "NODE_ENV": "production"\r\n  },\r\n  "instance_var": "INSTANCE_ID",\r\n  "merge_logs": true\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-clustering-patterns",children:"Advanced Clustering Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"cpu-based-auto-scaling",children:"CPU-Based Auto Scaling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "auto-scaled-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": "max",\r\n  "port": "auto:3000-3100",\r\n  "env": {\r\n    "NODE_ENV": "production",\r\n    "CLUSTER_MODE": "auto"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"max" instances:'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uses all available CPU cores"}),"\n",(0,t.jsx)(n.li,{children:"Automatically adjusts to system capacity"}),"\n",(0,t.jsx)(n.li,{children:"Optimal for CPU-bound applications"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"heterogeneous-clustering",children:"Heterogeneous Clustering"}),"\n",(0,t.jsx)(n.p,{children:"Different instance types with specialized roles:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "master-instance",\r\n      "script": "node",\r\n      "args": ["server.js", "--role=master"],\r\n      "instances": 1,\r\n      "port": "3000",\r\n      "env": {\r\n        "ROLE": "master",\r\n        "ENABLE_CRON": "true",\r\n        "ENABLE_ADMIN": "true"\r\n      }\r\n    },\r\n    {\r\n      "name": "worker-instances",\r\n      "script": "node",\r\n      "args": ["server.js", "--role=worker"],\r\n      "instances": 6,\r\n      "port": "3001-3006",\r\n      "env": {\r\n        "ROLE": "worker",\r\n        "ENABLE_CRON": "false",\r\n        "ENABLE_ADMIN": "false"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"multi-tier-clustering",children:"Multi-Tier Clustering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "frontend-tier",\r\n      "script": "node",\r\n      "args": ["frontend.js"],\r\n      "instances": 3,\r\n      "port": "8080-8082",\r\n      "env": {\r\n        "TIER": "frontend",\r\n        "BACKEND_URLS": "http://localhost:3000,http://localhost:3001,http://localhost:3002"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-tier",\r\n      "script": "node",\r\n      "args": ["api.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "env": {\r\n        "TIER": "api",\r\n        "DATABASE_POOL_SIZE": "10"\r\n      }\r\n    },\r\n    {\r\n      "name": "worker-tier",\r\n      "script": "python",\r\n      "args": ["worker.py"],\r\n      "instances": 2,\r\n      "env": {\r\n        "TIER": "worker",\r\n        "QUEUE_NAME": "default"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"instance-management",children:"Instance Management"}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-scaling",children:"Dynamic Scaling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Scale up to 8 instances\r\npmdaemon scale web-cluster 8\r\n\r\n# Scale down to 2 instances\r\npmdaemon scale web-cluster 2\r\n\r\n# Auto-scale based on CPU usage\r\npmdaemon autoscale web-cluster --min 2 --max 10 --cpu-threshold 70\n"})}),"\n",(0,t.jsx)(n.h3,{id:"instance-specific-operations",children:"Instance-Specific Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Restart specific instance\r\npmdaemon restart web-cluster --instance 2\r\n\r\n# Stop specific instance\r\npmdaemon stop web-cluster --instance 1\r\n\r\n# Get instance-specific logs\r\npmdaemon logs web-cluster --instance 0 --lines 50\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rolling-updates",children:"Rolling Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Rolling restart (one instance at a time)\r\npmdaemon restart web-cluster --rolling\r\n\r\n# Rolling update with new configuration\r\npmdaemon reload web-cluster --rolling --instances 6\n"})}),"\n",(0,t.jsx)(n.h2,{id:"load-balancing-integration",children:"Load Balancing Integration"}),"\n",(0,t.jsx)(n.h3,{id:"nginx-load-balancer",children:"Nginx Load Balancer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nginx",children:'upstream web_cluster {\r\n    least_conn;\r\n    server localhost:3000 weight=1 max_fails=3 fail_timeout=30s;\r\n    server localhost:3001 weight=1 max_fails=3 fail_timeout=30s;\r\n    server localhost:3002 weight=1 max_fails=3 fail_timeout=30s;\r\n    server localhost:3003 weight=1 max_fails=3 fail_timeout=30s;\r\n    \r\n    # Health check\r\n    keepalive 32;\r\n}\r\n\r\nserver {\r\n    listen 80;\r\n    server_name myapp.com;\r\n    \r\n    location / {\r\n        proxy_pass http://web_cluster;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        \r\n        # Connection settings\r\n        proxy_connect_timeout 5s;\r\n        proxy_send_timeout 60s;\r\n        proxy_read_timeout 60s;\r\n        \r\n        # Health check\r\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\r\n    }\r\n    \r\n    # Health check endpoint\r\n    location /health {\r\n        access_log off;\r\n        return 200 "healthy\\n";\r\n        add_header Content-Type text/plain;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"haproxy-configuration",children:"HAProxy Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-haproxy",children:"global\r\n    daemon\r\n    maxconn 4096\r\n\r\ndefaults\r\n    mode http\r\n    timeout connect 5000ms\r\n    timeout client 50000ms\r\n    timeout server 50000ms\r\n    option httpchk GET /health\r\n\r\nfrontend web_frontend\r\n    bind *:80\r\n    default_backend web_cluster\r\n\r\nbackend web_cluster\r\n    balance roundrobin\r\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ localhost\r\n    \r\n    server web1 localhost:3000 check inter 5s fall 3 rise 2\r\n    server web2 localhost:3001 check inter 5s fall 3 rise 2\r\n    server web3 localhost:3002 check inter 5s fall 3 rise 2\r\n    server web4 localhost:3003 check inter 5s fall 3 rise 2\r\n\r\n# Statistics interface\r\nlisten stats\r\n    bind *:8404\r\n    stats enable\r\n    stats uri /stats\r\n    stats refresh 30s\n"})}),"\n",(0,t.jsx)(n.h2,{id:"application-level-clustering",children:"Application-Level Clustering"}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-cluster-integration",children:"Node.js Cluster Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// server.js - Cluster-aware application\r\nconst cluster = require('cluster');\r\nconst express = require('express');\r\nconst os = require('os');\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\nconst instanceId = process.env.PM2_INSTANCE_ID || 0;\r\n\r\n// Instance-specific configuration\r\napp.locals.instanceId = instanceId;\r\napp.locals.workerId = cluster.worker?.id || 'master';\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.json({\r\n    status: 'healthy',\r\n    instance: instanceId,\r\n    worker: app.locals.workerId,\r\n    uptime: process.uptime(),\r\n    memory: process.memoryUsage(),\r\n    timestamp: new Date().toISOString()\r\n  });\r\n});\r\n\r\n// Instance-specific behavior\r\nif (instanceId == 0) {\r\n  // Master instance handles cron jobs\r\n  const cron = require('node-cron');\r\n  cron.schedule('0 * * * *', () => {\r\n    console.log('Running hourly task on master instance');\r\n    // Perform scheduled tasks\r\n  });\r\n}\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n  console.log(`Instance ${instanceId} received SIGTERM, shutting down gracefully`);\r\n  server.close(() => {\r\n    console.log(`Instance ${instanceId} shut down complete`);\r\n    process.exit(0);\r\n  });\r\n});\r\n\r\nconst server = app.listen(port, () => {\r\n  console.log(`Instance ${instanceId} listening on port ${port}`);\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"session-affinity",children:"Session Affinity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Session store for cluster\r\nconst session = require('express-session');\r\nconst RedisStore = require('connect-redis')(session);\r\nconst redis = require('redis');\r\n\r\nconst redisClient = redis.createClient({\r\n  host: 'localhost',\r\n  port: 6379\r\n});\r\n\r\napp.use(session({\r\n  store: new RedisStore({ client: redisClient }),\r\n  secret: process.env.SESSION_SECRET,\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  cookie: {\r\n    secure: process.env.NODE_ENV === 'production',\r\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\r\n  }\r\n}));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-clusters",children:"Monitoring Clusters"}),"\n",(0,t.jsx)(n.h3,{id:"cluster-metrics",children:"Cluster Metrics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Monitor all instances\r\npmdaemon monit web-cluster\r\n\r\n# Get cluster statistics\r\npmdaemon stats web-cluster\r\n\r\n# View cluster topology\r\npmdaemon topology web-cluster\n"})}),"\n",(0,t.jsx)(n.h3,{id:"per-instance-monitoring",children:"Per-Instance Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Monitor specific instance\r\npmdaemon monit web-cluster --instance 2\r\n\r\n# Get instance metrics\r\npmdaemon info web-cluster --instance 1\r\n\r\n# Compare instance performance\r\npmdaemon compare web-cluster\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cluster-health-dashboard",children:"Cluster Health Dashboard"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// cluster-dashboard.js\r\nconst PMDaemonClient = require('./pmdaemon-client');\r\n\r\nclass ClusterDashboard {\r\n  constructor() {\r\n    this.client = new PMDaemonClient();\r\n  }\r\n\r\n  async getClusterStatus(clusterName) {\r\n    const processes = await this.client.listProcesses();\r\n    const clusterProcesses = processes.processes.filter(p => \r\n      p.name.startsWith(clusterName)\r\n    );\r\n\r\n    const status = {\r\n      name: clusterName,\r\n      totalInstances: clusterProcesses.length,\r\n      healthyInstances: clusterProcesses.filter(p => p.health === 'healthy').length,\r\n      onlineInstances: clusterProcesses.filter(p => p.status === 'online').length,\r\n      totalCpu: clusterProcesses.reduce((sum, p) => sum + p.cpu, 0),\r\n      totalMemory: clusterProcesses.reduce((sum, p) => sum + p.memory, 0),\r\n      instances: clusterProcesses.map(p => ({\r\n        id: p.id,\r\n        port: p.port,\r\n        status: p.status,\r\n        health: p.health,\r\n        cpu: p.cpu,\r\n        memory: p.memory,\r\n        uptime: p.uptime,\r\n        restarts: p.restarts\r\n      }))\r\n    };\r\n\r\n    return status;\r\n  }\r\n\r\n  async autoScale(clusterName, options = {}) {\r\n    const {\r\n      minInstances = 2,\r\n      maxInstances = 10,\r\n      cpuThreshold = 70,\r\n      memoryThreshold = 80\r\n    } = options;\r\n\r\n    const status = await this.getClusterStatus(clusterName);\r\n    const avgCpu = status.totalCpu / status.totalInstances;\r\n    const avgMemory = status.totalMemory / status.totalInstances / 1024 / 1024; // MB\r\n\r\n    let targetInstances = status.totalInstances;\r\n\r\n    // Scale up conditions\r\n    if (avgCpu > cpuThreshold && status.totalInstances < maxInstances) {\r\n      targetInstances = Math.min(maxInstances, status.totalInstances + 1);\r\n      console.log(`\ud83d\udd3c Scaling up ${clusterName}: CPU ${avgCpu}% > ${cpuThreshold}%`);\r\n    }\r\n    \r\n    // Scale down conditions\r\n    if (avgCpu < cpuThreshold * 0.5 && status.totalInstances > minInstances) {\r\n      targetInstances = Math.max(minInstances, status.totalInstances - 1);\r\n      console.log(`\ud83d\udd3d Scaling down ${clusterName}: CPU ${avgCpu}% < ${cpuThreshold * 0.5}%`);\r\n    }\r\n\r\n    if (targetInstances !== status.totalInstances) {\r\n      await this.client.scaleCluster(clusterName, targetInstances);\r\n      console.log(`\ud83d\udcca Scaled ${clusterName} to ${targetInstances} instances`);\r\n    }\r\n\r\n    return targetInstances;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"fault-tolerance",children:"Fault Tolerance"}),"\n",(0,t.jsx)(n.h3,{id:"automatic-failover",children:"Automatic Failover"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "fault-tolerant-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "port": "3000-3003",\r\n  "autorestart": true,\r\n  "max_restarts": 5,\r\n  "min_uptime": "10s",\r\n  "restart_delay": "2s",\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:${PORT}/health",\r\n    "timeout": 5,\r\n    "interval": 15,\r\n    "retries": 3\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"circuit-breaker-pattern",children:"Circuit Breaker Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// circuit-breaker.js\r\nconst CircuitBreaker = require('opossum');\r\n\r\nconst options = {\r\n  timeout: 3000,\r\n  errorThresholdPercentage: 50,\r\n  resetTimeout: 30000,\r\n  rollingCountTimeout: 10000,\r\n  rollingCountBuckets: 10\r\n};\r\n\r\n// Create circuit breaker for database calls\r\nconst dbBreaker = new CircuitBreaker(callDatabase, options);\r\n\r\ndbBreaker.on('open', () => {\r\n  console.log('Circuit breaker opened - database calls failing');\r\n});\r\n\r\ndbBreaker.on('halfOpen', () => {\r\n  console.log('Circuit breaker half-open - testing database');\r\n});\r\n\r\ndbBreaker.on('close', () => {\r\n  console.log('Circuit breaker closed - database calls healthy');\r\n});\r\n\r\nasync function callDatabase(query) {\r\n  // Database call implementation\r\n  return await db.query(query);\r\n}\r\n\r\n// Use circuit breaker in application\r\napp.get('/api/data', async (req, res) => {\r\n  try {\r\n    const data = await dbBreaker.fire(req.query.sql);\r\n    res.json(data);\r\n  } catch (error) {\r\n    if (dbBreaker.opened) {\r\n      res.status(503).json({ error: 'Service temporarily unavailable' });\r\n    } else {\r\n      res.status(500).json({ error: 'Database error' });\r\n    }\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.h3,{id:"cluster-specific-tuning",children:"Cluster-Specific Tuning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "optimized-cluster",\r\n  "script": "node",\r\n  "args": [\r\n    "--max-old-space-size=512",\r\n    "--optimize-for-size",\r\n    "server.js"\r\n  ],\r\n  "instances": 8,\r\n  "port": "auto:3000-3100",\r\n  "env": {\r\n    "NODE_ENV": "production",\r\n    "UV_THREADPOOL_SIZE": "4",\r\n    "CLUSTER_WORKER_SIZE": "1"\r\n  },\r\n  "max_memory_restart": "600M",\r\n  "instance_var": "WORKER_ID"\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-allocation",children:"Resource Allocation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# CPU affinity for instances\r\npmdaemon start "node server.js" --name cpu-cluster \\\r\n  --instances 4 \\\r\n  --cpu-affinity "0,1,2,3"\r\n\r\n# Memory limits per instance\r\npmdaemon start "node server.js" --name memory-cluster \\\r\n  --instances 4 \\\r\n  --max-memory 512M \\\r\n  --port 3000-3003\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-right-size-your-clusters",children:"1. Right-Size Your Clusters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start with conservative instance count\r\npmdaemon start "node server.js" --name web-cluster --instances 2\r\n\r\n# Monitor and scale based on metrics\r\npmdaemon monit web-cluster\r\npmdaemon scale web-cluster 4  # Scale up if needed\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-use-health-checks",children:"2. Use Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:${PORT}/health",\r\n    "timeout": 5,\r\n    "interval": 30,\r\n    "retries": 2\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-implement-graceful-shutdown",children:"3. Implement Graceful Shutdown"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"process.on('SIGTERM', async () => {\r\n  console.log('Received SIGTERM, shutting down gracefully');\r\n  \r\n  // Stop accepting new requests\r\n  server.close();\r\n  \r\n  // Finish existing requests\r\n  await finishPendingRequests();\r\n  \r\n  // Close database connections\r\n  await db.close();\r\n  \r\n  process.exit(0);\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-monitor-cluster-health",children:"4. Monitor Cluster Health"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set up monitoring\r\npmdaemon start "node monitor.js" --name cluster-monitor \\\r\n  --env CLUSTER_NAME=web-cluster \\\r\n  --env CHECK_INTERVAL=30s\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-use-load-balancer-health-checks",children:"5. Use Load Balancer Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nginx",children:"# Configure health checks in load balancer\r\nlocation /health {\r\n    proxy_pass http://web_cluster;\r\n    proxy_connect_timeout 1s;\r\n    proxy_send_timeout 1s;\r\n    proxy_read_timeout 1s;\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimize cluster performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Secure cluster deployments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Advanced cluster monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Deployment Examples"})})," - Production cluster patterns"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);