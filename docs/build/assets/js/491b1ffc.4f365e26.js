"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[9163],{8178:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"configuration/environment-specific","title":"Environment-Specific Configuration","description":"PMDaemon supports environment-specific configurations to manage different deployment stages (development, staging, production) with tailored settings for each environment.","source":"@site/docs/configuration/environment-specific.md","sourceDirName":"configuration","slug":"/configuration/environment-specific","permalink":"/pmdaemon/docs/configuration/environment-specific","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/configuration/environment-specific.md","tags":[],"version":"current","frontMatter":{}}');var s=r(4848),t=r(8453);const o={},a="Environment-Specific Configuration",l={},c=[{value:"Environment Configuration Strategies",id:"environment-configuration-strategies",level:2},{value:"1. Multiple Config Files",id:"1-multiple-config-files",level:3},{value:"2. Environment Variables Override",id:"2-environment-variables-override",level:3},{value:"3. Conditional Configuration",id:"3-conditional-configuration",level:3},{value:"Environment-Specific Settings",id:"environment-specific-settings",level:2},{value:"Development Environment",id:"development-environment",level:3},{value:"Staging Environment",id:"staging-environment",level:3},{value:"Production Environment",id:"production-environment",level:3},{value:"Deployment Strategies",id:"deployment-strategies",level:2},{value:"1. Environment-Specific Deployment",id:"1-environment-specific-deployment",level:3},{value:"2. Environment Variable Deployment",id:"2-environment-variable-deployment",level:3},{value:"3. Docker-Based Deployment",id:"3-docker-based-deployment",level:3},{value:"Environment Variable Management",id:"environment-variable-management",level:2},{value:"1. Environment Files",id:"1-environment-files",level:3},{value:"2. Secure Secrets Management",id:"2-secure-secrets-management",level:3},{value:"3. Dynamic Configuration Loading",id:"3-dynamic-configuration-loading",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Environment-Specific Schemas",id:"environment-specific-schemas",level:3},{value:"Validation Scripts",id:"validation-scripts",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Environment Isolation",id:"1-environment-isolation",level:3},{value:"2. Configuration Management",id:"2-configuration-management",level:3},{value:"3. Security Considerations",id:"3-security-considerations",level:3},{value:"4. Testing Strategies",id:"4-testing-strategies",level:3},{value:"5. Monitoring and Observability",id:"5-monitoring-and-observability",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"})}),"\n",(0,s.jsx)(e.p,{children:"PMDaemon supports environment-specific configurations to manage different deployment stages (development, staging, production) with tailored settings for each environment."}),"\n",(0,s.jsx)(e.h2,{id:"environment-configuration-strategies",children:"Environment Configuration Strategies"}),"\n",(0,s.jsx)(e.h3,{id:"1-multiple-config-files",children:"1. Multiple Config Files"}),"\n",(0,s.jsx)(e.p,{children:"Create separate ecosystem files for each environment:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"ecosystem.dev.json      # Development\r\necosystem.staging.json  # Staging\r\necosystem.prod.json     # Production\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Development (ecosystem.dev.json):"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app-dev",\r\n      "script": "npm",\r\n      "args": ["run", "dev"],\r\n      "cwd": "/app",\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "PORT": "3000",\r\n        "DEBUG": "*",\r\n        "DB_URL": "mongodb://localhost:27017/myapp_dev"\r\n      },\r\n      "instances": 1,\r\n      "watch": true,\r\n      "ignore_watch": ["node_modules", "logs"],\r\n      "max_restarts": 10,\r\n      "min_uptime": "1s"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Production (ecosystem.prod.json):"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app-prod",\r\n      "script": "dist/server.js",\r\n      "cwd": "/app",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "PORT": "3000"\r\n      },\r\n      "instances": "max",\r\n      "exec_mode": "cluster",\r\n      "watch": false,\r\n      "max_restarts": 3,\r\n      "min_uptime": "10s",\r\n      "max_memory_restart": "1G",\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:3000/health",\r\n        "interval": 30,\r\n        "timeout": 10,\r\n        "retries": 3\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-environment-variables-override",children:"2. Environment Variables Override"}),"\n",(0,s.jsx)(e.p,{children:"Use a single config file with environment variable substitution:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "${APP_SCRIPT:-server.js}",\r\n      "instances": "${APP_INSTANCES:-1}",\r\n      "env": {\r\n        "NODE_ENV": "${NODE_ENV:-development}",\r\n        "PORT": "${PORT:-3000}",\r\n        "DB_URL": "${DATABASE_URL}",\r\n        "REDIS_URL": "${REDIS_URL}"\r\n      },\r\n      "watch": "${WATCH_FILES:-false}",\r\n      "max_memory_restart": "${MAX_MEMORY:-500M}"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Development (.env.dev):"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"NODE_ENV=development\r\nAPP_SCRIPT=npm run dev\r\nAPP_INSTANCES=1\r\nPORT=3000\r\nWATCH_FILES=true\r\nMAX_MEMORY=1G\r\nDATABASE_URL=mongodb://localhost:27017/myapp_dev\r\nREDIS_URL=redis://localhost:6379\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Production (.env.prod):"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"NODE_ENV=production\r\nAPP_SCRIPT=dist/server.js\r\nAPP_INSTANCES=max\r\nPORT=3000\r\nWATCH_FILES=false\r\nMAX_MEMORY=2G\r\nDATABASE_URL=mongodb://prod-cluster:27017/myapp\r\nREDIS_URL=redis://prod-redis:6379\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-conditional-configuration",children:"3. Conditional Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Use environment-based conditional logic:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "server.js",\r\n      "env": {\r\n        "NODE_ENV": "development"\r\n      },\r\n      "env_development": {\r\n        "NODE_ENV": "development",\r\n        "PORT": "3000",\r\n        "DEBUG": "*",\r\n        "DB_URL": "mongodb://localhost:27017/myapp_dev"\r\n      },\r\n      "env_staging": {\r\n        "NODE_ENV": "staging",\r\n        "PORT": "3000",\r\n        "DB_URL": "mongodb://staging-db:27017/myapp_staging"\r\n      },\r\n      "env_production": {\r\n        "NODE_ENV": "production",\r\n        "PORT": "3000",\r\n        "DB_URL": "mongodb://prod-cluster:27017/myapp"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"environment-specific-settings",children:"Environment-Specific Settings"}),"\n",(0,s.jsx)(e.h3,{id:"development-environment",children:"Development Environment"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Fast iteration and debugging"}),"\n",(0,s.jsx)(e.li,{children:"File watching enabled"}),"\n",(0,s.jsx)(e.li,{children:"Detailed logging"}),"\n",(0,s.jsx)(e.li,{children:"Relaxed restart policies"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Configuration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "dev-app",\r\n      "script": "npm run dev",\r\n      "watch": true,\r\n      "ignore_watch": ["node_modules", "*.log"],\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "DEBUG": "*",\r\n        "LOG_LEVEL": "debug"\r\n      },\r\n      "instances": 1,\r\n      "max_restarts": 50,\r\n      "min_uptime": "1s",\r\n      "restart_delay": 100\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"staging-environment",children:"Staging Environment"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Production-like setup"}),"\n",(0,s.jsx)(e.li,{children:"Testing and validation"}),"\n",(0,s.jsx)(e.li,{children:"Moderate monitoring"}),"\n",(0,s.jsx)(e.li,{children:"Controlled resource usage"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Configuration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "staging-app",\r\n      "script": "dist/server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "env": {\r\n        "NODE_ENV": "staging",\r\n        "LOG_LEVEL": "info"\r\n      },\r\n      "max_restarts": 5,\r\n      "min_uptime": "5s",\r\n      "max_memory_restart": "800M",\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:3000/health",\r\n        "interval": 60\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"production-environment",children:"Production Environment"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Maximum performance and reliability"}),"\n",(0,s.jsx)(e.li,{children:"Comprehensive monitoring"}),"\n",(0,s.jsx)(e.li,{children:"Strict resource limits"}),"\n",(0,s.jsx)(e.li,{children:"Minimal restarts"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Configuration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "prod-app",\r\n      "script": "dist/server.js",\r\n      "instances": "max",\r\n      "exec_mode": "cluster",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "LOG_LEVEL": "warn"\r\n      },\r\n      "max_restarts": 3,\r\n      "min_uptime": "10s",\r\n      "max_memory_restart": "1G",\r\n      "kill_timeout": 5000,\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:3000/health",\r\n        "interval": 30,\r\n        "timeout": 5,\r\n        "retries": 3\r\n      },\r\n      "monitoring": {\r\n        "cpu_threshold": 80,\r\n        "memory_threshold": 85\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"deployment-strategies",children:"Deployment Strategies"}),"\n",(0,s.jsx)(e.h3,{id:"1-environment-specific-deployment",children:"1. Environment-Specific Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Development\r\npmdaemon start ecosystem.dev.json\r\n\r\n# Staging\r\npmdaemon start ecosystem.staging.json\r\n\r\n# Production\r\npmdaemon start ecosystem.prod.json\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-environment-variable-deployment",children:"2. Environment Variable Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Development\r\nNODE_ENV=development pmdaemon start ecosystem.json\r\n\r\n# Production\r\nNODE_ENV=production pmdaemon start ecosystem.json\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-docker-based-deployment",children:"3. Docker-Based Deployment"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Dockerfile:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'FROM node:18-alpine\r\n\r\nWORKDIR /app\r\nCOPY package*.json ./\r\nRUN npm ci --only=production\r\n\r\nCOPY . .\r\nRUN npm run build\r\n\r\n# Install PMDaemon\r\nRUN cargo install pmdaemon\r\n\r\nCOPY ecosystem.json ./\r\n\r\nCMD ["pmdaemon", "start", "ecosystem.json"]\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"docker-compose.yml:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'version: \'3.8\'\r\nservices:\r\n  app-dev:\r\n    build: .\r\n    environment:\r\n      - NODE_ENV=development\r\n      - PORT=3000\r\n      - DATABASE_URL=mongodb://mongo:27017/myapp_dev\r\n    volumes:\r\n      - .:/app\r\n      - /app/node_modules\r\n    ports:\r\n      - "3000:3000"\r\n    depends_on:\r\n      - mongo\r\n\r\n  app-prod:\r\n    build: .\r\n    environment:\r\n      - NODE_ENV=production\r\n      - PORT=3000\r\n      - DATABASE_URL=mongodb://mongo:27017/myapp\r\n    ports:\r\n      - "3000:3000"\r\n    depends_on:\r\n      - mongo\r\n    restart: unless-stopped\n'})}),"\n",(0,s.jsx)(e.h2,{id:"environment-variable-management",children:"Environment Variable Management"}),"\n",(0,s.jsx)(e.h3,{id:"1-environment-files",children:"1. Environment Files"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:".env.development:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"NODE_ENV=development\r\nDEBUG=*\r\nDB_HOST=localhost\r\nDB_PORT=5432\r\nDB_NAME=myapp_dev\r\nREDIS_HOST=localhost\r\nREDIS_PORT=6379\r\nLOG_LEVEL=debug\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:".env.production:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"NODE_ENV=production\r\nDB_HOST=prod-db-cluster\r\nDB_PORT=5432\r\nDB_NAME=myapp\r\nREDIS_HOST=prod-redis\r\nREDIS_PORT=6379\r\nLOG_LEVEL=error\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-secure-secrets-management",children:"2. Secure Secrets Management"}),"\n",(0,s.jsx)(e.p,{children:"For sensitive data, use external secret management:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "secure-app",\r\n      "script": "server.js",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DB_PASSWORD_FILE": "/run/secrets/db_password",\r\n        "JWT_SECRET_FILE": "/run/secrets/jwt_secret"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-dynamic-configuration-loading",children:"3. Dynamic Configuration Loading"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config.js\r\nconst fs = require('fs');\r\n\r\nfunction loadConfig() {\r\n  const env = process.env.NODE_ENV || 'development';\r\n\r\n  // Load base config\r\n  const baseConfig = require('./config.base.json');\r\n\r\n  // Load environment-specific config\r\n  const envConfig = require(`./config.${env}.json`);\r\n\r\n  // Load secrets from files\r\n  if (process.env.DB_PASSWORD_FILE) {\r\n    envConfig.database.password = fs.readFileSync(\r\n      process.env.DB_PASSWORD_FILE,\r\n      'utf8'\r\n    ).trim();\r\n  }\r\n\r\n  return { ...baseConfig, ...envConfig };\r\n}\r\n\r\nmodule.exports = loadConfig();\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,s.jsx)(e.h3,{id:"environment-specific-schemas",children:"Environment-Specific Schemas"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"development.schema.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "type": "object",\r\n  "required": ["name", "script"],\r\n  "properties": {\r\n    "watch": { "type": "boolean", "default": true },\r\n    "instances": { "type": "number", "maximum": 4 },\r\n    "max_restarts": { "type": "number", "minimum": 10 }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"production.schema.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "type": "object",\r\n  "required": ["name", "script", "health_check"],\r\n  "properties": {\r\n    "watch": { "type": "boolean", "const": false },\r\n    "instances": { "type": ["number", "string"] },\r\n    "max_restarts": { "type": "number", "maximum": 5 },\r\n    "health_check": { "type": "object", "required": ["enabled"] }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"validation-scripts",children:"Validation Scripts"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n# validate-config.sh\r\n\r\nENV=${1:-development}\r\nCONFIG_FILE="ecosystem.${ENV}.json"\r\n\r\necho "Validating configuration for environment: $ENV"\r\n\r\n# Validate JSON syntax\r\nif ! jq empty "$CONFIG_FILE" 2>/dev/null; then\r\n  echo "Error: Invalid JSON syntax in $CONFIG_FILE"\r\n  exit 1\r\nfi\r\n\r\n# Validate against schema\r\nif ! pmdaemon validate "$CONFIG_FILE" --schema="${ENV}.schema.json"; then\r\n  echo "Error: Configuration validation failed"\r\n  exit 1\r\nfi\r\n\r\necho "Configuration is valid for $ENV environment"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(e.h3,{id:"1-environment-isolation",children:"1. Environment Isolation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use separate databases for each environment"}),"\n",(0,s.jsx)(e.li,{children:"Isolate network configurations"}),"\n",(0,s.jsx)(e.li,{children:"Use different service accounts/credentials"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-configuration-management",children:"2. Configuration Management"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Version control all configuration files"}),"\n",(0,s.jsx)(e.li,{children:"Use environment-specific validation"}),"\n",(0,s.jsx)(e.li,{children:"Document environment differences"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-security-considerations",children:"3. Security Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Never commit secrets to version control"}),"\n",(0,s.jsx)(e.li,{children:"Use secret management systems in production"}),"\n",(0,s.jsx)(e.li,{children:"Rotate credentials regularly"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"4-testing-strategies",children:"4. Testing Strategies"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Test configurations in staging before production"}),"\n",(0,s.jsx)(e.li,{children:"Validate environment parity"}),"\n",(0,s.jsx)(e.li,{children:"Use automated deployment pipelines"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"5-monitoring-and-observability",children:"5. Monitoring and Observability"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Environment-specific monitoring dashboards"}),"\n",(0,s.jsx)(e.li,{children:"Different alerting thresholds per environment"}),"\n",(0,s.jsx)(e.li,{children:"Comprehensive logging strategies"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/configuration/ecosystem-files",children:"Ecosystem Files"})})," - Complete ecosystem configuration guide"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/configuration/best-practices",children:"Best Practices"})})," - Configuration best practices"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/security/overview",children:"Security"})})," - Security considerations"]}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);