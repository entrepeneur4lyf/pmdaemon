"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[7248],{2309:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"configuration/ecosystem-files","title":"Ecosystem Configuration Files","description":"PMDaemon supports ecosystem configuration files in multiple formats (JSON, YAML, TOML), allowing you to define complex application setups in a declarative way. This is similar to PM2\'s ecosystem.config.js but with enhanced features and multiple format support.","source":"@site/docs/configuration/ecosystem-files.md","sourceDirName":"configuration","slug":"/configuration/ecosystem-files","permalink":"/pmdaemon/docs/configuration/ecosystem-files","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/configuration/ecosystem-files.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Exit Codes","permalink":"/pmdaemon/docs/cli/exit-codes"},"next":{"title":"Process Configuration","permalink":"/pmdaemon/docs/configuration/process-configuration"}}');var i=n(4848),t=n(8453);const c={},d="Ecosystem Configuration Files",l={},o=[{value:"Supported Formats",id:"supported-formats",level:2},{value:"Basic Structure",id:"basic-structure",level:2},{value:"JSON Format",id:"json-format",level:3},{value:"YAML Format",id:"yaml-format",level:3},{value:"TOML Format",id:"toml-format",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Required Fields",id:"required-fields",level:3},{value:"Optional Fields",id:"optional-fields",level:3},{value:"Health Check Configuration",id:"health-check-configuration",level:3},{value:"Complete Examples",id:"complete-examples",level:2},{value:"Web Application Cluster",id:"web-application-cluster",level:3},{value:"Microservices Setup",id:"microservices-setup",level:3},{value:"Development vs Production",id:"development-vs-production",level:3},{value:"development.json",id:"developmentjson",level:4},{value:"production.json",id:"productionjson",level:4},{value:"Using Configuration Files",id:"using-configuration-files",level:2},{value:"Start All Apps",id:"start-all-apps",level:3},{value:"Start Specific App",id:"start-specific-app",level:3},{value:"Environment-Specific Configs",id:"environment-specific-configs",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Port Configuration",id:"port-configuration",level:3},{value:"Memory Formats",id:"memory-formats",level:3},{value:"Complex Health Checks",id:"complex-health-checks",level:3},{value:"Validation and Error Handling",id:"validation-and-error-handling",level:2},{value:"Common Validation Errors",id:"common-validation-errors",level:3},{value:"File Format Errors",id:"file-format-errors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Descriptive Names",id:"1-use-descriptive-names",level:3},{value:"2. Set Resource Limits",id:"2-set-resource-limits",level:3},{value:"3. Use Health Checks for Critical Services",id:"3-use-health-checks-for-critical-services",level:3},{value:"4. Environment-Specific Configurations",id:"4-environment-specific-configurations",level:3},{value:"5. Version Control",id:"5-version-control",level:3},{value:"Migration from PM2",id:"migration-from-pm2",level:2},{value:"Converting PM2 ecosystem.config.js",id:"converting-pm2-ecosystemconfigjs",level:3},{value:"Key Differences",id:"key-differences",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"ecosystem-configuration-files",children:"Ecosystem Configuration Files"})}),"\n",(0,i.jsx)(r.p,{children:"PMDaemon supports ecosystem configuration files in multiple formats (JSON, YAML, TOML), allowing you to define complex application setups in a declarative way. This is similar to PM2's ecosystem.config.js but with enhanced features and multiple format support."}),"\n",(0,i.jsx)(r.h2,{id:"supported-formats",children:"Supported Formats"}),"\n",(0,i.jsx)(r.p,{children:"PMDaemon supports three configuration formats:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Format"}),(0,i.jsx)(r.th,{children:"Extension"}),(0,i.jsx)(r.th,{children:"Pros"}),(0,i.jsx)(r.th,{children:"Cons"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"JSON"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:".json"})}),(0,i.jsx)(r.td,{children:"Fast parsing, wide support"}),(0,i.jsx)(r.td,{children:"No comments, strict syntax"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"YAML"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:".yaml"}),", ",(0,i.jsx)(r.code,{children:".yml"})]}),(0,i.jsx)(r.td,{children:"Human-readable, supports comments"}),(0,i.jsx)(r.td,{children:"Slower parsing, indentation-sensitive"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"TOML"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:".toml"})}),(0,i.jsx)(r.td,{children:"Comments, clear syntax"}),(0,i.jsx)(r.td,{children:"Less common, moderate parsing speed"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,i.jsxs)(r.p,{children:["All formats follow the same structure with an ",(0,i.jsx)(r.code,{children:"apps"})," array containing process configurations:"]}),"\n",(0,i.jsx)(r.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-server",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "env": {\r\n        "NODE_ENV": "production"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"yaml-format",children:"YAML Format"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yaml",children:'# PMDaemon ecosystem configuration\r\napps:\r\n  - name: web-server\r\n    script: node\r\n    args:\r\n      - server.js\r\n    instances: 2\r\n    port: "3000-3001"\r\n    env:\r\n      NODE_ENV: production\n'})}),"\n",(0,i.jsx)(r.h3,{id:"toml-format",children:"TOML Format"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'# PMDaemon ecosystem configuration\r\n\r\n[[apps]]\r\nname = "web-server"\r\nscript = "node"\r\nargs = ["server.js"]\r\ninstances = 2\r\nport = "3000-3001"\r\n\r\n[apps.env]\r\nNODE_ENV = "production"\n'})}),"\n",(0,i.jsx)(r.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsx)(r.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Field"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Example"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"name"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Unique process name"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"web-server"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"script"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Command or executable"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:'"node"'}),", ",(0,i.jsx)(r.code,{children:'"python"'}),", ",(0,i.jsx)(r.code,{children:'"./app"'})]})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"optional-fields",children:"Optional Fields"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Field"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Default"}),(0,i.jsx)(r.th,{children:"Example"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"args"})}),(0,i.jsx)(r.td,{children:"Array"}),(0,i.jsx)(r.td,{children:"Command arguments"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"[]"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'["server.js", "--port", "3000"]'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"instances"})}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"Number of instances"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"1"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"4"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"port"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Port configuration"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:'"3000"'}),", ",(0,i.jsx)(r.code,{children:'"3000-3003"'}),", ",(0,i.jsx)(r.code,{children:'"auto:5000-5100"'})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"cwd"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Working directory"}),(0,i.jsx)(r.td,{children:"Current dir"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"/path/to/app"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"env"})}),(0,i.jsx)(r.td,{children:"Object"}),(0,i.jsx)(r.td,{children:"Environment variables"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"{}"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'{"NODE_ENV": "production"}'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"max_memory_restart"})}),(0,i.jsx)(r.td,{children:"String/Number"}),(0,i.jsx)(r.td,{children:"Memory limit"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:'"512M"'}),", ",(0,i.jsx)(r.code,{children:"536870912"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"autorestart"})}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:"Auto-restart on crash"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"true"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"false"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"max_restarts"})}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"Maximum restart attempts"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"16"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"10"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"min_uptime"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Minimum uptime before stable"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"1000ms"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"5s"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"restart_delay"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Delay between restarts"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"0ms"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"2s"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"kill_timeout"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Graceful shutdown timeout"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"1600ms"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"30s"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"namespace"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Process namespace"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"default"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"production"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"out_file"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Output log file"}),(0,i.jsx)(r.td,{children:"Auto-generated"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"/var/log/app.out"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"error_file"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Error log file"}),(0,i.jsx)(r.td,{children:"Auto-generated"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"/var/log/app.err"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"log_file"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Combined log file"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"/var/log/app.log"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"pid_file"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"PID file location"}),(0,i.jsx)(r.td,{children:"Auto-generated"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"/var/run/app.pid"'})})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"health-check-configuration",children:"Health Check Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "timeout": 5,\r\n    "interval": 30,\r\n    "retries": 3,\r\n    "enabled": true\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Field"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Default"}),(0,i.jsx)(r.th,{children:"Example"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"check_type"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Type of health check"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:'"http"'}),", ",(0,i.jsx)(r.code,{children:'"script"'})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"url"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"HTTP endpoint (for http type)"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"http://localhost:3000/health"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"script"})}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:"Script path (for script type)"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"./health-check.sh"'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"timeout"})}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"Timeout in seconds"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"30"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"10"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"interval"})}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"Check interval in seconds"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"60"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"30"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"retries"})}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"Number of retries"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"3"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"5"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"enabled"})}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:"Enable health checks"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"true"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"false"})})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"complete-examples",children:"Complete Examples"}),"\n",(0,i.jsx)(r.h3,{id:"web-application-cluster",children:"Web Application Cluster"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-cluster",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "max_memory_restart": "1G",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://localhost/myapp"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      },\r\n      "out_file": "/var/log/web-cluster.out",\r\n      "error_file": "/var/log/web-cluster.err"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"microservices-setup",children:"Microservices Setup"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yaml",children:'# microservices.yaml\r\napps:\r\n  # API Gateway\r\n  - name: api-gateway\r\n    script: node\r\n    args: [gateway.js]\r\n    port: "8080"\r\n    max_memory_restart: "512M"\r\n    env:\r\n      NODE_ENV: production\r\n      LOG_LEVEL: info\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8080/health\r\n      timeout: 5\r\n      interval: 30\r\n\r\n  # User Service\r\n  - name: user-service\r\n    script: node\r\n    args: [user-service.js]\r\n    instances: 2\r\n    port: "8001-8002"\r\n    max_memory_restart: "256M"\r\n    env:\r\n      NODE_ENV: production\r\n      DATABASE_URL: postgres://localhost/users\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8001/health\r\n      timeout: 5\r\n      interval: 30\r\n\r\n  # Order Service\r\n  - name: order-service\r\n    script: python\r\n    args: [-m, uvicorn, main:app, --host, "0.0.0.0"]\r\n    instances: 2\r\n    port: "8003-8004"\r\n    max_memory_restart: "512M"\r\n    cwd: /path/to/order-service\r\n    env:\r\n      PYTHONPATH: /path/to/order-service\r\n      DATABASE_URL: postgres://localhost/orders\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8003/docs\r\n      timeout: 10\r\n      interval: 60\r\n\r\n  # Background Worker\r\n  - name: background-worker\r\n    script: python\r\n    args: [worker.py]\r\n    max_memory_restart: "256M"\r\n    max_restarts: 5\r\n    restart_delay: "5s"\r\n    env:\r\n      REDIS_URL: redis://localhost:6379\r\n      QUEUE_NAME: background_tasks\r\n    health_check:\r\n      check_type: script\r\n      script: ./worker-health.sh\r\n      timeout: 10\r\n      interval: 60\n'})}),"\n",(0,i.jsx)(r.h3,{id:"development-vs-production",children:"Development vs Production"}),"\n",(0,i.jsx)(r.h4,{id:"developmentjson",children:"development.json"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "dev-server",\r\n      "script": "npm",\r\n      "args": ["run", "dev"],\r\n      "port": "3000",\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "DEBUG": "*",\r\n        "DATABASE_URL": "postgres://localhost/myapp_dev"\r\n      },\r\n      "autorestart": false,\r\n      "max_restarts": 0\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"productionjson",children:"production.json"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "prod-server",\r\n      "script": "node",\r\n      "args": ["dist/server.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "max_memory_restart": "1G",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://prod-db:5432/myapp"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      },\r\n      "out_file": "/var/log/myapp/server.out",\r\n      "error_file": "/var/log/myapp/server.err"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"using-configuration-files",children:"Using Configuration Files"}),"\n",(0,i.jsx)(r.h3,{id:"start-all-apps",children:"Start All Apps"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Start all apps from config file\r\npmdaemon --config ecosystem.json start\r\npmdaemon --config ecosystem.yaml start\r\npmdaemon --config ecosystem.toml start\n"})}),"\n",(0,i.jsx)(r.h3,{id:"start-specific-app",children:"Start Specific App"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Start only the specified app\r\npmdaemon --config ecosystem.json start --name web-server\n"})}),"\n",(0,i.jsx)(r.h3,{id:"environment-specific-configs",children:"Environment-Specific Configs"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Use different configs for different environments\r\npmdaemon --config development.json start\r\npmdaemon --config staging.yaml start\r\npmdaemon --config production.toml start\n"})}),"\n",(0,i.jsx)(r.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(r.h3,{id:"port-configuration",children:"Port Configuration"}),"\n",(0,i.jsx)(r.p,{children:"PMDaemon's advanced port management works seamlessly with config files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "port": "3000",           // Single port\r\n      "instances": 1\r\n    },\r\n    {\r\n      "name": "api-cluster", \r\n      "port": "4000-4003",      // Port range\r\n      "instances": 4\r\n    },\r\n    {\r\n      "name": "workers",\r\n      "port": "auto:5000-5100", // Auto-assignment\r\n      "instances": 3\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"memory-formats",children:"Memory Formats"}),"\n",(0,i.jsx)(r.p,{children:"Multiple memory format options:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "app1",\r\n      "max_memory_restart": "512M"     // String format\r\n    },\r\n    {\r\n      "name": "app2", \r\n      "max_memory_restart": 536870912  // Bytes (number)\r\n    },\r\n    {\r\n      "name": "app3",\r\n      "max_memory_restart": "1G"       // Gigabytes\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"complex-health-checks",children:"Complex Health Checks"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-server",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/api/health",\r\n        "timeout": 15,\r\n        "interval": 45,\r\n        "retries": 5,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "worker",\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./scripts/worker-health.sh",\r\n        "timeout": 30,\r\n        "interval": 120,\r\n        "retries": 2,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"validation-and-error-handling",children:"Validation and Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"PMDaemon provides detailed validation and error messages:"}),"\n",(0,i.jsx)(r.h3,{id:"common-validation-errors",children:"Common Validation Errors"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Missing required fields\r\nError: App 0 validation failed: Process name cannot be empty\r\n\r\n# Duplicate names\r\nError: Duplicate app name: 'web-server'\r\n\r\n# Invalid port format\r\nError: Invalid port configuration: 'invalid-port'\r\n\r\n# Invalid memory format\r\nError: Invalid memory format: '512X'\n"})}),"\n",(0,i.jsx)(r.h3,{id:"file-format-errors",children:"File Format Errors"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# JSON syntax error\r\nError: Failed to parse JSON config file 'ecosystem.json': expected `,` or `}` at line 5 column 3\r\n\r\n# YAML syntax error\r\nError: Failed to parse YAML config file 'ecosystem.yaml': invalid indentation at line 8\r\n\r\n# File not found\r\nError: Failed to read config file 'missing.json': No such file or directory\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-use-descriptive-names",children:"1. Use Descriptive Names"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-server-prod",     // Good: descriptive\r\n      "name": "web-frontend-v2",     // Good: includes version\r\n      "name": "app"                  // Bad: too generic\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"2-set-resource-limits",children:"2. Set Resource Limits"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "memory-intensive-app",\r\n      "max_memory_restart": "2G",\r\n      "max_restarts": 5,\r\n      "min_uptime": "10s"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"3-use-health-checks-for-critical-services",children:"3. Use Health Checks for Critical Services"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "critical-api",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"4-environment-specific-configurations",children:"4. Environment-Specific Configurations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Separate files for different environments\r\necosystem.development.json\r\necosystem.staging.yaml\r\necosystem.production.toml\n"})}),"\n",(0,i.jsx)(r.h3,{id:"5-version-control",children:"5. Version Control"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Include in repository"})," - Keep config files with your code"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Use comments"})," (YAML/TOML) - Document complex configurations"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Validate before deployment"})," - Test configs locally first"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"migration-from-pm2",children:"Migration from PM2"}),"\n",(0,i.jsx)(r.h3,{id:"converting-pm2-ecosystemconfigjs",children:"Converting PM2 ecosystem.config.js"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"PM2 Format:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"module.exports = {\r\n  apps: [{\r\n    name: 'my-app',\r\n    script: 'server.js',\r\n    instances: 4,\r\n    env: {\r\n      NODE_ENV: 'development'\r\n    },\r\n    env_production: {\r\n      NODE_ENV: 'production'\r\n    }\r\n  }]\r\n};\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"PMDaemon Format:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "apps": [{\r\n    "name": "my-app",\r\n    "script": "node",\r\n    "args": ["server.js"],\r\n    "instances": 4,\r\n    "env": {\r\n      "NODE_ENV": "production"\r\n    }\r\n  }]\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Script separation"})," - PMDaemon separates executable from arguments"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Environment configs"})," - Use separate files instead of env_production"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Port strings"})," - PMDaemon uses strings for advanced port features"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Health checks"})," - PMDaemon adds health check configuration"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/pmdaemon/docs/configuration/schema-validation",children:"Schema Validation"})})," - IDE integration and validation"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/pmdaemon/docs/configuration/environment-specific",children:"Environment-Specific Configs"})})," - Managing different environments"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/pmdaemon/docs/configuration/best-practices",children:"Best Practices"})})," - Configuration best practices"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/pmdaemon/docs/cli/commands",children:"CLI Commands"})})," - Using configs with CLI commands"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:"Ecosystem configuration files provide a powerful way to manage complex application deployments with PMDaemon's advanced features like port management, health checks, and clustering."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>d});var s=n(6540);const i={},t=s.createContext(i);function c(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);