"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[6031],{7494:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"examples/integration-examples","title":"Integration Examples","description":"This guide provides practical examples of integrating PMDaemon with popular frameworks, platforms, and tools. Learn how to seamlessly incorporate PMDaemon into your existing development and deployment workflows.","source":"@site/docs/examples/integration-examples.md","sourceDirName":"examples","slug":"/examples/integration-examples","permalink":"/pmdaemon/docs/examples/integration-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/examples/integration-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deployment Examples","permalink":"/pmdaemon/docs/examples/deployment-examples"},"next":{"title":"Performance Tuning","permalink":"/pmdaemon/docs/advanced/performance-tuning"}}');var t=r(4848),a=r(8453);const o={},i="Integration Examples",c={},l=[{value:"Framework Integration",id:"framework-integration",level:2},{value:"Express.js Integration",id:"expressjs-integration",level:3},{value:"Next.js Integration",id:"nextjs-integration",level:3},{value:"FastAPI Integration",id:"fastapi-integration",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Container Integration",id:"container-integration",level:2},{value:"Docker Integration",id:"docker-integration",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Monitoring Integration",id:"monitoring-integration",level:2},{value:"Prometheus Integration",id:"prometheus-integration",level:3},{value:"Grafana Dashboard",id:"grafana-dashboard",level:3},{value:"Load Balancer Integration",id:"load-balancer-integration",level:2},{value:"Nginx with Dynamic Upstream",id:"nginx-with-dynamic-upstream",level:3},{value:"Consul Service Discovery",id:"consul-service-discovery",level:3},{value:"Database Integration",id:"database-integration",level:2},{value:"Connection Pool Management",id:"connection-pool-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Environment-Specific Configuration",id:"1-environment-specific-configuration",level:3},{value:"2. Health Check Integration",id:"2-health-check-integration",level:3},{value:"3. Graceful Shutdown",id:"3-graceful-shutdown",level:3},{value:"4. Monitoring Integration",id:"4-monitoring-integration",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"integration-examples",children:"Integration Examples"})}),"\n",(0,t.jsx)(e.p,{children:"This guide provides practical examples of integrating PMDaemon with popular frameworks, platforms, and tools. Learn how to seamlessly incorporate PMDaemon into your existing development and deployment workflows."}),"\n",(0,t.jsx)(e.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,t.jsx)(e.h3,{id:"expressjs-integration",children:"Express.js Integration"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Scenario:"})," Integrate PMDaemon with an Express.js application for development and production."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"package.json scripts:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "scripts": {\r\n    "dev": "pmdaemon start \'npm run dev:server\' --name dev-server --watch",\r\n    "dev:server": "nodemon --exec \'node --inspect\' server.js",\r\n    "start": "pmdaemon start \'node server.js\' --name web-app --instances 4 --port 3000-3003",\r\n    "stop": "pmdaemon stop web-app",\r\n    "restart": "pmdaemon restart web-app",\r\n    "logs": "pmdaemon logs web-app --follow",\r\n    "monit": "pmdaemon monit"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Development setup:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// server.js\r\nconst express = require('express');\r\nconst app = express();\r\n\r\n// PMDaemon integration middleware\r\napp.use((req, res, next) => {\r\n  // Add instance information to responses\r\n  res.setHeader('X-Instance-ID', process.env.PM2_INSTANCE_ID || '0');\r\n  res.setHeader('X-Process-ID', process.pid);\r\n  next();\r\n});\r\n\r\n// Health check endpoint for PMDaemon\r\napp.get('/health', (req, res) => {\r\n  res.json({\r\n    status: 'healthy',\r\n    instance: process.env.PM2_INSTANCE_ID || '0',\r\n    pid: process.pid,\r\n    uptime: process.uptime(),\r\n    memory: process.memoryUsage()\r\n  });\r\n});\r\n\r\nconst port = process.env.PORT || 3000;\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}, instance ${process.env.PM2_INSTANCE_ID || '0'}`);\r\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"nextjs-integration",children:"Next.js Integration"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"ecosystem.json:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "nextjs-app",\r\n      "script": "npm",\r\n      "args": ["start"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "PORT": "3000"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/api/health"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"pages/api/health.js:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"export default function handler(req, res) {\r\n  res.status(200).json({\r\n    status: 'healthy',\r\n    timestamp: new Date().toISOString(),\r\n    instance: process.env.PM2_INSTANCE_ID || '0'\r\n  });\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"fastapi-integration",children:"FastAPI Integration"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"main.py:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI\r\nimport os\r\nimport psutil\r\nimport time\r\n\r\napp = FastAPI()\r\n\r\nstart_time = time.time()\r\n\r\n@app.get("/health")\r\nasync def health_check():\r\n    return {\r\n        "status": "healthy",\r\n        "instance": os.getenv("PM2_INSTANCE_ID", "0"),\r\n        "pid": os.getpid(),\r\n        "uptime": time.time() - start_time,\r\n        "memory": psutil.Process().memory_info().rss\r\n    }\r\n\r\n@app.get("/")\r\nasync def root():\r\n    return {\r\n        "message": "Hello World",\r\n        "instance": os.getenv("PM2_INSTANCE_ID", "0")\r\n    }\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"ecosystem.yaml:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'apps:\r\n  - name: fastapi-app\r\n    script: uvicorn\r\n    args: [main:app, --host, "0.0.0.0", --port, "8000"]\r\n    instances: 3\r\n    port: "8000-8002"\r\n    env:\r\n      PYTHONPATH: /app\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8000/health\n'})}),"\n",(0,t.jsx)(e.h2,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,t.jsx)(e.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:".github/workflows/deploy.yml:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"name: Deploy with PMDaemon\r\n\r\non:\r\n  push:\r\n    branches: [main]\r\n\r\njobs:\r\n  deploy:\r\n    runs-on: ubuntu-latest\r\n    \r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    \r\n    - name: Setup Node.js\r\n      uses: actions/setup-node@v3\r\n      with:\r\n        node-version: '18'\r\n        cache: 'npm'\r\n    \r\n    - name: Install dependencies\r\n      run: npm ci\r\n    \r\n    - name: Build application\r\n      run: npm run build\r\n    \r\n    - name: Install PMDaemon\r\n      run: |\r\n        curl -sSL https://install.pmdaemon.io | bash\r\n        echo \"$HOME/.cargo/bin\" >> $GITHUB_PATH\r\n    \r\n    - name: Deploy to staging\r\n      run: |\r\n        pmdaemon --config ecosystem.staging.json start --wait-ready\r\n        \r\n    - name: Run health checks\r\n      run: |\r\n        sleep 10\r\n        curl -f http://localhost:3000/health\r\n        \r\n    - name: Deploy to production\r\n      if: success()\r\n      run: |\r\n        pmdaemon --config ecosystem.production.json start --wait-ready\r\n        \r\n    - name: Cleanup on failure\r\n      if: failure()\r\n      run: |\r\n        pmdaemon delete all --force\n"})}),"\n",(0,t.jsx)(e.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:".gitlab-ci.yml:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'stages:\r\n  - build\r\n  - test\r\n  - deploy\r\n\r\nvariables:\r\n  NODE_VERSION: "18"\r\n\r\nbuild:\r\n  stage: build\r\n  image: node:${NODE_VERSION}\r\n  script:\r\n    - npm ci\r\n    - npm run build\r\n  artifacts:\r\n    paths:\r\n      - dist/\r\n    expire_in: 1 hour\r\n\r\ntest:\r\n  stage: test\r\n  image: node:${NODE_VERSION}\r\n  script:\r\n    - npm ci\r\n    - npm test\r\n\r\ndeploy_staging:\r\n  stage: deploy\r\n  image: ubuntu:22.04\r\n  before_script:\r\n    - apt-get update && apt-get install -y curl\r\n    - curl -sSL https://install.pmdaemon.io | bash\r\n    - export PATH="$HOME/.cargo/bin:$PATH"\r\n  script:\r\n    - pmdaemon --config ecosystem.staging.json start --wait-ready\r\n    - curl -f http://localhost:3000/health\r\n  environment:\r\n    name: staging\r\n    url: https://staging.myapp.com\r\n  only:\r\n    - develop\r\n\r\ndeploy_production:\r\n  stage: deploy\r\n  image: ubuntu:22.04\r\n  before_script:\r\n    - apt-get update && apt-get install -y curl\r\n    - curl -sSL https://install.pmdaemon.io | bash\r\n    - export PATH="$HOME/.cargo/bin:$PATH"\r\n  script:\r\n    - pmdaemon --config ecosystem.production.json start --wait-ready\r\n    - curl -f http://localhost:3000/health\r\n  environment:\r\n    name: production\r\n    url: https://myapp.com\r\n  only:\r\n    - main\r\n  when: manual\n'})}),"\n",(0,t.jsx)(e.h2,{id:"container-integration",children:"Container Integration"}),"\n",(0,t.jsx)(e.h3,{id:"docker-integration",children:"Docker Integration"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Dockerfile:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dockerfile",children:'FROM node:18-alpine\r\n\r\n# Install PMDaemon\r\nRUN apk add --no-cache curl\r\nRUN curl -sSL https://install.pmdaemon.io | sh\r\nENV PATH="/root/.cargo/bin:$PATH"\r\n\r\nWORKDIR /app\r\n\r\n# Copy package files\r\nCOPY package*.json ./\r\nRUN npm ci --only=production\r\n\r\n# Copy application code\r\nCOPY . .\r\n\r\n# Create non-root user\r\nRUN addgroup -g 1001 -S nodejs\r\nRUN adduser -S nodejs -u 1001\r\nUSER nodejs\r\n\r\n# Expose port\r\nEXPOSE 3000\r\n\r\n# Health check\r\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\r\n  CMD curl -f http://localhost:3000/health || exit 1\r\n\r\n# Start with PMDaemon\r\nCMD ["pmdaemon", "start", "node", "server.js", "--name", "app", "--health-check-url", "http://localhost:3000/health"]\n'})}),"\n",(0,t.jsx)(e.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"docker-compose.yml:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'version: \'3.8\'\r\n\r\nservices:\r\n  app:\r\n    build: .\r\n    ports:\r\n      - "3000-3003:3000-3003"\r\n      - "9615:9615"\r\n    environment:\r\n      - NODE_ENV=production\r\n      - DATABASE_URL=postgres://postgres:password@db:5432/myapp\r\n      - REDIS_URL=redis://redis:6379\r\n    volumes:\r\n      - ./ecosystem.docker.json:/app/ecosystem.json\r\n    command: pmdaemon --config ecosystem.json start\r\n    depends_on:\r\n      - db\r\n      - redis\r\n    healthcheck:\r\n      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]\r\n      interval: 30s\r\n      timeout: 10s\r\n      retries: 3\r\n\r\n  db:\r\n    image: postgres:13\r\n    environment:\r\n      POSTGRES_DB: myapp\r\n      POSTGRES_USER: postgres\r\n      POSTGRES_PASSWORD: password\r\n    volumes:\r\n      - postgres_data:/var/lib/postgresql/data\r\n\r\n  redis:\r\n    image: redis:6-alpine\r\n    volumes:\r\n      - redis_data:/data\r\n\r\nvolumes:\r\n  postgres_data:\r\n  redis_data:\n'})}),"\n",(0,t.jsx)(e.h2,{id:"monitoring-integration",children:"Monitoring Integration"}),"\n",(0,t.jsx)(e.h3,{id:"prometheus-integration",children:"Prometheus Integration"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"prometheus-exporter.js:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const express = require('express');\r\nconst client = require('prom-client');\r\nconst PMDaemonClient = require('./pmdaemon-client');\r\n\r\nconst app = express();\r\nconst pmdaemon = new PMDaemonClient();\r\n\r\n// Create metrics\r\nconst processCount = new client.Gauge({\r\n  name: 'pmdaemon_processes_total',\r\n  help: 'Total number of processes managed by PMDaemon',\r\n  labelNames: ['status']\r\n});\r\n\r\nconst processCpu = new client.Gauge({\r\n  name: 'pmdaemon_process_cpu_percent',\r\n  help: 'CPU usage percentage for each process',\r\n  labelNames: ['process_name', 'instance']\r\n});\r\n\r\nconst processMemory = new client.Gauge({\r\n  name: 'pmdaemon_process_memory_bytes',\r\n  help: 'Memory usage in bytes for each process',\r\n  labelNames: ['process_name', 'instance']\r\n});\r\n\r\n// Update metrics every 10 seconds\r\nsetInterval(async () => {\r\n  try {\r\n    const processes = await pmdaemon.listProcesses();\r\n    \r\n    // Reset gauges\r\n    processCount.reset();\r\n    processCpu.reset();\r\n    processMemory.reset();\r\n    \r\n    // Count processes by status\r\n    const statusCounts = {};\r\n    processes.processes.forEach(proc => {\r\n      statusCounts[proc.status] = (statusCounts[proc.status] || 0) + 1;\r\n      \r\n      // Set individual process metrics\r\n      processCpu.set(\r\n        { process_name: proc.name, instance: proc.instance || '0' },\r\n        proc.cpu || 0\r\n      );\r\n      \r\n      processMemory.set(\r\n        { process_name: proc.name, instance: proc.instance || '0' },\r\n        proc.memory || 0\r\n      );\r\n    });\r\n    \r\n    // Set status counts\r\n    Object.entries(statusCounts).forEach(([status, count]) => {\r\n      processCount.set({ status }, count);\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to update metrics:', error);\r\n  }\r\n}, 10000);\r\n\r\n// Metrics endpoint\r\napp.get('/metrics', (req, res) => {\r\n  res.set('Content-Type', client.register.contentType);\r\n  res.end(client.register.metrics());\r\n});\r\n\r\napp.listen(9090, () => {\r\n  console.log('Prometheus exporter listening on port 9090');\r\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"grafana-dashboard",children:"Grafana Dashboard"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"grafana-dashboard.json:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "dashboard": {\r\n    "title": "PMDaemon Monitoring",\r\n    "panels": [\r\n      {\r\n        "title": "Process Count by Status",\r\n        "type": "stat",\r\n        "targets": [\r\n          {\r\n            "expr": "pmdaemon_processes_total",\r\n            "legendFormat": "{{status}}"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        "title": "CPU Usage by Process",\r\n        "type": "graph",\r\n        "targets": [\r\n          {\r\n            "expr": "pmdaemon_process_cpu_percent",\r\n            "legendFormat": "{{process_name}}-{{instance}}"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        "title": "Memory Usage by Process",\r\n        "type": "graph",\r\n        "targets": [\r\n          {\r\n            "expr": "pmdaemon_process_memory_bytes / 1024 / 1024",\r\n            "legendFormat": "{{process_name}}-{{instance}}"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"load-balancer-integration",children:"Load Balancer Integration"}),"\n",(0,t.jsx)(e.h3,{id:"nginx-with-dynamic-upstream",children:"Nginx with Dynamic Upstream"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"nginx.conf:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-nginx",children:"upstream backend {\r\n    least_conn;\r\n    \r\n    # PMDaemon managed processes\r\n    server localhost:3000 max_fails=3 fail_timeout=30s;\r\n    server localhost:3001 max_fails=3 fail_timeout=30s;\r\n    server localhost:3002 max_fails=3 fail_timeout=30s;\r\n    server localhost:3003 max_fails=3 fail_timeout=30s;\r\n}\r\n\r\nserver {\r\n    listen 80;\r\n    server_name myapp.com;\r\n    \r\n    # Health check endpoint\r\n    location /health {\r\n        access_log off;\r\n        proxy_pass http://backend;\r\n        proxy_connect_timeout 1s;\r\n        proxy_send_timeout 1s;\r\n        proxy_read_timeout 1s;\r\n    }\r\n    \r\n    # Main application\r\n    location / {\r\n        proxy_pass http://backend;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        \r\n        # Health check for upstream\r\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"consul-service-discovery",children:"Consul Service Discovery"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"consul-integration.js:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const consul = require('consul')();\r\nconst PMDaemonClient = require('./pmdaemon-client');\r\n\r\nclass ConsulIntegration {\r\n  constructor() {\r\n    this.pmdaemon = new PMDaemonClient();\r\n    this.serviceName = 'web-app';\r\n  }\r\n\r\n  async registerServices() {\r\n    const processes = await this.pmdaemon.listProcesses();\r\n    \r\n    for (const process of processes.processes) {\r\n      if (process.name.startsWith(this.serviceName) && process.status === 'online') {\r\n        await consul.agent.service.register({\r\n          id: `${process.name}-${process.instance}`,\r\n          name: this.serviceName,\r\n          port: process.port,\r\n          address: 'localhost',\r\n          check: {\r\n            http: `http://localhost:${process.port}/health`,\r\n            interval: '30s',\r\n            timeout: '10s'\r\n          }\r\n        });\r\n        \r\n        console.log(`Registered ${process.name} with Consul`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async deregisterServices() {\r\n    const services = await consul.agent.service.list();\r\n    \r\n    for (const [serviceId, service] of Object.entries(services)) {\r\n      if (service.Service === this.serviceName) {\r\n        await consul.agent.service.deregister(serviceId);\r\n        console.log(`Deregistered ${serviceId} from Consul`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async syncServices() {\r\n    await this.deregisterServices();\r\n    await this.registerServices();\r\n  }\r\n}\r\n\r\n// Auto-sync every 60 seconds\r\nconst integration = new ConsulIntegration();\r\nsetInterval(() => {\r\n  integration.syncServices().catch(console.error);\r\n}, 60000);\r\n\r\n// Initial sync\r\nintegration.syncServices().catch(console.error);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"database-integration",children:"Database Integration"}),"\n",(0,t.jsx)(e.h3,{id:"connection-pool-management",children:"Connection Pool Management"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"database.js:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const { Pool } = require('pg');\r\n\r\nclass DatabaseManager {\r\n  constructor() {\r\n    const instanceId = parseInt(process.env.PM2_INSTANCE_ID || '0');\r\n    const totalInstances = parseInt(process.env.PM2_INSTANCES || '1');\r\n    \r\n    // Distribute connection pool across instances\r\n    const totalConnections = 100;\r\n    const connectionsPerInstance = Math.ceil(totalConnections / totalInstances);\r\n    \r\n    this.pool = new Pool({\r\n      host: process.env.DB_HOST,\r\n      database: process.env.DB_NAME,\r\n      user: process.env.DB_USER,\r\n      password: process.env.DB_PASSWORD,\r\n      port: process.env.DB_PORT,\r\n      max: connectionsPerInstance,\r\n      min: Math.ceil(connectionsPerInstance / 4),\r\n      idleTimeoutMillis: 30000,\r\n      connectionTimeoutMillis: 2000,\r\n    });\r\n    \r\n    console.log(`Instance ${instanceId}: Database pool configured with ${connectionsPerInstance} connections`);\r\n  }\r\n\r\n  async query(text, params) {\r\n    const client = await this.pool.connect();\r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  async healthCheck() {\r\n    try {\r\n      await this.query('SELECT 1');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Database health check failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async close() {\r\n    await this.pool.end();\r\n  }\r\n}\r\n\r\nmodule.exports = DatabaseManager;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.h3,{id:"1-environment-specific-configuration",children:"1. Environment-Specific Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Development\r\npmdaemon --config ecosystem.dev.json start\r\n\r\n# Staging\r\npmdaemon --config ecosystem.staging.json start\r\n\r\n# Production\r\npmdaemon --config ecosystem.production.json start\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-health-check-integration",children:"2. Health Check Integration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Always implement health checks\r\napp.get('/health', async (req, res) => {\r\n  const checks = {\r\n    database: await checkDatabase(),\r\n    redis: await checkRedis(),\r\n    external_api: await checkExternalAPI()\r\n  };\r\n  \r\n  const healthy = Object.values(checks).every(check => check);\r\n  \r\n  res.status(healthy ? 200 : 503).json({\r\n    status: healthy ? 'healthy' : 'unhealthy',\r\n    checks,\r\n    instance: process.env.PM2_INSTANCE_ID\r\n  });\r\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-graceful-shutdown",children:"3. Graceful Shutdown"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Handle shutdown signals\r\nprocess.on('SIGTERM', async () => {\r\n  console.log('Received SIGTERM, shutting down gracefully');\r\n  \r\n  // Stop accepting new requests\r\n  server.close();\r\n  \r\n  // Close database connections\r\n  await database.close();\r\n  \r\n  // Exit\r\n  process.exit(0);\r\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-monitoring-integration",children:"4. Monitoring Integration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Start monitoring alongside your application\r\npmdaemon start "node prometheus-exporter.js" --name metrics-exporter --port 9090\r\npmdaemon start "node server.js" --name web-app --instances 4 --port 3000-3003\n'})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Deployment Examples"})})," - Production deployment patterns"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/api/api-examples",children:"API Examples"})})," - API integration examples"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimization strategies"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Advanced monitoring setup"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>i});var s=r(6540);const t={},a=s.createContext(t);function o(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);