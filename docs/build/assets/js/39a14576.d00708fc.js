"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[507],{2710:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"advanced/security","title":"Security","description":"This comprehensive security guide covers best practices for securing PMDaemon deployments, protecting sensitive data, and implementing defense-in-depth strategies for production environments.","source":"@site/docs/advanced/security.md","sourceDirName":"advanced","slug":"/advanced/security","permalink":"/pmdaemon/docs/advanced/security","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/advanced/security.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Performance Tuning","permalink":"/pmdaemon/docs/advanced/performance-tuning"},"next":{"title":"Clustering","permalink":"/pmdaemon/docs/advanced/clustering"}}');var a=i(4848),s=i(8453);const t={},o="Security",c={},d=[{value:"System Security",id:"system-security",level:2},{value:"User and Permission Management",id:"user-and-permission-management",level:3},{value:"Dedicated User Account",id:"dedicated-user-account",level:4},{value:"File Permissions",id:"file-permissions",level:4},{value:"Process Isolation",id:"process-isolation",level:4},{value:"Network Security",id:"network-security",level:3},{value:"Firewall Configuration",id:"firewall-configuration",level:4},{value:"Network Binding",id:"network-binding",level:4},{value:"Configuration Security",id:"configuration-security",level:2},{value:"Environment Variable Protection",id:"environment-variable-protection",level:3},{value:"Secure Environment Files",id:"secure-environment-files",level:4},{value:"Configuration with Secrets",id:"configuration-with-secrets",level:4},{value:"External Secret Management",id:"external-secret-management",level:4},{value:"Configuration Validation",id:"configuration-validation",level:3},{value:"Application Security",id:"application-security",level:2},{value:"Secure Process Configuration",id:"secure-process-configuration",level:3},{value:"Resource Limits",id:"resource-limits",level:4},{value:"Security Headers and Middleware",id:"security-headers-and-middleware",level:4},{value:"Input Validation and Sanitization",id:"input-validation-and-sanitization",level:3},{value:"Monitoring and Logging Security",id:"monitoring-and-logging-security",level:2},{value:"Secure Logging",id:"secure-logging",level:3},{value:"Log Sanitization",id:"log-sanitization",level:4},{value:"Security Monitoring",id:"security-monitoring",level:3},{value:"Health Check Security",id:"health-check-security",level:2},{value:"Secure Health Endpoints",id:"secure-health-endpoints",level:3},{value:"Health Check Authentication",id:"health-check-authentication",level:3},{value:"Container Security",id:"container-security",level:2},{value:"Secure Docker Configuration",id:"secure-docker-configuration",level:3},{value:"Container Runtime Security",id:"container-runtime-security",level:3},{value:"API Security",id:"api-security",level:2},{value:"Built-in Authentication",id:"built-in-authentication",level:3},{value:"API Key Security",id:"api-key-security",level:3},{value:"Authentication Headers",id:"authentication-headers",level:3},{value:"Network Security",id:"network-security-1",level:3},{value:"API Rate Limiting",id:"api-rate-limiting",level:3},{value:"Compliance and Auditing",id:"compliance-and-auditing",level:2},{value:"Audit Logging",id:"audit-logging",level:3},{value:"Security Scanning",id:"security-scanning",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"1. Principle of Least Privilege",id:"1-principle-of-least-privilege",level:3},{value:"2. Secure Configuration Management",id:"2-secure-configuration-management",level:3},{value:"3. Network Security",id:"3-network-security",level:3},{value:"4. Regular Security Updates",id:"4-regular-security-updates",level:3},{value:"5. Monitor and Audit",id:"5-monitor-and-audit",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"security",children:"Security"})}),"\n",(0,a.jsx)(n.p,{children:"This comprehensive security guide covers best practices for securing PMDaemon deployments, protecting sensitive data, and implementing defense-in-depth strategies for production environments."}),"\n",(0,a.jsx)(n.h2,{id:"system-security",children:"System Security"}),"\n",(0,a.jsx)(n.h3,{id:"user-and-permission-management",children:"User and Permission Management"}),"\n",(0,a.jsx)(n.h4,{id:"dedicated-user-account",children:"Dedicated User Account"}),"\n",(0,a.jsx)(n.p,{children:"Create a dedicated user for PMDaemon operations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create pmdaemon user\nsudo useradd -r -s /bin/false -d /var/lib/pmdaemon pmdaemon\n\n# Create necessary directories\nsudo mkdir -p /var/lib/pmdaemon/{logs,pids,config}\nsudo mkdir -p /var/log/pmdaemon\nsudo mkdir -p /etc/pmdaemon\n\n# Set ownership\nsudo chown -R pmdaemon:pmdaemon /var/lib/pmdaemon\nsudo chown -R pmdaemon:pmdaemon /var/log/pmdaemon\nsudo chown -R pmdaemon:pmdaemon /etc/pmdaemon\n\n# Set permissions\nsudo chmod 750 /var/lib/pmdaemon\nsudo chmod 750 /var/log/pmdaemon\nsudo chmod 750 /etc/pmdaemon\n"})}),"\n",(0,a.jsx)(n.h4,{id:"file-permissions",children:"File Permissions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Secure configuration files\nsudo chmod 600 /etc/pmdaemon/ecosystem.json\nsudo chmod 600 /etc/pmdaemon/.env\n\n# Secure log directories\nsudo chmod 750 /var/log/pmdaemon\nsudo chmod 640 /var/log/pmdaemon/*.log\n\n# Secure PID files\nsudo chmod 644 /var/lib/pmdaemon/pids/*.pid\n"})}),"\n",(0,a.jsx)(n.h4,{id:"process-isolation",children:"Process Isolation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "secure-web-app",\n  "script": "node",\n  "args": ["server.js"],\n  "user": "webapp",\n  "group": "webapp",\n  "cwd": "/opt/webapp",\n  "env": {\n    "NODE_ENV": "production"\n  },\n  "umask": "0027"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"network-security",children:"Network Security"}),"\n",(0,a.jsx)(n.h4,{id:"firewall-configuration",children:"Firewall Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# UFW (Ubuntu/Debian)\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH\nsudo ufw allow ssh\n\n# Allow application ports\nsudo ufw allow 3000:3003/tcp comment "Web application"\nsudo ufw allow 8000:8003/tcp comment "API services"\n\n# Allow PMDaemon web interface (restrict to specific IPs)\nsudo ufw allow from 192.168.1.0/24 to any port 9615 comment "PMDaemon web interface"\n\nsudo ufw enable\n'})}),"\n",(0,a.jsx)(n.h4,{id:"network-binding",children:"Network Binding"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Bind to localhost only for security\npmdaemon web --host 127.0.0.1 --port 9615\n\n# Use reverse proxy for external access\n# nginx configuration for secure proxy\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Nginx reverse proxy configuration:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-nginx",children:'server {\n    listen 443 ssl http2;\n    server_name pmdaemon.yourdomain.com;\n    \n    ssl_certificate /etc/ssl/certs/pmdaemon.crt;\n    ssl_certificate_key /etc/ssl/private/pmdaemon.key;\n    \n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection "1; mode=block";\n    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";\n    \n    # Client certificate authentication (optional)\n    ssl_client_certificate /etc/ssl/certs/ca.crt;\n    ssl_verify_client on;\n    \n    location / {\n        proxy_pass http://127.0.0.1:9615;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"configuration-security",children:"Configuration Security"}),"\n",(0,a.jsx)(n.h3,{id:"environment-variable-protection",children:"Environment Variable Protection"}),"\n",(0,a.jsx)(n.h4,{id:"secure-environment-files",children:"Secure Environment Files"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create secure environment file\nsudo touch /etc/pmdaemon/secrets.env\nsudo chmod 600 /etc/pmdaemon/secrets.env\nsudo chown pmdaemon:pmdaemon /etc/pmdaemon/secrets.env\n\n# Example secure environment file\ncat > /etc/pmdaemon/secrets.env << 'EOF'\nDATABASE_PASSWORD=super_secure_password_123\nJWT_SECRET=your_jwt_secret_key_here\nAPI_KEY=your_api_key_here\nREDIS_PASSWORD=redis_password_here\nEOF\n"})}),"\n",(0,a.jsx)(n.h4,{id:"configuration-with-secrets",children:"Configuration with Secrets"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "secure-api",\n  "script": "node",\n  "args": ["server.js"],\n  "env_file": "/etc/pmdaemon/secrets.env",\n  "env": {\n    "NODE_ENV": "production",\n    "LOG_LEVEL": "info"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"external-secret-management",children:"External Secret Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Using HashiCorp Vault\nexport VAULT_ADDR="https://vault.company.com"\nexport VAULT_TOKEN="your-vault-token"\n\n# Retrieve secrets and start process\nDATABASE_URL=$(vault kv get -field=url secret/database)\nAPI_KEY=$(vault kv get -field=key secret/api)\n\npmdaemon start "node server.js" --name secure-api \\\n  --env DATABASE_URL="$DATABASE_URL" \\\n  --env API_KEY="$API_KEY"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Validate configuration security\npmdaemon validate ecosystem.json --security-check\n\n# Check for common security issues\npmdaemon security-audit ecosystem.json\n"})}),"\n",(0,a.jsx)(n.h2,{id:"application-security",children:"Application Security"}),"\n",(0,a.jsx)(n.h3,{id:"secure-process-configuration",children:"Secure Process Configuration"}),"\n",(0,a.jsx)(n.h4,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "hardened-service",\n  "script": "node",\n  "args": ["--max-old-space-size=512", "server.js"],\n  "max_memory_restart": "512M",\n  "max_restarts": 3,\n  "min_uptime": "30s",\n  "kill_timeout": "10s",\n  "env": {\n    "NODE_ENV": "production",\n    "NODE_OPTIONS": "--max-old-space-size=512"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"security-headers-and-middleware",children:"Security Headers and Middleware"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Express.js security middleware\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\n\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: \"Too many requests from this IP\"\n});\n\napp.use('/api/', limiter);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"input-validation-and-sanitization",children:"Input Validation and Sanitization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Input validation middleware\nconst { body, validationResult } = require('express-validator');\n\napp.post('/api/users',\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 8 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    \n    // Process validated input\n  }\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-and-logging-security",children:"Monitoring and Logging Security"}),"\n",(0,a.jsx)(n.h3,{id:"secure-logging",children:"Secure Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "secure-logging-app",\n  "script": "node",\n  "args": ["server.js"],\n  "out_file": "/var/log/pmdaemon/app.log",\n  "error_file": "/var/log/pmdaemon/app-error.log",\n  "log": {\n    "log_date_format": "YYYY-MM-DD HH:mm:ss Z",\n    "merge_logs": false,\n    "log_type": "json"\n  },\n  "env": {\n    "LOG_LEVEL": "info",\n    "AUDIT_LOG": "true"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"log-sanitization",children:"Log Sanitization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Secure logging configuration\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json(),\n    winston.format.printf(info => {\n      // Remove sensitive data from logs\n      const sanitized = { ...info };\n      delete sanitized.password;\n      delete sanitized.token;\n      delete sanitized.apiKey;\n      \n      // Mask credit card numbers\n      if (sanitized.message) {\n        sanitized.message = sanitized.message.replace(/\\d{4}-?\\d{4}-?\\d{4}-?\\d{4}/g, '****-****-****-****');\n      }\n      \n      return JSON.stringify(sanitized);\n    })\n  ),\n  transports: [\n    new winston.transports.File({ filename: '/var/log/app/error.log', level: 'error' }),\n    new winston.transports.File({ filename: '/var/log/app/combined.log' })\n  ]\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"security-monitoring",children:"Security Monitoring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Monitor for security events\ntail -f /var/log/pmdaemon/*.log | grep -E \"(failed|error|unauthorized|forbidden)\"\n\n# Set up log rotation with compression\nsudo tee /etc/logrotate.d/pmdaemon << 'EOF'\n/var/log/pmdaemon/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 pmdaemon pmdaemon\n    postrotate\n        systemctl reload pmdaemon || true\n    endscript\n}\nEOF\n"})}),"\n",(0,a.jsx)(n.h2,{id:"health-check-security",children:"Health Check Security"}),"\n",(0,a.jsx)(n.h3,{id:"secure-health-endpoints",children:"Secure Health Endpoints"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Secure health check endpoint\napp.get('/health', (req, res) => {\n  // Basic health check - no sensitive information\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Detailed health check with authentication\napp.get('/health/detailed', authenticateToken, async (req, res) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      database: await checkDatabase(),\n      redis: await checkRedis()\n    };\n    \n    res.json(health);\n  } catch (error) {\n    res.status(503).json({\n      status: 'unhealthy',\n      error: 'Service unavailable'\n    });\n  }\n});\n\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.sendStatus(401);\n  }\n  \n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"health-check-authentication",children:"Health Check Authentication"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "secure-health-checks",\n  "script": "node",\n  "args": ["server.js"],\n  "health_check": {\n    "check_type": "script",\n    "script": "./scripts/secure-health-check.sh",\n    "timeout": 10,\n    "interval": 30\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"secure-health-check.sh:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Authenticate health check request\nTOKEN=$(cat /etc/pmdaemon/health-token)\n\n# Make authenticated request\nRESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \\\n  -w "%{http_code}" \\\n  http://localhost:3000/health/detailed)\n\nHTTP_CODE="${RESPONSE: -3}"\n\nif [ "$HTTP_CODE" = "200" ]; then\n    echo "Health check passed"\n    exit 0\nelse\n    echo "Health check failed with code $HTTP_CODE"\n    exit 1\nfi\n'})}),"\n",(0,a.jsx)(n.h2,{id:"container-security",children:"Container Security"}),"\n",(0,a.jsx)(n.h3,{id:"secure-docker-configuration",children:"Secure Docker Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:'# Use non-root user\nFROM node:16-alpine\n\n# Create app user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Switch to non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# Start application\nCMD ["node", "server.js"]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"container-runtime-security",children:"Container Runtime Security"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Run container with security options\ndocker run -d \\\n  --name secure-app \\\n  --user 1001:1001 \\\n  --read-only \\\n  --tmpfs /tmp \\\n  --tmpfs /var/run \\\n  --cap-drop ALL \\\n  --cap-add NET_BIND_SERVICE \\\n  --security-opt no-new-privileges \\\n  --security-opt seccomp=seccomp-profile.json \\\n  myapp:latest\n"})}),"\n",(0,a.jsx)(n.h2,{id:"api-security",children:"API Security"}),"\n",(0,a.jsx)(n.h3,{id:"built-in-authentication",children:"Built-in Authentication"}),"\n",(0,a.jsx)(n.p,{children:"PMDaemon includes built-in API key authentication for secure access control:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Start with API key authentication (recommended for production)\npmdaemon web --api-key "your-secure-api-key-here"\n\n# Environment variable approach\nexport PMDAEMON_API_KEY="your-secure-api-key-here"\npmdaemon web\n\n# Custom host/port with authentication\npmdaemon web --host 0.0.0.0 --port 8080 --api-key "$API_KEY"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"api-key-security",children:"API Key Security"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Generate strong API keys:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Generate a secure 32-byte API key\nopenssl rand -hex 32\n\n# Or use a password manager to generate long random strings\n# Example: "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Secure API key storage:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Use environment variables (recommended)\necho 'export PMDAEMON_API_KEY=\"your-key-here\"' >> ~/.bashrc\n\n# Or use systemd environment files\necho 'PMDAEMON_API_KEY=your-key-here' | sudo tee /etc/pmdaemon/api.env\nsudo chmod 600 /etc/pmdaemon/api.env\n"})}),"\n",(0,a.jsx)(n.h3,{id:"authentication-headers",children:"Authentication Headers"}),"\n",(0,a.jsx)(n.p,{children:"PMDaemon accepts multiple authentication formats:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Bearer token (recommended)\ncurl -H "Authorization: Bearer your-api-key" \\\n     http://localhost:9615/api/processes\n\n# X-API-Key header\ncurl -H "X-API-Key: your-api-key" \\\n     http://localhost:9615/api/processes\n\n# ApiKey authorization\ncurl -H "Authorization: ApiKey your-api-key" \\\n     http://localhost:9615/api/processes\n'})}),"\n",(0,a.jsx)(n.h3,{id:"network-security-1",children:"Network Security"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Restrict access by binding to localhost:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Only allow local connections\npmdaemon web --host 127.0.0.1 --api-key "$API_KEY"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Use reverse proxy for external access:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-nginx",children:'# /etc/nginx/sites-available/pmdaemon\nserver {\n    listen 443 ssl http2;\n    server_name pmdaemon.example.com;\n\n    # SSL configuration\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n    \n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection "1; mode=block";\n    \n    location / {\n        proxy_pass http://127.0.0.1:9615;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"api-rate-limiting",children:"API Rate Limiting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const rateLimit = require('express-rate-limit');\nconst RedisStore = require('rate-limit-redis');\nconst Redis = require('ioredis');\n\nconst redisClient = new Redis(process.env.REDIS_URL);\n\n// Create rate limiter\nconst apiLimiter = rateLimit({\n  store: new RedisStore({\n    sendCommand: (...args) => redisClient.call(...args),\n  }),\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Too many requests, please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Apply rate limiting\napp.use('/api/', apiLimiter);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"compliance-and-auditing",children:"Compliance and Auditing"}),"\n",(0,a.jsx)(n.h3,{id:"audit-logging",children:"Audit Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Audit logging middleware\nfunction auditLog(action) {\n  return (req, res, next) => {\n    const audit = {\n      timestamp: new Date().toISOString(),\n      action: action,\n      user: req.user?.username || 'anonymous',\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      resource: req.originalUrl,\n      method: req.method\n    };\n    \n    // Log to audit file\n    fs.appendFileSync('/var/log/pmdaemon/audit.log', JSON.stringify(audit) + '\\n');\n    \n    next();\n  };\n}\n\n// Apply audit logging to sensitive operations\napp.post('/api/processes', auditLog('process_start'));\napp.delete('/api/processes/:id', auditLog('process_stop'));\napp.post('/api/processes/:id/restart', auditLog('process_restart'));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"security-scanning",children:"Security Scanning"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# security-scan.sh\n\necho "\ud83d\udd0d Running security scan..."\n\n# Check for known vulnerabilities\nnpm audit --audit-level moderate\n\n# Scan Docker images\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image myapp:latest\n\n# Check file permissions\nfind /etc/pmdaemon -type f -perm /o+w -exec ls -la {} \\;\n\n# Check for exposed secrets\ngrep -r "password\\|secret\\|key" /etc/pmdaemon/ --exclude="*.log"\n\necho "\u2705 Security scan complete"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,a.jsx)(n.h3,{id:"1-principle-of-least-privilege",children:"1. Principle of Least Privilege"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Run processes with minimal permissions\npmdaemon start "node server.js" --name web-app \\\n  --user webapp \\\n  --group webapp \\\n  --cwd /opt/webapp\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-secure-configuration-management",children:"2. Secure Configuration Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Use secure environment files\npmdaemon start "node server.js" --name api \\\n  --env-file /etc/pmdaemon/secrets.env\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-network-security",children:"3. Network Security"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Bind to localhost and use reverse proxy\npmdaemon web --host 127.0.0.1 --port 9615\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-regular-security-updates",children:"4. Regular Security Updates"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Keep PMDaemon updated\ncargo install pmdaemon --force\n\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-monitor-and-audit",children:"5. Monitor and Audit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Enable audit logging\nexport PMDAEMON_AUDIT_LOG=true\npmdaemon start "node server.js" --name web-app\n'})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimize secure configurations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/advanced/logging",children:"Logging"})})," - Secure logging practices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Security issue diagnosis"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Deployment Examples"})})," - Secure deployment patterns"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var r=i(6540);const a={},s=r.createContext(a);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);