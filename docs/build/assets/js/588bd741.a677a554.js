"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[4324],{633:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start","description":"Get up and running with PMDaemon in just 5 minutes! This guide covers the essential commands and features you need to start managing processes.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/pmdaemon/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/getting-started/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/pmdaemon/docs/getting-started/installation"},"next":{"title":"Migration from PM2","permalink":"/pmdaemon/docs/getting-started/migration-from-pm2"}}');var t=r(4848),a=r(8453);const o={},i="Quick Start",l={},c=[{value:"Basic Process Management",id:"basic-process-management",level:2},{value:"Start Your First Process",id:"start-your-first-process",level:3},{value:"View Running Processes",id:"view-running-processes",level:3},{value:"Control Processes",id:"control-processes",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Clustering with Port Management",id:"clustering-with-port-management",level:3},{value:"Health Checks &amp; Blocking Start",id:"health-checks--blocking-start",level:3},{value:"Real-time Monitoring",id:"real-time-monitoring",level:3},{value:"Bulk Operations",id:"bulk-operations",level:3},{value:"Configuration Files",id:"configuration-files",level:2},{value:"Create ecosystem.json",id:"create-ecosystemjson",level:3},{value:"Use Configuration File",id:"use-configuration-file",level:3},{value:"Web API &amp; Remote Monitoring",id:"web-api--remote-monitoring",level:2},{value:"REST API",id:"rest-api",level:3},{value:"WebSocket (Real-time Updates)",id:"websocket-real-time-updates",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Development Server",id:"development-server",level:3},{value:"Production API Cluster",id:"production-api-cluster",level:3},{value:"Python Microservice",id:"python-microservice",level:3},{value:"Background Worker",id:"background-worker",level:3},{value:"Runtime Port Overrides",id:"runtime-port-overrides",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Need Help?",id:"need-help",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,t.jsx)(n.p,{children:"Get up and running with PMDaemon in just 5 minutes! This guide covers the essential commands and features you need to start managing processes."}),"\n",(0,t.jsx)(n.h2,{id:"basic-process-management",children:"Basic Process Management"}),"\n",(0,t.jsx)(n.h3,{id:"start-your-first-process",children:"Start Your First Process"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start a simple process\r\npmdaemon start "node server.js" --name my-app\r\n\r\n# Start with custom options\r\npmdaemon start "python app.py" \\\r\n  --name python-api \\\r\n  --port 8000 \\\r\n  --max-memory 512M \\\r\n  --env NODE_ENV=production\n'})}),"\n",(0,t.jsx)(n.h3,{id:"view-running-processes",children:"View Running Processes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all processes\r\npmdaemon list\n"})}),"\n",(0,t.jsx)(n.p,{children:"You'll see a beautiful table with:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ID"})," - Process identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"})," - Process name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Status"})," - Current state (\ud83d\udfe2 Online, \ud83d\udd34 Stopped, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PID"})," - System process ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Port"})," - Assigned port(s)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CPU"})," - CPU usage percentage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory"})," - Memory usage (RSS)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Uptime"})," - How long the process has been running"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Restarts"})," - Number of restarts"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"control-processes",children:"Control Processes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Stop a process\r\npmdaemon stop my-app\r\n\r\n# Restart a process\r\npmdaemon restart my-app\r\n\r\n# Graceful reload (zero-downtime)\r\npmdaemon reload my-app\r\n\r\n# Delete a process (stops if running)\r\npmdaemon delete my-app\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"clustering-with-port-management",children:"Clustering with Port Management"}),"\n",(0,t.jsxs)(n.p,{children:["PMDaemon's ",(0,t.jsx)(n.strong,{children:"advanced port management"})," goes beyond PM2:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start 4 instances with consecutive ports\r\npmdaemon start "node server.js" \\\r\n  --name web-cluster \\\r\n  --instances 4 \\\r\n  --port 3000-3003\r\n\r\n# Auto-assign ports from a range\r\npmdaemon start "python worker.py" \\\r\n  --name workers \\\r\n  --instances 3 \\\r\n  --port auto:5000-5100\n'})}),"\n",(0,t.jsx)(n.p,{children:"Each instance gets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unique port"})," from the specified range"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment variables"}),": ",(0,t.jsx)(n.code,{children:"PORT"}),", ",(0,t.jsx)(n.code,{children:"PM2_INSTANCE_ID"}),", ",(0,t.jsx)(n.code,{children:"NODE_APP_INSTANCE"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Automatic load balancing"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"health-checks--blocking-start",children:"Health Checks & Blocking Start"}),"\n",(0,t.jsx)(n.p,{children:"Ensure your processes are ready before continuing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start with HTTP health check\r\npmdaemon start "node api.js" \\\r\n  --name api-server \\\r\n  --port 3000 \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready\r\n\r\n# Start with script-based health check\r\npmdaemon start "python worker.py" \\\r\n  --name background-worker \\\r\n  --health-check-script ./health-check.sh \\\r\n  --wait-timeout 30s \\\r\n  --wait-ready\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"--wait-ready"})," flag blocks until health checks pass, perfect for deployment scripts!"]}),"\n",(0,t.jsx)(n.h3,{id:"real-time-monitoring",children:"Real-time Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Real-time monitoring (default 1-second updates)\r\npmdaemon monit\r\n\r\n# Custom update interval\r\npmdaemon monit --interval 5\r\n\r\n# View process logs\r\npmdaemon logs my-app\r\n\r\n# Follow logs in real-time\r\npmdaemon logs my-app --follow\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bulk-operations",children:"Bulk Operations"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon supports powerful bulk operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Delete all processes\r\npmdaemon delete all --force\r\n\r\n# Delete only stopped processes\r\npmdaemon delete stopped --status --force\r\n\r\n# Delete only errored processes\r\npmdaemon delete errored --status\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,t.jsx)(n.p,{children:"For complex setups, use ecosystem configuration files:"}),"\n",(0,t.jsx)(n.h3,{id:"create-ecosystemjson",children:"Create ecosystem.json"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "max_memory_restart": "512M",\r\n      "env": {\r\n        "NODE_ENV": "production"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-service",\r\n      "script": "python",\r\n      "args": ["-m", "uvicorn", "main:app"],\r\n      "port": "8000",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:8000/health",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "retries": 3\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"use-configuration-file",children:"Use Configuration File"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start all apps from config\r\npmdaemon --config ecosystem.json start\r\n\r\n# Start specific app\r\npmdaemon --config ecosystem.json start --name web-app\n"})}),"\n",(0,t.jsx)(n.h2,{id:"web-api--remote-monitoring",children:"Web API & Remote Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"Start the web server for remote access:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start web API server\r\npmdaemon web --port 9615 --host 0.0.0.0\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now you can:"}),"\n",(0,t.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# List processes via API\r\ncurl http://localhost:9615/api/processes\r\n\r\n# Get system metrics\r\ncurl http://localhost:9615/api/system\r\n\r\n# Start a process via API\r\ncurl -X POST http://localhost:9615/api/processes \\\r\n  -H "Content-Type: application/json" \\\r\n  -d \'{"name": "api-test", "script": "node", "args": ["app.js"]}\'\n'})}),"\n",(0,t.jsx)(n.h3,{id:"websocket-real-time-updates",children:"WebSocket (Real-time Updates)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Connect to WebSocket for live updates\r\nwscat -c ws://localhost:9615/ws\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"development-server",children:"Development Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "npm run dev" \\\r\n  --name dev-server \\\r\n  --env NODE_ENV=development \\\r\n  --port 3000\n'})}),"\n",(0,t.jsx)(n.h3,{id:"production-api-cluster",children:"Production API Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node api.js" \\\r\n  --name prod-api \\\r\n  --instances 4 \\\r\n  --port auto:3000-3100 \\\r\n  --max-memory 1G \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --env NODE_ENV=production\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-microservice",children:"Python Microservice"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "python -m uvicorn main:app --host 0.0.0.0" \\\r\n  --name python-api \\\r\n  --port 8000 \\\r\n  --max-memory 512M \\\r\n  --health-check-url http://localhost:8000/docs\n'})}),"\n",(0,t.jsx)(n.h3,{id:"background-worker",children:"Background Worker"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "python worker.py" \\\r\n  --name background-worker \\\r\n  --health-check-script ./worker-health.sh \\\r\n  --max-memory 256M\n'})}),"\n",(0,t.jsx)(n.h2,{id:"runtime-port-overrides",children:"Runtime Port Overrides"}),"\n",(0,t.jsx)(n.p,{children:"Change ports without modifying saved configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start with default port from config\r\npmdaemon start "node server.js" --name web --port 3000\r\n\r\n# Restart with different port (doesn\'t modify saved config)\r\npmdaemon restart web --port 3001\r\n\r\n# Reload with port range for clustering\r\npmdaemon reload web --port 4000-4003\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you're familiar with the basics:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/process-management",children:"Process Management"})})," - Deep dive into lifecycle management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/port-management",children:"Port Management"})})," - Master advanced port features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/health-checks",children:"Health Checks"})})," - Set up robust monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/cli/commands",children:"CLI Reference"})})," - Complete command documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/configuration/ecosystem-files",children:"Configuration"})})," - Advanced configuration options"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"need-help",children:"Need Help?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Common issues and solutions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/examples/use-cases",children:"Examples"})})," - Real-world use cases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/entrepeneur4lyf/pmdaemon/issues",children:"GitHub Issues"})})," - Report bugs or request features"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Congratulations!"})," \ud83c\udf89 You're now ready to use PMDaemon for process management. The advanced features like port management, health checks, and real-time monitoring will help you build robust, production-ready applications."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);