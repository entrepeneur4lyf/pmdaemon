"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[6454],{2241:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced/troubleshooting","title":"Troubleshooting","description":"This comprehensive troubleshooting guide helps you diagnose and resolve common issues with PMDaemon. From process startup failures to performance problems, find solutions to keep your applications running smoothly.","source":"@site/docs/advanced/troubleshooting.md","sourceDirName":"advanced","slug":"/advanced/troubleshooting","permalink":"/pmdaemon/docs/advanced/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/advanced/troubleshooting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Logging","permalink":"/pmdaemon/docs/advanced/logging"},"next":{"title":"PM2 vs PMDaemon Comparison","permalink":"/pmdaemon/docs/comparison/pm2-vs-pmdaemon"}}');var i=s(4848),o=s(8453);const l={},a="Troubleshooting",t={},c=[{value:"Common Issues",id:"common-issues",level:2},{value:"Process Won&#39;t Start",id:"process-wont-start",level:3},{value:"Symptoms",id:"symptoms",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps",level:4},{value:"Common Solutions",id:"common-solutions",level:4},{value:"Port Conflicts",id:"port-conflicts",level:3},{value:"Symptoms",id:"symptoms-1",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps-1",level:4},{value:"Solutions",id:"solutions",level:4},{value:"Health Checks Failing",id:"health-checks-failing",level:3},{value:"Symptoms",id:"symptoms-2",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps-2",level:4},{value:"Solutions",id:"solutions-1",level:4},{value:"Memory Issues",id:"memory-issues",level:3},{value:"Symptoms",id:"symptoms-3",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps-3",level:4},{value:"Solutions",id:"solutions-2",level:4},{value:"Performance Problems",id:"performance-problems",level:3},{value:"Symptoms",id:"symptoms-4",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps-4",level:4},{value:"Solutions",id:"solutions-3",level:4},{value:"Log Issues",id:"log-issues",level:3},{value:"Symptoms",id:"symptoms-5",level:4},{value:"Diagnosis Steps",id:"diagnosis-steps-5",level:4},{value:"Solutions",id:"solutions-4",level:4},{value:"Advanced Troubleshooting",id:"advanced-troubleshooting",level:2},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Process Tracing",id:"process-tracing",level:3},{value:"Network Debugging",id:"network-debugging",level:3},{value:"Core Dumps",id:"core-dumps",level:3},{value:"Environment-Specific Issues",id:"environment-specific-issues",level:2},{value:"Docker Containers",id:"docker-containers",level:3},{value:"Systemd Integration",id:"systemd-integration",level:3},{value:"Cloud Deployments",id:"cloud-deployments",level:3},{value:"Diagnostic Commands",id:"diagnostic-commands",level:2},{value:"System Information",id:"system-information",level:3},{value:"Log Analysis",id:"log-analysis",level:3},{value:"Performance Analysis",id:"performance-analysis",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Community Support",id:"community-support",level:3},{value:"Providing Debug Information",id:"providing-debug-information",level:3},{value:"Creating Minimal Reproduction",id:"creating-minimal-reproduction",level:3},{value:"Prevention Strategies",id:"prevention-strategies",level:2},{value:"Monitoring Setup",id:"monitoring-setup",level:3},{value:"Automated Testing",id:"automated-testing",level:3},{value:"Configuration Validation",id:"configuration-validation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive troubleshooting guide helps you diagnose and resolve common issues with PMDaemon. From process startup failures to performance problems, find solutions to keep your applications running smoothly."}),"\n",(0,i.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.h3,{id:"process-wont-start",children:"Process Won't Start"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Process shows "errored" status immediately'}),"\n",(0,i.jsx)(n.li,{children:'"Failed to start process" error message'}),"\n",(0,i.jsx)(n.li,{children:"Process starts then immediately crashes"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check the script path:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Verify the script exists and is executable\r\nls -la /path/to/your/script\r\nwhich node  # For Node.js scripts\r\nwhich python  # For Python scripts\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check permissions:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Ensure script is executable\r\nchmod +x /path/to/your/script\r\n\r\n# Check if PMDaemon can access the directory\r\nls -la /path/to/working/directory\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Test the script manually:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run the script directly to see error messages\r\ncd /path/to/working/directory\r\nnode server.js\r\npython app.py\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check PMDaemon logs:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon logs process-name --lines 50\n"})}),"\n",(0,i.jsx)(n.h4,{id:"common-solutions",children:"Common Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Script not found:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Use absolute paths\r\npmdaemon start "/usr/bin/node" --name web-api --args "/full/path/to/server.js"\r\n\r\n# Or set correct working directory\r\npmdaemon start "node server.js" --name web-api --cwd /path/to/app\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Permission denied:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Fix script permissions\r\nchmod +x script.sh\r\n\r\n# Run as different user (future feature)\r\npmdaemon start "node server.js" --name web-api --user app-user\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Missing dependencies:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Install dependencies first\r\ncd /path/to/app\r\nnpm install  # Node.js\r\npip install -r requirements.txt  # Python\r\n\r\n# Then start the process\r\npmdaemon start "node server.js" --name web-api --cwd /path/to/app\n'})}),"\n",(0,i.jsx)(n.h3,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms-1",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Port already in use" error'}),"\n",(0,i.jsx)(n.li,{children:"Process starts but can't bind to port"}),"\n",(0,i.jsx)(n.li,{children:"Connection refused when accessing service"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps-1",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check what's using the port:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Linux/macOS\r\nlsof -i :3000\r\nnetstat -tulpn | grep :3000\r\n\r\n# Alternative\r\nss -tulpn | grep :3000\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check PMDaemon port assignments:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon list  # Shows port assignments\n"})}),"\n",(0,i.jsx)(n.h4,{id:"solutions",children:"Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Kill conflicting process:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Find and kill the process using the port\r\nlsof -ti:3000 | xargs kill -9\r\n\r\n# Or use fuser\r\nfuser -k 3000/tcp\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use different port:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api --port 3001\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use auto port assignment:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api --port auto:3000-3100\n'})}),"\n",(0,i.jsx)(n.h3,{id:"health-checks-failing",children:"Health Checks Failing"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms-2",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Process shows "unhealthy" status'}),"\n",(0,i.jsx)(n.li,{children:"Health check timeouts"}),"\n",(0,i.jsx)(n.li,{children:"Process restarts due to health failures"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps-2",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Test health check manually:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# For HTTP health checks\r\ncurl -v http://localhost:3000/health\r\n\r\n# For script health checks\r\n./health-check.sh\r\necho $?  # Should be 0 for healthy\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check health check configuration:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon info process-name\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Review application logs:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon logs process-name --lines 100\n"})}),"\n",(0,i.jsx)(n.h4,{id:"solutions-1",children:"Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Increase timeout:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-timeout 30s\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fix health endpoint:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Ensure health endpoint responds quickly\r\napp.get('/health', (req, res) => {\r\n  // Quick health check - avoid heavy operations\r\n  res.status(200).json({ status: 'healthy', timestamp: new Date() });\r\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Adjust retry settings:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-retries 5 \\\r\n  --health-check-interval 60s\n'})}),"\n",(0,i.jsx)(n.h3,{id:"memory-issues",children:"Memory Issues"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms-3",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Process restarting due to memory limits"}),"\n",(0,i.jsx)(n.li,{children:'"Memory limit exceeded" messages'}),"\n",(0,i.jsx)(n.li,{children:"System running out of memory"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps-3",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check memory usage:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# System memory\r\nfree -h\r\ntop\r\nhtop\r\n\r\n# Process memory\r\npmdaemon list  # Shows memory usage\r\npmdaemon monit  # Real-time monitoring\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check memory limits:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon info process-name\n"})}),"\n",(0,i.jsx)(n.h4,{id:"solutions-2",children:"Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Increase memory limit:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon restart process-name --max-memory 1G\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimize application memory usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Increase heap size\r\npmdaemon start \"node --max-old-space-size=1024 server.js\" --name web-api\r\n\r\n// Monitor memory usage in application\r\nsetInterval(() => {\r\n  const usage = process.memoryUsage();\r\n  console.log('Memory usage:', {\r\n    rss: Math.round(usage.rss / 1024 / 1024) + 'MB',\r\n    heapUsed: Math.round(usage.heapUsed / 1024 / 1024) + 'MB'\r\n  });\r\n}, 60000);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scale horizontally instead:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Instead of one large instance\r\npmdaemon delete memory-hungry-app\r\n\r\n# Use multiple smaller instances\r\npmdaemon start "node server.js" --name web-cluster \\\r\n  --instances 4 --max-memory 512M --port 3000-3003\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-problems",children:"Performance Problems"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms-4",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"High CPU usage"}),"\n",(0,i.jsx)(n.li,{children:"Slow response times"}),"\n",(0,i.jsx)(n.li,{children:"Process becoming unresponsive"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps-4",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Monitor system resources:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Real-time monitoring\r\npmdaemon monit\r\n\r\n# System monitoring\r\ntop\r\nhtop\r\niostat 1\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check process configuration:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon info process-name\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Profile the application:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Node.js profiling\r\npmdaemon start "node --inspect server.js" --name web-api\r\n\r\n# Python profiling\r\npmdaemon start "python -m cProfile app.py" --name api\n'})}),"\n",(0,i.jsx)(n.h4,{id:"solutions-3",children:"Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scale with clustering:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pmdaemon restart web-api --instances 4 --port 3000-3003\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimize application code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Use clustering\r\nconst cluster = require('cluster');\r\nconst numCPUs = require('os').cpus().length;\r\n\r\nif (cluster.isMaster) {\r\n  for (let i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n} else {\r\n  // Worker process\r\n  require('./server');\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Adjust process priorities:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Lower priority for background tasks\r\nnice -n 10 pmdaemon start "python worker.py" --name background-worker\n'})}),"\n",(0,i.jsx)(n.h3,{id:"log-issues",children:"Log Issues"}),"\n",(0,i.jsx)(n.h4,{id:"symptoms-5",children:"Symptoms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Missing log files"}),"\n",(0,i.jsx)(n.li,{children:"Log files growing too large"}),"\n",(0,i.jsx)(n.li,{children:"Cannot access log files"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"diagnosis-steps-5",children:"Diagnosis Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check log file locations:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon info process-name | grep -A 10 "Log Files"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check file permissions:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ls -la /path/to/log/files\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Check disk space:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"df -h\n"})}),"\n",(0,i.jsx)(n.h4,{id:"solutions-4",children:"Solutions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fix log file permissions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create log directory\r\nsudo mkdir -p /var/log/pmdaemon\r\nsudo chown $USER:$USER /var/log/pmdaemon\r\n\r\n# Restart with correct log path\r\npmdaemon restart process-name --out-file /var/log/pmdaemon/app.out\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implement log rotation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Use logrotate\r\nsudo tee /etc/logrotate.d/pmdaemon << EOF\r\n/var/log/pmdaemon/*.log {\r\n    daily\r\n    rotate 7\r\n    compress\r\n    delaycompress\r\n    missingok\r\n    notifempty\r\n    copytruncate\r\n}\r\nEOF\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Redirect logs to syslog:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js | logger -t web-api" --name web-api\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-troubleshooting",children:"Advanced Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,i.jsx)(n.p,{children:"Enable verbose logging for detailed troubleshooting:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Enable debug logging\r\nexport PMDAEMON_LOG_LEVEL=debug\r\npmdaemon --verbose start "node server.js" --name web-api\r\n\r\n# Check debug logs\r\npmdaemon logs pmdaemon-daemon --lines 100\n'})}),"\n",(0,i.jsx)(n.h3,{id:"process-tracing",children:"Process Tracing"}),"\n",(0,i.jsx)(n.p,{children:"Trace system calls and signals:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Linux - trace process system calls\r\nstrace -p $(pmdaemon info web-api | grep PID | awk '{print $2}')\r\n\r\n# macOS - trace process\r\ndtruss -p $(pmdaemon info web-api | grep PID | awk '{print $2}')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"network-debugging",children:"Network Debugging"}),"\n",(0,i.jsx)(n.p,{children:"Debug network-related issues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check network connections\r\nnetstat -tulpn | grep $(pmdaemon info web-api | grep PID | awk '{print $2}')\r\n\r\n# Monitor network traffic\r\ntcpdump -i any port 3000\r\n\r\n# Test connectivity\r\ntelnet localhost 3000\r\nnc -zv localhost 3000\n"})}),"\n",(0,i.jsx)(n.h3,{id:"core-dumps",children:"Core Dumps"}),"\n",(0,i.jsx)(n.p,{children:"Enable core dumps for crash analysis:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enable core dumps\r\nulimit -c unlimited\r\n\r\n# Set core dump pattern\r\necho '/tmp/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern\r\n\r\n# Restart process\r\npmdaemon restart process-name\n"})}),"\n",(0,i.jsx)(n.h2,{id:"environment-specific-issues",children:"Environment-Specific Issues"}),"\n",(0,i.jsx)(n.h3,{id:"docker-containers",children:"Docker Containers"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Issue: Process not starting in container"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'# Ensure proper signal handling\r\nFROM node:16\r\nCOPY . /app\r\nWORKDIR /app\r\nCMD ["pmdaemon", "start", "node", "server.js", "--name", "web-api"]\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Issue: Health checks failing in container"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Use container-appropriate health check URLs\r\npmdaemon start "node server.js" --name web-api \\\r\n  --health-check-url http://0.0.0.0:3000/health\n'})}),"\n",(0,i.jsx)(n.h3,{id:"systemd-integration",children:"Systemd Integration"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Issue: PMDaemon not starting on boot"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"# /etc/systemd/system/pmdaemon.service\r\n[Unit]\r\nDescription=PMDaemon Process Manager\r\nAfter=network.target\r\n\r\n[Service]\r\nType=forking\r\nUser=pmdaemon\r\nExecStart=/usr/local/bin/pmdaemon start --config /etc/pmdaemon/ecosystem.json\r\nExecReload=/usr/local/bin/pmdaemon reload all\r\nRestart=always\r\n\r\n[Install]\r\nWantedBy=multi-user.target\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cloud-deployments",children:"Cloud Deployments"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Issue: Processes failing in cloud environments"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Handle cloud metadata services\r\npmdaemon start "node server.js" --name web-api \\\r\n  --env CLOUD_PROVIDER=aws \\\r\n  --env INSTANCE_METADATA_URL=http://169.254.169.254\n'})}),"\n",(0,i.jsx)(n.h2,{id:"diagnostic-commands",children:"Diagnostic Commands"}),"\n",(0,i.jsx)(n.h3,{id:"system-information",children:"System Information"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# PMDaemon version and system info\r\npmdaemon --version\r\npmdaemon system-info\r\n\r\n# Process information\r\npmdaemon info process-name\r\npmdaemon describe process-name\r\n\r\n# System resources\r\npmdaemon system-resources\n"})}),"\n",(0,i.jsx)(n.h3,{id:"log-analysis",children:"Log Analysis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Recent logs with timestamps\r\npmdaemon logs process-name --lines 100 --timestamps\r\n\r\n# Follow logs in real-time\r\npmdaemon logs process-name --follow\r\n\r\n# Search logs for errors\r\npmdaemon logs process-name --lines 1000 | grep -i error\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-analysis",children:"Performance Analysis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Real-time monitoring\r\npmdaemon monit --interval 1s\r\n\r\n# Process tree\r\npmdaemon tree\r\n\r\n# Resource usage history\r\npmdaemon stats process-name\n"})}),"\n",(0,i.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,i.jsx)(n.h3,{id:"community-support",children:"Community Support"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub Issues"}),": Report bugs and request features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Check the latest documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),": Review example configurations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"providing-debug-information",children:"Providing Debug Information"}),"\n",(0,i.jsx)(n.p,{children:"When reporting issues, include:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# System information\r\nuname -a\r\npmdaemon --version\r\n\r\n# Process configuration\r\npmdaemon info process-name\r\n\r\n# Recent logs\r\npmdaemon logs process-name --lines 50\r\n\r\n# System resources\r\nfree -h\r\ndf -h\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-minimal-reproduction",children:"Creating Minimal Reproduction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create minimal test case\r\necho \'console.log("Hello World"); setInterval(() => {}, 1000);\' > test.js\r\npmdaemon start "node test.js" --name test-process\r\n\r\n# Test with minimal configuration\r\npmdaemon start "node test.js" --name test --port 3000 --health-check-url http://localhost:3000/health\n'})}),"\n",(0,i.jsx)(n.h2,{id:"prevention-strategies",children:"Prevention Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"monitoring-setup",children:"Monitoring Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set up comprehensive monitoring\r\npmdaemon start "node server.js" --name web-api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-interval 30s \\\r\n  --max-memory 512M \\\r\n  --max-restarts 5\n'})}),"\n",(0,i.jsx)(n.h3,{id:"automated-testing",children:"Automated Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# deployment-test.sh\r\n\r\n# Start service\r\npmdaemon start "node server.js" --name test-api --port 3000 --wait-ready\r\n\r\n# Test health endpoint\r\nif curl -f http://localhost:3000/health; then\r\n    echo "\u2705 Service is healthy"\r\nelse\r\n    echo "\u274c Service health check failed"\r\n    pmdaemon logs test-api --lines 20\r\n    exit 1\r\nfi\r\n\r\n# Cleanup\r\npmdaemon delete test-api\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Validate configuration before deployment\r\npmdaemon validate ecosystem.json --strict\r\n\r\n# Test configuration in staging\r\npmdaemon --config ecosystem.staging.json start\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimize PMDaemon performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Security best practices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/advanced/logging",children:"Logging"})})," - Advanced logging configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Examples"})})," - Real-world deployment examples"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);