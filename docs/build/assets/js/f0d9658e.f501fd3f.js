"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[7966],{6277:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"configuration/schema-validation","title":"Schema Validation","description":"PMDaemon provides comprehensive configuration validation to ensure your process configurations are correct before deployment. This prevents runtime errors and helps catch configuration issues early in the development cycle.","source":"@site/docs/configuration/schema-validation.md","sourceDirName":"configuration","slug":"/configuration/schema-validation","permalink":"/pmdaemon/docs/configuration/schema-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/configuration/schema-validation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Configuration","permalink":"/pmdaemon/docs/configuration/advanced-configuration"},"next":{"title":"REST API Reference","permalink":"/pmdaemon/docs/api/rest-api"}}');var a=r(4848),s=r(8453);const t={},o="Schema Validation",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Validation Commands",id:"validation-commands",level:2},{value:"Validate Configuration Files",id:"validate-configuration-files",level:3},{value:"Validate Before Starting",id:"validate-before-starting",level:3},{value:"Configuration Schema",id:"configuration-schema",level:2},{value:"Basic Process Schema",id:"basic-process-schema",level:3},{value:"Port Configuration Schema",id:"port-configuration-schema",level:3},{value:"Health Check Schema",id:"health-check-schema",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Required Fields",id:"required-fields",level:3},{value:"Name Validation",id:"name-validation",level:3},{value:"Instance Validation",id:"instance-validation",level:3},{value:"Port Validation",id:"port-validation",level:3},{value:"Memory Validation",id:"memory-validation",level:3},{value:"Cross-Field Validation",id:"cross-field-validation",level:2},{value:"Port Range vs Instances",id:"port-range-vs-instances",level:3},{value:"Health Check Dependencies",id:"health-check-dependencies",level:3},{value:"Validation Examples",id:"validation-examples",level:2},{value:"Complete Valid Configuration",id:"complete-valid-configuration",level:3},{value:"Common Validation Errors",id:"common-validation-errors",level:3},{value:"Missing Required Fields",id:"missing-required-fields",level:4},{value:"Invalid Port Range",id:"invalid-port-range",level:4},{value:"Invalid Health Check Configuration",id:"invalid-health-check-configuration",level:4},{value:"Validation Warnings",id:"validation-warnings",level:2},{value:"Performance Warnings",id:"performance-warnings",level:3},{value:"Memory Warnings",id:"memory-warnings",level:3},{value:"Health Check Warnings",id:"health-check-warnings",level:3},{value:"Custom Validation Rules",id:"custom-validation-rules",level:2},{value:"Environment-Specific Validation",id:"environment-specific-validation",level:3},{value:"Strict Validation Mode",id:"strict-validation-mode",level:3},{value:"Integration with CI/CD",id:"integration-with-cicd",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Early and Often",id:"1-validate-early-and-often",level:3},{value:"2. Use Schema Versioning",id:"2-use-schema-versioning",level:3},{value:"3. Handle Validation in Scripts",id:"3-handle-validation-in-scripts",level:3},{value:"4. Use Environment-Specific Validation",id:"4-use-environment-specific-validation",level:3},{value:"Troubleshooting Validation Issues",id:"troubleshooting-validation-issues",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Port Conflicts",id:"port-conflicts",level:4},{value:"Memory Limits",id:"memory-limits",level:4},{value:"Health Check URLs",id:"health-check-urls",level:4},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"schema-validation",children:"Schema Validation"})}),"\n",(0,a.jsx)(e.p,{children:"PMDaemon provides comprehensive configuration validation to ensure your process configurations are correct before deployment. This prevents runtime errors and helps catch configuration issues early in the development cycle."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"PMDaemon's validation system includes:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ud83d\udd0d Schema validation"})," - Validates configuration structure and types"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ud83d\udccb Required field checking"})," - Ensures all mandatory fields are present"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ud83c\udfaf Value range validation"})," - Checks numeric ranges and constraints"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ud83d\udd17 Dependency validation"})," - Validates relationships between fields"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\u26a0\ufe0f Warning detection"})," - Identifies potential configuration issues"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"validation-commands",children:"Validation Commands"}),"\n",(0,a.jsx)(e.h3,{id:"validate-configuration-files",children:"Validate Configuration Files"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Validate a configuration file\r\npmdaemon validate ecosystem.json\r\n\r\n# Validate with detailed output\r\npmdaemon validate ecosystem.json --verbose\r\n\r\n# Validate multiple files\r\npmdaemon validate ecosystem.json ecosystem.staging.json\n"})}),"\n",(0,a.jsx)(e.h3,{id:"validate-before-starting",children:"Validate Before Starting"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Validate and start if valid\r\npmdaemon start --config ecosystem.json --validate\r\n\r\n# CLI validation (automatic)\r\npmdaemon start \"node server.js\" --name web-api --port invalid\r\n# Error: Invalid port format 'invalid'\n"})}),"\n",(0,a.jsx)(e.h2,{id:"configuration-schema",children:"Configuration Schema"}),"\n",(0,a.jsx)(e.h3,{id:"basic-process-schema",children:"Basic Process Schema"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "$schema": "https://pmdaemon.io/schema/process.json",\r\n  "type": "object",\r\n  "required": ["name", "script"],\r\n  "properties": {\r\n    "name": {\r\n      "type": "string",\r\n      "pattern": "^[a-zA-Z0-9_-]+$",\r\n      "minLength": 1,\r\n      "maxLength": 50\r\n    },\r\n    "script": {\r\n      "type": "string",\r\n      "minLength": 1\r\n    },\r\n    "args": {\r\n      "type": "array",\r\n      "items": {\r\n        "type": "string"\r\n      }\r\n    },\r\n    "instances": {\r\n      "oneOf": [\r\n        {\r\n          "type": "integer",\r\n          "minimum": 0\r\n        },\r\n        {\r\n          "type": "string",\r\n          "enum": ["max"]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"port-configuration-schema",children:"Port Configuration Schema"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "port": {\r\n    "oneOf": [\r\n      {\r\n        "type": "string",\r\n        "pattern": "^\\\\d+$",\r\n        "description": "Single port number"\r\n      },\r\n      {\r\n        "type": "string",\r\n        "pattern": "^\\\\d+-\\\\d+$",\r\n        "description": "Port range (e.g., 3000-3003)"\r\n      },\r\n      {\r\n        "type": "string",\r\n        "pattern": "^auto:\\\\d+-\\\\d+$",\r\n        "description": "Auto-assign from range"\r\n      },\r\n      {\r\n        "type": "integer",\r\n        "minimum": 1,\r\n        "maximum": 65535\r\n      }\r\n    ]\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"health-check-schema",children:"Health Check Schema"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "health_check": {\r\n    "type": "object",\r\n    "required": ["check_type"],\r\n    "properties": {\r\n      "check_type": {\r\n        "type": "string",\r\n        "enum": ["http", "script"]\r\n      },\r\n      "url": {\r\n        "type": "string",\r\n        "format": "uri",\r\n        "description": "Required for HTTP health checks"\r\n      },\r\n      "script": {\r\n        "type": "string",\r\n        "description": "Required for script health checks"\r\n      },\r\n      "timeout": {\r\n        "type": "integer",\r\n        "minimum": 1,\r\n        "maximum": 300,\r\n        "default": 30\r\n      },\r\n      "interval": {\r\n        "type": "integer",\r\n        "minimum": 5,\r\n        "maximum": 3600,\r\n        "default": 60\r\n      },\r\n      "retries": {\r\n        "type": "integer",\r\n        "minimum": 1,\r\n        "maximum": 10,\r\n        "default": 3\r\n      },\r\n      "enabled": {\r\n        "type": "boolean",\r\n        "default": false,\r\n        "description": "Whether health checks are enabled"\r\n      }\r\n    },\r\n    "if": {\r\n      "properties": {\r\n        "check_type": {\r\n          "const": "http"\r\n        }\r\n      }\r\n    },\r\n    "then": {\r\n      "required": ["url"]\r\n    },\r\n    "else": {\r\n      "required": ["script"]\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,a.jsx)(e.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u2705 Valid: All required fields present\r\n{\r\n  "name": "web-api",\r\n  "script": "node",\r\n  "args": ["server.js"]\r\n}\r\n\r\n// \u274c Invalid: Missing required field \'name\'\r\n{\r\n  "script": "node",\r\n  "args": ["server.js"]\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"name-validation",children:"Name Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u2705 Valid names\r\n{\r\n  "name": "web-api"\r\n}\r\n{\r\n  "name": "user_service"\r\n}\r\n{\r\n  "name": "worker-123"\r\n}\r\n\r\n// \u274c Invalid names\r\n{\r\n  "name": "web api"  // Spaces not allowed\r\n}\r\n{\r\n  "name": "service@prod"  // Special characters not allowed\r\n}\r\n{\r\n  "name": ""  // Empty string not allowed\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"instance-validation",children:"Instance Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u2705 Valid instances\r\n{\r\n  "instances": 1\r\n}\r\n{\r\n  "instances": 4\r\n}\r\n{\r\n  "instances": "max"\r\n}\r\n\r\n// \u274c Invalid instances\r\n{\r\n  "instances": 0  // Must be positive\r\n}\r\n{\r\n  "instances": -1  // Negative not allowed\r\n}\r\n{\r\n  "instances": "invalid"  // Invalid string value\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"port-validation",children:"Port Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u2705 Valid port configurations\r\n{\r\n  "port": "3000"\r\n}\r\n{\r\n  "port": 3000\r\n}\r\n{\r\n  "port": "3000-3003"\r\n}\r\n{\r\n  "port": "auto:5000-5100"\r\n}\r\n\r\n// \u274c Invalid port configurations\r\n{\r\n  "port": "0"  // Port 0 not allowed\r\n}\r\n{\r\n  "port": "70000"  // Port > 65535\r\n}\r\n{\r\n  "port": "3000-2999"  // Invalid range (start > end)\r\n}\r\n{\r\n  "port": "invalid"  // Invalid format\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"memory-validation",children:"Memory Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u2705 Valid memory formats\r\n{\r\n  "max_memory_restart": "512M"\r\n}\r\n{\r\n  "max_memory_restart": "1G"\r\n}\r\n{\r\n  "max_memory_restart": "100KB"\r\n}\r\n\r\n// \u274c Invalid memory formats\r\n{\r\n  "max_memory_restart": "invalid"\r\n}\r\n{\r\n  "max_memory_restart": "512"  // Missing unit\r\n}\r\n{\r\n  "max_memory_restart": "-1M"  // Negative not allowed\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"cross-field-validation",children:"Cross-Field Validation"}),"\n",(0,a.jsx)(e.h3,{id:"port-range-vs-instances",children:"Port Range vs Instances"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u274c Invalid: Need 4 ports but only 2 in range\r\n{\r\n  "name": "web-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "port": "3000-3001"\r\n}\r\n\r\n// \u2705 Valid: 4 ports for 4 instances\r\n{\r\n  "name": "web-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "port": "3000-3003"\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"health-check-dependencies",children:"Health Check Dependencies"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// \u274c Invalid: HTTP health check without URL\r\n{\r\n  "name": "web-api",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "timeout": 10\r\n  }\r\n}\r\n\r\n// \u2705 Valid: HTTP health check with URL\r\n{\r\n  "name": "web-api",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "timeout": 10\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"validation-examples",children:"Validation Examples"}),"\n",(0,a.jsx)(e.h3,{id:"complete-valid-configuration",children:"Complete Valid Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "production-api",\r\n      "script": "node",\r\n      "args": ["dist/server.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "cwd": "/var/www/api",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://localhost/mydb"\r\n      },\r\n      "max_memory_restart": "1G",\r\n      "autorestart": true,\r\n      "max_restarts": 5,\r\n      "min_uptime": "10s",\r\n      "restart_delay": "2s",\r\n      "kill_timeout": "30s",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"common-validation-errors",children:"Common Validation Errors"}),"\n",(0,a.jsx)(e.h4,{id:"missing-required-fields",children:"Missing Required Fields"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'// Error: Missing required field \'name\'\r\n{\r\n  "script": "node",\r\n  "args": ["server.js"]\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Error message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Validation Error: Missing required field 'name'\r\n  at apps[0]\r\n  Required fields: name, script\n"})}),"\n",(0,a.jsx)(e.h4,{id:"invalid-port-range",children:"Invalid Port Range"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "web-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "port": "3000-3001"\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Error message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'Validation Error: Port range insufficient for instances\r\n  at apps[0].port\r\n  Need 4 ports but range 3000-3001 only provides 2 ports\r\n  Suggestion: Use port range "3000-3003" or reduce instances to 2\n'})}),"\n",(0,a.jsx)(e.h4,{id:"invalid-health-check-configuration",children:"Invalid Health Check Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "api",\r\n  "script": "node",\r\n  "args": ["api.js"],\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "timeout": 10\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Error message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'Validation Error: Missing required field for HTTP health check\r\n  at apps[0].health_check\r\n  HTTP health checks require \'url\' field\r\n  Example: "url": "http://localhost:3000/health"\n'})}),"\n",(0,a.jsx)(e.h2,{id:"validation-warnings",children:"Validation Warnings"}),"\n",(0,a.jsx)(e.p,{children:"PMDaemon also provides warnings for potentially problematic configurations:"}),"\n",(0,a.jsx)(e.h3,{id:"performance-warnings",children:"Performance Warnings"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "high-instance-service",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 32  // Warning: High instance count\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Warning message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Warning: High instance count (32) may cause resource contention\r\n  at apps[0].instances\r\n  Consider reducing instances or increasing system resources\r\n  Recommended: Use instances <= CPU cores (8)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"memory-warnings",children:"Memory Warnings"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "memory-service",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "max_memory_restart": "8G"  // Warning: High memory limit\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Warning message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Warning: High memory limit (8G) may cause system instability\r\n  at apps[0].max_memory_restart\r\n  System has 8G total memory\r\n  Recommendation: Use max_memory_restart <= 6G\n"})}),"\n",(0,a.jsx)(e.h3,{id:"health-check-warnings",children:"Health Check Warnings"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "api-service",\r\n  "script": "node",\r\n  "args": ["api.js"],\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "timeout": 1  // Warning: Very short timeout\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Warning message:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Warning: Very short health check timeout (1s)\r\n  at apps[0].health_check.timeout\r\n  May cause false positives for slow-starting services\r\n  Recommendation: Use timeout >= 5s\n"})}),"\n",(0,a.jsx)(e.h2,{id:"custom-validation-rules",children:"Custom Validation Rules"}),"\n",(0,a.jsx)(e.h3,{id:"environment-specific-validation",children:"Environment-Specific Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Validate for production environment\r\npmdaemon validate ecosystem.json --env production\r\n\r\n# Validate for development environment\r\npmdaemon validate ecosystem.json --env development\n"})}),"\n",(0,a.jsx)(e.h3,{id:"strict-validation-mode",children:"Strict Validation Mode"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Treat warnings as errors\r\npmdaemon validate ecosystem.json --strict\r\n\r\n# Validate with custom schema\r\npmdaemon validate ecosystem.json --schema custom-schema.json\n"})}),"\n",(0,a.jsx)(e.h2,{id:"integration-with-cicd",children:"Integration with CI/CD"}),"\n",(0,a.jsx)(e.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"name: Validate PMDaemon Configuration\r\non: [push, pull_request]\r\n\r\njobs:\r\n  validate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: Install PMDaemon\r\n        run: cargo install pmdaemon\r\n      - name: Validate Configuration\r\n        run: |\r\n          pmdaemon validate ecosystem.json --strict\r\n          pmdaemon validate ecosystem.production.json --strict\n"})}),"\n",(0,a.jsx)(e.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'validate-config:\r\n  stage: validate\r\n  script:\r\n    - cargo install pmdaemon\r\n    - pmdaemon validate ecosystem.json --strict\r\n  only:\r\n    changes:\r\n      - ecosystem*.json\r\n      - "**/*.pmdaemon.json"\n'})}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"1-validate-early-and-often",children:"1. Validate Early and Often"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Validate during development\r\npmdaemon validate ecosystem.json\r\n\r\n# Validate before deployment\r\npmdaemon validate ecosystem.production.json --strict\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-use-schema-versioning",children:"2. Use Schema Versioning"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\r\n  "$schema": "https://pmdaemon.io/schema/v1/process.json",\r\n  "apps": [...]\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-handle-validation-in-scripts",children:"3. Handle Validation in Scripts"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\necho "Validating configuration..."\r\nif pmdaemon validate ecosystem.json --strict; then\r\n    echo "\u2705 Configuration valid"\r\n    pmdaemon --config ecosystem.json start\r\nelse\r\n    echo "\u274c Configuration invalid"\r\n    exit 1\r\nfi\n'})}),"\n",(0,a.jsx)(e.h3,{id:"4-use-environment-specific-validation",children:"4. Use Environment-Specific Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Different validation rules for different environments\r\npmdaemon validate ecosystem.dev.json --env development\r\npmdaemon validate ecosystem.prod.json --env production --strict\n"})}),"\n",(0,a.jsx)(e.h2,{id:"troubleshooting-validation-issues",children:"Troubleshooting Validation Issues"}),"\n",(0,a.jsx)(e.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,a.jsx)(e.h4,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'# Check for port conflicts\r\npmdaemon validate ecosystem.json --check-ports\r\n\r\n# Resolve by using auto-assignment\r\n{\r\n  "port": "auto:3000-3100"\r\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"memory-limits",children:"Memory Limits"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'# Check system memory constraints\r\npmdaemon validate ecosystem.json --check-resources\r\n\r\n# Adjust memory limits accordingly\r\n{\r\n  "max_memory_restart": "512M"  // Reduced from 2G\r\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"health-check-urls",children:"Health Check URLs"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'# Validate health check endpoints\r\npmdaemon validate ecosystem.json --check-health-urls\r\n\r\n# Fix unreachable URLs\r\n{\r\n  "health_check": {\r\n    "url": "http://localhost:3000/health"  // Fixed from external URL\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/pmdaemon/docs/configuration/process-configuration",children:"Process Configuration"})})," - Individual process settings"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/pmdaemon/docs/configuration/advanced-configuration",children:"Advanced Configuration"})})," - Complex scenarios"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/pmdaemon/docs/configuration/ecosystem-files",children:"Ecosystem Files"})})," - Multi-process configurations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Common configuration issues"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>o});var i=r(6540);const a={},s=i.createContext(a);function t(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:t(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);