"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[966],{2042:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"examples/clustering","title":"Clustering Examples","description":"This guide demonstrates how to implement clustering and load balancing with PMDaemon, including port management strategies for multi-instance applications.","source":"@site/docs/examples/clustering.md","sourceDirName":"examples","slug":"/examples/clustering","permalink":"/pmdaemon/docs/examples/clustering","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/examples/clustering.md","tags":[],"version":"current","frontMatter":{}}');var t=r(4848),a=r(8453);const i={},l="Clustering Examples",c={},o=[{value:"Basic Clustering Setup",id:"basic-clustering-setup",level:2},{value:"Simple Cluster Configuration",id:"simple-cluster-configuration",level:3},{value:"Auto-Scaling Based on CPU Cores",id:"auto-scaling-based-on-cpu-cores",level:3},{value:"Advanced Port Management",id:"advanced-port-management",level:2},{value:"1. Port Increment Strategy",id:"1-port-increment-strategy",level:3},{value:"2. Dynamic Port Allocation",id:"2-dynamic-port-allocation",level:3},{value:"3. Port Range with Load Balancer",id:"3-port-range-with-load-balancer",level:3},{value:"Microservices Architecture",id:"microservices-architecture",level:2},{value:"Multi-Service Cluster",id:"multi-service-cluster",level:3},{value:"Load Balancing Strategies",id:"load-balancing-strategies",level:2},{value:"1. Round Robin with Health Checks",id:"1-round-robin-with-health-checks",level:3},{value:"2. Weighted Load Balancing",id:"2-weighted-load-balancing",level:3},{value:"3. Geographic Load Balancing",id:"3-geographic-load-balancing",level:3},{value:"High Availability Patterns",id:"high-availability-patterns",level:2},{value:"1. Blue-Green Deployment",id:"1-blue-green-deployment",level:3},{value:"2. Canary Deployment",id:"2-canary-deployment",level:3},{value:"3. Circuit Breaker Pattern",id:"3-circuit-breaker-pattern",level:3},{value:"Container-Based Clustering",id:"container-based-clustering",level:2},{value:"1. Docker Swarm Integration",id:"1-docker-swarm-integration",level:3},{value:"2. Kubernetes-Style Deployment",id:"2-kubernetes-style-deployment",level:3},{value:"Monitoring Clustered Applications",id:"monitoring-clustered-applications",level:2},{value:"1. Centralized Logging",id:"1-centralized-logging",level:3},{value:"2. Metrics Collection",id:"2-metrics-collection",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"1. CPU-Optimized Clustering",id:"1-cpu-optimized-clustering",level:3},{value:"2. I/O-Optimized Clustering",id:"2-io-optimized-clustering",level:3},{value:"3. Memory-Optimized Clustering",id:"3-memory-optimized-clustering",level:3},{value:"Troubleshooting Clustered Applications",id:"troubleshooting-clustered-applications",level:2},{value:"1. Port Conflict Resolution",id:"1-port-conflict-resolution",level:3},{value:"2. Load Distribution Analysis",id:"2-load-distribution-analysis",level:3},{value:"3. Performance Monitoring",id:"3-performance-monitoring",level:3},{value:"Deployment Scripts",id:"deployment-scripts",level:2},{value:"1. Cluster Deployment Script",id:"1-cluster-deployment-script",level:3},{value:"2. Rolling Update Script",id:"2-rolling-update-script",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"clustering-examples",children:"Clustering Examples"})}),"\n",(0,t.jsx)(e.p,{children:"This guide demonstrates how to implement clustering and load balancing with PMDaemon, including port management strategies for multi-instance applications."}),"\n",(0,t.jsx)(e.h2,{id:"basic-clustering-setup",children:"Basic Clustering Setup"}),"\n",(0,t.jsx)(e.h3,{id:"simple-cluster-configuration",children:"Simple Cluster Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-cluster",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "PORT": 3000\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"auto-scaling-based-on-cpu-cores",children:"Auto-Scaling Based on CPU Cores"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "auto-cluster",\r\n      "script": "app.js",\r\n      "instances": "max",           // Use all available CPU cores\r\n      "exec_mode": "cluster",\r\n      "max_memory_restart": "1G",\r\n      "env": {\r\n        "NODE_ENV": "production"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-port-management",children:"Advanced Port Management"}),"\n",(0,t.jsx)(e.h3,{id:"1-port-increment-strategy",children:"1. Port Increment Strategy"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "multi-port-app",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",      // Auto-increment PORT for each instance\r\n      "env": {\r\n        "PORT": 3000                // Starting port: 3000, 3001, 3002, 3003\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-dynamic-port-allocation",children:"2. Dynamic Port Allocation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "dynamic-ports",\r\n      "script": "server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "port": {\r\n        "start": 3000,\r\n        "increment": 1,\r\n        "max": 3010\r\n      },\r\n      "env": {\r\n        "NODE_ENV": "production"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-port-range-with-load-balancer",children:"3. Port Range with Load Balancer"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "backend-cluster",\r\n      "script": "api-server.js",\r\n      "instances": 6,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 4000,              // Ports: 4000-4005\r\n        "LOAD_BALANCER": "http://localhost:8080"\r\n      }\r\n    },\r\n    {\r\n      "name": "load-balancer",\r\n      "script": "nginx-proxy.js",\r\n      "instances": 1,\r\n      "env": {\r\n        "PORT": 8080,\r\n        "BACKEND_PORTS": "4000,4001,4002,4003,4004,4005"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,t.jsx)(e.h3,{id:"multi-service-cluster",children:"Multi-Service Cluster"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "user-service",\r\n      "script": "services/user/server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3001,\r\n        "SERVICE_NAME": "user-service",\r\n        "DATABASE_URL": "mongodb://localhost:27017/users"\r\n      }\r\n    },\r\n    {\r\n      "name": "order-service",\r\n      "script": "services/order/server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3100,\r\n        "SERVICE_NAME": "order-service",\r\n        "DATABASE_URL": "mongodb://localhost:27017/orders"\r\n      }\r\n    },\r\n    {\r\n      "name": "notification-service",\r\n      "script": "services/notification/server.js",\r\n      "instances": 1,\r\n      "env": {\r\n        "PORT": 3200,\r\n        "SERVICE_NAME": "notification-service",\r\n        "REDIS_URL": "redis://localhost:6379"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-gateway",\r\n      "script": "gateway/server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 8080,\r\n        "USER_SERVICE": "http://localhost:3001",\r\n        "ORDER_SERVICE": "http://localhost:3100",\r\n        "NOTIFICATION_SERVICE": "http://localhost:3200"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"load-balancing-strategies",children:"Load Balancing Strategies"}),"\n",(0,t.jsx)(e.h3,{id:"1-round-robin-with-health-checks",children:"1. Round Robin with Health Checks"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-app",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000\r\n      },\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:{{PORT}}/health",\r\n        "interval": 30,\r\n        "timeout": 10,\r\n        "retries": 3\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-weighted-load-balancing",children:"2. Weighted Load Balancing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "high-priority-instance",\r\n      "script": "server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "weight": 3,                  // Higher weight for more traffic\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "PRIORITY": "high"\r\n      }\r\n    },\r\n    {\r\n      "name": "standard-instance",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "weight": 1,                  // Standard weight\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3010,\r\n        "PRIORITY": "standard"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-geographic-load-balancing",children:"3. Geographic Load Balancing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "us-east-cluster",\r\n      "script": "server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "REGION": "us-east-1",\r\n        "DATABASE_URL": "mongodb://us-east-db:27017/app"\r\n      }\r\n    },\r\n    {\r\n      "name": "us-west-cluster",\r\n      "script": "server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3100,\r\n        "REGION": "us-west-1",\r\n        "DATABASE_URL": "mongodb://us-west-db:27017/app"\r\n      }\r\n    },\r\n    {\r\n      "name": "eu-cluster",\r\n      "script": "server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3200,\r\n        "REGION": "eu-west-1",\r\n        "DATABASE_URL": "mongodb://eu-db:27017/app"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"high-availability-patterns",children:"High Availability Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"1-blue-green-deployment",children:"1. Blue-Green Deployment"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "blue-deployment",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "DEPLOYMENT": "blue",\r\n        "DATABASE_URL": "mongodb://localhost:27017/app_blue"\r\n      },\r\n      "enabled": true\r\n    },\r\n    {\r\n      "name": "green-deployment",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3100,\r\n        "DEPLOYMENT": "green",\r\n        "DATABASE_URL": "mongodb://localhost:27017/app_green"\r\n      },\r\n      "enabled": false              // Start disabled for deployment\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-canary-deployment",children:"2. Canary Deployment"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "stable-version",\r\n      "script": "server.js",\r\n      "instances": 9,               // 90% of traffic\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "VERSION": "v1.0.0"\r\n      }\r\n    },\r\n    {\r\n      "name": "canary-version",\r\n      "script": "server-new.js",\r\n      "instances": 1,               // 10% of traffic\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3010,\r\n        "VERSION": "v1.1.0"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-circuit-breaker-pattern",children:"3. Circuit Breaker Pattern"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "primary-service",\r\n      "script": "primary-server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "CIRCUIT_BREAKER": "enabled",\r\n        "FALLBACK_SERVICE": "http://localhost:3100"\r\n      },\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:{{PORT}}/health",\r\n        "interval": 10,\r\n        "timeout": 5,\r\n        "retries": 3\r\n      }\r\n    },\r\n    {\r\n      "name": "fallback-service",\r\n      "script": "fallback-server.js",\r\n      "instances": 2,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3100,\r\n        "SERVICE_TYPE": "fallback"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"container-based-clustering",children:"Container-Based Clustering"}),"\n",(0,t.jsx)(e.h3,{id:"1-docker-swarm-integration",children:"1. Docker Swarm Integration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "swarm-app",\r\n      "script": "server.js",\r\n      "instances": "max",\r\n      "exec_mode": "cluster",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "SWARM_NODE_ID": "${HOSTNAME}",\r\n        "SWARM_SERVICE": "web-app"\r\n      },\r\n      "docker": {\r\n        "image": "myapp:latest",\r\n        "network": "overlay",\r\n        "replicas": 6\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-kubernetes-style-deployment",children:"2. Kubernetes-Style Deployment"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "k8s-style-app",\r\n      "script": "server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "POD_NAME": "${HOSTNAME}",\r\n        "NAMESPACE": "production"\r\n      },\r\n      "labels": {\r\n        "app": "web-server",\r\n        "version": "v1.0.0",\r\n        "environment": "production"\r\n      },\r\n      "health_check": {\r\n        "enabled": true,\r\n        "url": "http://localhost:{{PORT}}/readiness",\r\n        "interval": 30\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"monitoring-clustered-applications",children:"Monitoring Clustered Applications"}),"\n",(0,t.jsx)(e.h3,{id:"1-centralized-logging",children:"1. Centralized Logging"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "clustered-app",\r\n      "script": "server.js",\r\n      "instances": 4,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "instance_var": "INSTANCE_ID",\r\n      "env": {\r\n        "PORT": 3000\r\n      },\r\n      "log_file": "/var/log/app/app-{{INSTANCE_ID}}.log",\r\n      "error_file": "/var/log/app/error-{{INSTANCE_ID}}.log",\r\n      "merge_logs": true,\r\n      "log_type": "json"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-metrics-collection",children:"2. Metrics Collection"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "metrics-app",\r\n      "script": "server.js",\r\n      "instances": 3,\r\n      "exec_mode": "cluster",\r\n      "increment_var": "PORT",\r\n      "env": {\r\n        "PORT": 3000,\r\n        "METRICS_PORT": 9090\r\n      },\r\n      "monitoring": {\r\n        "enabled": true,\r\n        "port": 9615,\r\n        "metrics": {\r\n          "cpu": true,\r\n          "memory": true,\r\n          "network": true,\r\n          "custom": true\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(e.h3,{id:"1-cpu-optimized-clustering",children:"1. CPU-Optimized Clustering"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "cpu-intensive-app",\r\n      "script": "cpu-worker.js",\r\n      "instances": "max",           // Use all CPU cores\r\n      "exec_mode": "cluster",\r\n      "node_args": ["--optimize-for-size"],\r\n      "env": {\r\n        "UV_THREADPOOL_SIZE": 16,   // Increase thread pool\r\n        "NODE_OPTIONS": "--max-old-space-size=2048"\r\n      },\r\n      "max_memory_restart": "2G"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-io-optimized-clustering",children:"2. I/O-Optimized Clustering"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "io-intensive-app",\r\n      "script": "io-worker.js",\r\n      "instances": 2,               // Fewer instances for I/O bound\r\n      "exec_mode": "cluster",\r\n      "env": {\r\n        "UV_THREADPOOL_SIZE": 32,   // Large thread pool for I/O\r\n        "DATABASE_POOL_SIZE": 20\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-memory-optimized-clustering",children:"3. Memory-Optimized Clustering"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "memory-efficient-app",\r\n      "script": "server.js",\r\n      "instances": 8,               // More instances, less memory each\r\n      "exec_mode": "cluster",\r\n      "max_memory_restart": "512M", // Smaller memory limit per instance\r\n      "node_args": ["--max-old-space-size=400"],\r\n      "env": {\r\n        "NODE_OPTIONS": "--optimize-for-size"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"troubleshooting-clustered-applications",children:"Troubleshooting Clustered Applications"}),"\n",(0,t.jsx)(e.h3,{id:"1-port-conflict-resolution",children:"1. Port Conflict Resolution"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Check port availability\r\npmdaemon ports --check --range 3000-3010\r\n\r\n# Start with automatic port detection\r\npmdaemon start ecosystem.json --auto-ports\r\n\r\n# Force port allocation\r\npmdaemon start ecosystem.json --force-ports\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-load-distribution-analysis",children:"2. Load Distribution Analysis"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Monitor cluster load distribution\r\npmdaemon monitor --cluster web-cluster\r\n\r\n# Check instance health\r\npmdaemon health --all-instances\r\n\r\n# View port allocation\r\npmdaemon list --show-ports\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-performance-monitoring",children:"3. Performance Monitoring"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Monitor cluster performance\r\npmdaemon monitor --cpu --memory --cluster\r\n\r\n# Check load balancing effectiveness\r\npmdaemon stats --load-balance\r\n\r\n# Analyze instance utilization\r\npmdaemon analyze --cluster-efficiency\n"})}),"\n",(0,t.jsx)(e.h2,{id:"deployment-scripts",children:"Deployment Scripts"}),"\n",(0,t.jsx)(e.h3,{id:"1-cluster-deployment-script",children:"1. Cluster Deployment Script"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n# deploy-cluster.sh\r\n\r\nset -e\r\n\r\nCONFIG_FILE="ecosystem.cluster.json"\r\nAPP_NAME="web-cluster"\r\n\r\necho "Deploying cluster: $APP_NAME"\r\n\r\n# Validate configuration\r\npmdaemon validate "$CONFIG_FILE"\r\n\r\n# Check port availability\r\npmdaemon ports --check --range 3000-3010\r\n\r\n# Deploy cluster\r\npmdaemon start "$CONFIG_FILE"\r\n\r\n# Wait for all instances to be ready\r\nsleep 10\r\n\r\n# Verify cluster health\r\npmdaemon health --app "$APP_NAME" --all-instances\r\n\r\n# Test load distribution\r\nfor i in {1..10}; do\r\n  curl -s "http://localhost:8080/health" > /dev/null\r\n  echo "Health check $i: OK"\r\ndone\r\n\r\necho "Cluster deployment completed successfully"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-rolling-update-script",children:"2. Rolling Update Script"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n# rolling-update.sh\r\n\r\nset -e\r\n\r\nAPP_NAME="web-cluster"\r\nNEW_VERSION="$1"\r\n\r\nif [ -z "$NEW_VERSION" ]; then\r\n  echo "Usage: $0 <new-version>"\r\n  exit 1\r\nfi\r\n\r\necho "Performing rolling update to version: $NEW_VERSION"\r\n\r\n# Get current instances\r\nINSTANCES=$(pmdaemon list --app "$APP_NAME" --format json | jq -r \'.[] | .instance_id\')\r\n\r\n# Update instances one by one\r\nfor instance in $INSTANCES; do\r\n  echo "Updating instance: $instance"\r\n\r\n  # Stop instance\r\n  pmdaemon stop "$APP_NAME" --instance "$instance"\r\n\r\n  # Update code (deployment specific)\r\n  deploy_new_version "$NEW_VERSION"\r\n\r\n  # Start instance\r\n  pmdaemon start "$APP_NAME" --instance "$instance"\r\n\r\n  # Wait for health check\r\n  sleep 30\r\n\r\n  # Verify instance health\r\n  if ! pmdaemon health "$APP_NAME" --instance "$instance"; then\r\n    echo "Health check failed for instance: $instance"\r\n    exit 1\r\n  fi\r\n\r\n  echo "Instance $instance updated successfully"\r\ndone\r\n\r\necho "Rolling update completed successfully"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/features/port-management",children:"Port Management"})})," - Advanced port management features"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/features/load-balancing",children:"Load Balancing"})})," - Load balancing strategies"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/monitoring/overview",children:"Monitoring"})})," - Monitoring clustered applications"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"/pmdaemon/docs/performance/optimization",children:"Performance"})})," - Performance optimization techniques"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>l});var s=r(6540);const t={},a=s.createContext(t);function i(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);