"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[8964],{143:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features/port-management","title":"Port Management","description":"PMDaemon\'s advanced port management is one of its most innovative features, going far beyond what traditional process managers offer. This system provides automatic port allocation, conflict detection, and runtime flexibility that makes deploying clustered applications effortless.","source":"@site/docs/features/port-management.md","sourceDirName":"features","slug":"/features/port-management","permalink":"/pmdaemon/docs/features/port-management","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/features/port-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Process Management","permalink":"/pmdaemon/docs/features/process-management"},"next":{"title":"Health Checks","permalink":"/pmdaemon/docs/features/health-checks"}}');var t=r(4848),i=r(8453);const o={},a="Port Management",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Port Configuration Formats",id:"port-configuration-formats",level:2},{value:"Single Port",id:"single-port",level:3},{value:"Port Range Distribution",id:"port-range-distribution",level:3},{value:"Auto-assignment",id:"auto-assignment",level:3},{value:"How Port Distribution Works",id:"how-port-distribution-works",level:2},{value:"Cluster Port Assignment",id:"cluster-port-assignment",level:3},{value:"Auto-assignment Algorithm",id:"auto-assignment-algorithm",level:3},{value:"Conflict Detection",id:"conflict-detection",level:2},{value:"Process Manager Level",id:"process-manager-level",level:3},{value:"System Level",id:"system-level",level:3},{value:"Runtime Port Overrides",id:"runtime-port-overrides",level:2},{value:"Restart with New Port",id:"restart-with-new-port",level:3},{value:"Reload with Port Range",id:"reload-with-port-range",level:3},{value:"Use Cases for Runtime Overrides",id:"use-cases-for-runtime-overrides",level:3},{value:"Environment Variable Injection",id:"environment-variable-injection",level:2},{value:"Standard Variables",id:"standard-variables",level:3},{value:"Example Usage in Applications",id:"example-usage-in-applications",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Microservices with Different Port Ranges",id:"microservices-with-different-port-ranges",level:3},{value:"Development vs Production Ports",id:"development-vs-production-ports",level:3},{value:"Load Balancer Integration",id:"load-balancer-integration",level:3},{value:"Port Monitoring",id:"port-monitoring",level:2},{value:"View Assigned Ports",id:"view-assigned-ports",level:3},{value:"Process Information",id:"process-information",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Port Ranges for Clusters",id:"1-use-port-ranges-for-clusters",level:3},{value:"2. Reserve Port Ranges",id:"2-reserve-port-ranges",level:3},{value:"3. Use Auto-assignment for Dynamic Scaling",id:"3-use-auto-assignment-for-dynamic-scaling",level:3},{value:"4. Document Port Assignments",id:"4-document-port-assignments",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Port Issues",id:"debugging-port-issues",level:3},{value:"Comparison with Other Process Managers",id:"comparison-with-other-process-managers",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"port-management",children:"Port Management"})}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon's advanced port management is one of its most innovative features, going far beyond what traditional process managers offer. This system provides automatic port allocation, conflict detection, and runtime flexibility that makes deploying clustered applications effortless."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon's port management system includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Port range distribution"})," - Automatically assign consecutive ports to cluster instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Auto-assignment"})," - Find first available port in specified ranges"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Built-in conflict detection"})," - Prevent port conflicts at the process manager level"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime port overrides"})," - Change ports during restart without modifying saved config"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Port visibility"})," - Display assigned ports in process listings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment variable injection"})," - Automatic PORT environment variable"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"port-configuration-formats",children:"Port Configuration Formats"}),"\n",(0,t.jsx)(n.h3,{id:"single-port",children:"Single Port"}),"\n",(0,t.jsx)(n.p,{children:"Assign a specific port to a process:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# CLI\r\npmdaemon start "node server.js" --name web-app --port 3000\r\n\r\n# Configuration file\r\n{\r\n  "name": "web-app",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "port": "3000"\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"port-range-distribution",children:"Port Range Distribution"}),"\n",(0,t.jsx)(n.p,{children:"Automatically distribute consecutive ports to cluster instances:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# CLI - 4 instances get ports 3000, 3001, 3002, 3003\r\npmdaemon start "node server.js" \\\r\n  --name web-cluster \\\r\n  --instances 4 \\\r\n  --port 3000-3003\r\n\r\n# Configuration file\r\n{\r\n  "name": "web-cluster",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "instances": 4,\r\n  "port": "3000-3003"\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"auto-assignment",children:"Auto-assignment"}),"\n",(0,t.jsx)(n.p,{children:"Find the first available ports in a specified range:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# CLI - Find 3 available ports between 5000-5100\r\npmdaemon start "node worker.js" \\\r\n  --name workers \\\r\n  --instances 3 \\\r\n  --port auto:5000-5100\r\n\r\n# Configuration file\r\n{\r\n  "name": "workers",\r\n  "script": "node", \r\n  "args": ["worker.js"],\r\n  "instances": 3,\r\n  "port": "auto:5000-5100"\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-port-distribution-works",children:"How Port Distribution Works"}),"\n",(0,t.jsx)(n.h3,{id:"cluster-port-assignment",children:"Cluster Port Assignment"}),"\n",(0,t.jsx)(n.p,{children:"When you specify a port range for clustered instances:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parse range"})," - Extract start and end ports from range string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate range"})," - Ensure range has enough ports for instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check availability"})," - Verify ports are not in use"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Assign sequentially"})," - Assign ports in order to instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set environment"})," - Set PORT environment variable for each instance"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Example: 4 instances with port range 8000-8003\r\npmdaemon start "node api.js" --instances 4 --port 8000-8003\r\n\r\n# Results in:\r\n# Instance 0: PORT=8000, PM2_INSTANCE_ID=0\r\n# Instance 1: PORT=8001, PM2_INSTANCE_ID=1  \r\n# Instance 2: PORT=8002, PM2_INSTANCE_ID=2\r\n# Instance 3: PORT=8003, PM2_INSTANCE_ID=3\n'})}),"\n",(0,t.jsx)(n.h3,{id:"auto-assignment-algorithm",children:"Auto-assignment Algorithm"}),"\n",(0,t.jsxs)(n.p,{children:["For auto-assignment (",(0,t.jsx)(n.code,{children:"auto:start-end"}),"):"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scan range"})," - Check each port in the specified range"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test availability"})," - Attempt to bind to each port"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Collect available"})," - Build list of available ports"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Assign needed"})," - Take first N available ports for N instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle insufficient"})," - Error if not enough ports available"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Example: Need 3 ports from range 5000-5010\r\npmdaemon start "python worker.py" --instances 3 --port auto:5000-5010\r\n\r\n# If ports 5000, 5002, 5005 are available:\r\n# Instance 0: PORT=5000\r\n# Instance 1: PORT=5002  \r\n# Instance 2: PORT=5005\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conflict-detection",children:"Conflict Detection"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon includes built-in port conflict detection:"}),"\n",(0,t.jsx)(n.h3,{id:"process-manager-level",children:"Process Manager Level"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Track assigned ports"})," - Maintain registry of ports assigned to processes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prevent double assignment"})," - Block assignment of already-used ports"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cross-instance awareness"})," - Detect conflicts across different process groups"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"system-level",children:"System Level"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Port availability check"})," - Test if ports are actually available on the system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bind testing"})," - Attempt to bind to ports before assignment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error reporting"})," - Clear error messages for port conflicts"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Example conflict detection\r\npmdaemon start "node app1.js" --name app1 --port 3000\r\npmdaemon start "node app2.js" --name app2 --port 3000\r\n# Error: Port 3000 is already assigned to process \'app1\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"runtime-port-overrides",children:"Runtime Port Overrides"}),"\n",(0,t.jsx)(n.p,{children:"Change ports during restart without modifying saved configuration:"}),"\n",(0,t.jsx)(n.h3,{id:"restart-with-new-port",children:"Restart with New Port"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Original configuration uses port 3000\r\npmdaemon start "node server.js" --name web-app --port 3000\r\n\r\n# Restart with different port (doesn\'t modify saved config)\r\npmdaemon restart web-app --port 3001\r\n\r\n# Configuration file still shows port 3000, but process runs on 3001\n'})}),"\n",(0,t.jsx)(n.h3,{id:"reload-with-port-range",children:"Reload with Port Range"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Original single instance\r\npmdaemon start "node api.js" --name api --port 8000\r\n\r\n# Graceful reload with clustering and port range\r\npmdaemon reload api --port 4000-4003\r\n# Now running 4 instances on ports 4000-4003\n'})}),"\n",(0,t.jsx)(n.h3,{id:"use-cases-for-runtime-overrides",children:"Use Cases for Runtime Overrides"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Blue-green deployments"})," - Switch between port sets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Emergency port changes"})," - Quick response to port conflicts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing different configurations"})," - Try new port setups without permanent changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load balancer updates"})," - Change ports to match load balancer configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"environment-variable-injection",children:"Environment Variable Injection"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon automatically injects port-related environment variables:"}),"\n",(0,t.jsx)(n.h3,{id:"standard-variables",children:"Standard Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"PORT"})})," - The assigned port number"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"PM2_INSTANCE_ID"})})," - Instance ID (0-based)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"NODE_APP_INSTANCE"})})," - Instance ID (Node.js compatibility)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-usage-in-applications",children:"Example Usage in Applications"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node.js:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const port = process.env.PORT || 3000;\r\nconst instanceId = process.env.PM2_INSTANCE_ID || 0;\r\n\r\napp.listen(port, () => {\r\n  console.log(`Instance ${instanceId} listening on port ${port}`);\r\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Python:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import os\r\n\r\nport = int(os.environ.get('PORT', 8000))\r\ninstance_id = os.environ.get('PM2_INSTANCE_ID', '0')\r\n\r\nprint(f\"Instance {instance_id} starting on port {port}\")\r\napp.run(host='0.0.0.0', port=port)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,t.jsx)(n.h3,{id:"microservices-with-different-port-ranges",children:"Microservices with Different Port Ranges"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-gateway",\r\n      "script": "node",\r\n      "args": ["gateway.js"],\r\n      "port": "8080"\r\n    },\r\n    {\r\n      "name": "user-service",\r\n      "script": "node",\r\n      "args": ["user-service.js"],\r\n      "instances": 2,\r\n      "port": "8001-8002"\r\n    },\r\n    {\r\n      "name": "order-service", \r\n      "script": "python",\r\n      "args": ["-m", "uvicorn", "main:app"],\r\n      "instances": 3,\r\n      "port": "auto:8010-8020"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"development-vs-production-ports",children:"Development vs Production Ports"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Development:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "dev-api",\r\n  "script": "npm",\r\n  "args": ["run", "dev"],\r\n  "port": "3000"\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Production:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "prod-api",\r\n  "script": "node",\r\n  "args": ["dist/server.js"],\r\n  "instances": 4,\r\n  "port": "auto:3000-3100"\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"load-balancer-integration",children:"Load Balancer Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Start services with known port ranges for load balancer\r\npmdaemon start "node api.js" \\\r\n  --name api-cluster \\\r\n  --instances 4 \\\r\n  --port 8000-8003\r\n\r\n# Load balancer can be configured to route to 8000-8003\r\n# nginx upstream example:\r\n# upstream api_backend {\r\n#   server 127.0.0.1:8000;\r\n#   server 127.0.0.1:8001;\r\n#   server 127.0.0.1:8002;\r\n#   server 127.0.0.1:8003;\r\n# }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"port-monitoring",children:"Port Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"view-assigned-ports",children:"View Assigned Ports"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List command shows assigned ports\r\npmdaemon list\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output includes port information:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 ID \u2502 Name        \u2502 Status \u2502 PID   \u2502 Port \u2502 CPU (%) \u2502 Memory   \u2502 Uptime  \u2502 Restarts \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0  \u2502 web-cluster \u2502 \ud83d\udfe2 Online \u2502 1234  \u2502 3000 \u2502 2.5     \u2502 45.2 MB  \u2502 2h 15m  \u2502 0        \u2502\r\n\u2502 1  \u2502 web-cluster \u2502 \ud83d\udfe2 Online \u2502 1235  \u2502 3001 \u2502 1.8     \u2502 32.1 MB  \u2502 2h 15m  \u2502 0        \u2502\r\n\u2502 2  \u2502 api-service \u2502 \ud83d\udfe2 Online \u2502 1236  \u2502 8000 \u2502 3.2     \u2502 28.5 MB  \u2502 1h 30m  \u2502 0        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"process-information",children:"Process Information"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Get detailed port information\r\npmdaemon info web-cluster\n"})}),"\n",(0,t.jsx)(n.p,{children:"Shows port configuration and assignment details."}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-port-ranges-for-clusters",children:"1. Use Port Ranges for Clusters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Good: Explicit port range\r\npmdaemon start "node server.js" --instances 4 --port 3000-3003\r\n\r\n# Avoid: No port specification for clusters\r\npmdaemon start "node server.js" --instances 4  # Ports not managed\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-reserve-port-ranges",children:"2. Reserve Port Ranges"}),"\n",(0,t.jsx)(n.p,{children:"Plan your port allocation to avoid conflicts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Development: 3000-3999\r\n# Staging: 4000-4999  \r\n# Production: 5000-5999\r\n# Monitoring: 9000-9999\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-auto-assignment-for-dynamic-scaling",children:"3. Use Auto-assignment for Dynamic Scaling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Good for dynamic environments\r\npmdaemon start "node worker.js" --instances 3 --port auto:5000-5100\r\n\r\n# Better than fixed ranges when scaling up/down\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-document-port-assignments",children:"4. Document Port Assignments"}),"\n",(0,t.jsx)(n.p,{children:"Keep track of port assignments in your documentation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ports.yaml\r\nservices:\r\n  api-gateway: 8080\r\n  user-service: 8001-8002\r\n  order-service: 8010-8020 (auto)\r\n  monitoring: 9615\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Port already in use"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Error: Port 3000 is already in use by another process\r\n\r\n# Solution: Use different port or auto-assignment\r\npmdaemon start app.js --port auto:3000-3100\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Not enough ports in range"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Error: Port range 3000-3001 has only 2 ports but 4 instances requested\r\n\r\n# Solution: Expand range\r\npmdaemon start app.js --instances 4 --port 3000-3003\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Port conflicts between processes"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Error: Port 8000 is already assigned to process 'api-v1'\r\n\r\n# Solution: Use different port or stop conflicting process\r\npmdaemon stop api-v1\r\npmdaemon start app.js --port 8000\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debugging-port-issues",children:"Debugging Port Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check what's using a port\r\nnetstat -tulpn | grep :3000\r\nlsof -i :3000\r\n\r\n# Check PMDaemon port assignments\r\npmdaemon list\r\n\r\n# View detailed process information\r\npmdaemon info process-name\n"})}),"\n",(0,t.jsx)(n.h2,{id:"comparison-with-other-process-managers",children:"Comparison with Other Process Managers"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"PMDaemon"}),(0,t.jsx)(n.th,{children:"PM2"}),(0,t.jsx)(n.th,{children:"Forever"}),(0,t.jsx)(n.th,{children:"Supervisor"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Port range distribution"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Auto port assignment"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Runtime port override"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Conflict detection"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Port visibility"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Environment injection"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u2705"}),(0,t.jsx)(n.td,{children:"\u274c"}),(0,t.jsx)(n.td,{children:"\u274c"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/health-checks",children:"Health Checks"})})," - Monitor process health"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Real-time process monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/configuration",children:"Configuration"})})," - Advanced configuration options"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/examples/clustering",children:"Examples"})})," - Clustering examples with port management"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon's port management system eliminates the complexity of manual port coordination in clustered deployments, making it easy to scale applications while avoiding conflicts and maintaining clear port visibility."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);