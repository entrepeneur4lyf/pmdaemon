"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[4530],{4570:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"cli/environment-variables","title":"Environment Variables","description":"PMDaemon uses environment variables for system-level configuration and automatically injects process-specific variables into managed processes. This reference covers both PMDaemon\'s own environment variables and those it provides to your applications.","source":"@site/docs/cli/environment-variables.md","sourceDirName":"cli","slug":"/cli/environment-variables","permalink":"/pmdaemon/docs/cli/environment-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/cli/environment-variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Options","permalink":"/pmdaemon/docs/cli/configuration-options"},"next":{"title":"Exit Codes","permalink":"/pmdaemon/docs/cli/exit-codes"}}');var r=s(4848),a=s(8453);const o={},c="Environment Variables",l={},t=[{value:"PMDaemon System Variables",id:"pmdaemon-system-variables",level:2},{value:"<code>PMDAEMON_HOME</code>",id:"pmdaemon_home",level:3},{value:"Process Variables",id:"process-variables",level:2},{value:"<code>PM2_INSTANCE_ID</code>",id:"pm2_instance_id",level:4},{value:"<code>NODE_APP_INSTANCE</code>",id:"node_app_instance",level:4},{value:"Process Metadata Variables",id:"process-metadata-variables",level:3},{value:"<code>PMDAEMON_PROCESS_NAME</code>",id:"pmdaemon_process_name",level:4},{value:"<code>PMDAEMON_PROCESS_ID</code>",id:"pmdaemon_process_id",level:4},{value:"<code>PMDAEMON_NAMESPACE</code>",id:"pmdaemon_namespace",level:4},{value:"<code>PMDAEMON_VERSION</code>",id:"pmdaemon_version",level:4},{value:"Custom Environment Variables",id:"custom-environment-variables",level:2},{value:"Setting via CLI",id:"setting-via-cli",level:3},{value:"Setting via Environment File",id:"setting-via-environment-file",level:3},{value:"Setting via Configuration File",id:"setting-via-configuration-file",level:3},{value:"Environment Variable Precedence",id:"environment-variable-precedence",level:2},{value:"Environment Variable Patterns",id:"environment-variable-patterns",level:2},{value:"Development vs Production",id:"development-vs-production",level:3},{value:"Instance-Specific Configuration",id:"instance-specific-configuration",level:3},{value:"Database Connection Pooling",id:"database-connection-pooling",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Sensitive Variables",id:"sensitive-variables",level:3},{value:"Variable Validation",id:"variable-validation",level:3},{value:"Environment Isolation",id:"environment-isolation",level:3},{value:"Debugging Environment Variables",id:"debugging-environment-variables",level:2},{value:"View Process Environment",id:"view-process-environment",level:3},{value:"Log Environment Variables",id:"log-environment-variables",level:3},{value:"Environment Variable Conflicts",id:"environment-variable-conflicts",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Environment Files",id:"1-use-environment-files",level:3},{value:"2. Validate Required Variables",id:"2-validate-required-variables",level:3},{value:"3. Use Instance-Specific Logic",id:"3-use-instance-specific-logic",level:3},{value:"4. Secure Sensitive Data",id:"4-secure-sensitive-data",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"environment-variables",children:"Environment Variables"})}),"\n",(0,r.jsx)(n.p,{children:"PMDaemon uses environment variables for system-level configuration and automatically injects process-specific variables into managed processes. This reference covers both PMDaemon's own environment variables and those it provides to your applications."}),"\n",(0,r.jsx)(n.h2,{id:"pmdaemon-system-variables",children:"PMDaemon System Variables"}),"\n",(0,r.jsx)(n.p,{children:"These environment variables configure PMDaemon's behavior:"}),"\n",(0,r.jsx)(n.h3,{id:"pmdaemon_home",children:(0,r.jsx)(n.code,{children:"PMDAEMON_HOME"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Override the default configuration directory for PMDaemon\n",(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"~/.pmdaemon"})," (Linux/macOS), ",(0,r.jsx)(n.code,{children:"%APPDATA%\\pmdaemon"})," (Windows)\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'export PMDAEMON_HOME=/etc/pmdaemon\npmdaemon start "node server.js" --name web-api\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is the only environment variable that PMDaemon itself recognizes. All other configuration is done through CLI arguments or configuration files."}),"\n",(0,r.jsx)(n.h2,{id:"process-variables",children:"Process Variables"}),"\n",(0,r.jsx)(n.p,{children:'PMDaemon automatically sets environment variables for managed processes:\npmdaemon start "node server.js" --name web-api  # Max 5 restarts'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\n## Process-Injected Variables\n\nPMDaemon automatically injects these variables into managed processes:\n\n### Core Process Variables\n\n#### `PORT`\n**Description:** Assigned port number for the process\n**Set when:** Process has port configuration\n**Example:**\n```bash\npmdaemon start "node server.js" --name web-api --port 3000\n# Process receives: PORT=3000\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Application usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js\nconst port = process.env.PORT || 3000;\napp.listen(port);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Python\nimport os\nport = int(os.environ.get('PORT', 8000))\napp.run(port=port)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"pm2_instance_id",children:(0,r.jsx)(n.code,{children:"PM2_INSTANCE_ID"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Zero-based instance identifier for clustering\n",(0,r.jsx)(n.strong,{children:"Set when:"})," Process runs in cluster mode (instances > 1)\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-cluster --instances 3 --port 3000-3002\n# Instance 0: PM2_INSTANCE_ID=0, PORT=3000\n# Instance 1: PM2_INSTANCE_ID=1, PORT=3001\n# Instance 2: PM2_INSTANCE_ID=2, PORT=3002\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Application usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Instance-specific behavior\nconst instanceId = parseInt(process.env.PM2_INSTANCE_ID || '0');\nconsole.log(`Worker ${instanceId} starting...`);\n\n// Instance-specific configuration\nif (instanceId === 0) {\n  // Master instance - handle cron jobs\n  startCronJobs();\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"node_app_instance",children:(0,r.jsx)(n.code,{children:"NODE_APP_INSTANCE"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Instance identifier for Node.js compatibility\n",(0,r.jsx)(n.strong,{children:"Set when:"})," Process runs in cluster mode\n",(0,r.jsx)(n.strong,{children:"Value:"})," Same as ",(0,r.jsx)(n.code,{children:"PM2_INSTANCE_ID"}),"\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-cluster --instances 2\n# Instance 0: NODE_APP_INSTANCE=0\n# Instance 1: NODE_APP_INSTANCE=1\n'})}),"\n",(0,r.jsx)(n.h3,{id:"process-metadata-variables",children:"Process Metadata Variables"}),"\n",(0,r.jsx)(n.h4,{id:"pmdaemon_process_name",children:(0,r.jsx)(n.code,{children:"PMDAEMON_PROCESS_NAME"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Process name as defined in PMDaemon\n",(0,r.jsx)(n.strong,{children:"Always set:"})," Yes\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api\n# Process receives: PMDAEMON_PROCESS_NAME=web-api\n'})}),"\n",(0,r.jsx)(n.h4,{id:"pmdaemon_process_id",children:(0,r.jsx)(n.code,{children:"PMDAEMON_PROCESS_ID"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," PMDaemon internal process ID\n",(0,r.jsx)(n.strong,{children:"Always set:"})," Yes\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Process receives: PMDAEMON_PROCESS_ID=0\n"})}),"\n",(0,r.jsx)(n.h4,{id:"pmdaemon_namespace",children:(0,r.jsx)(n.code,{children:"PMDAEMON_NAMESPACE"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Process namespace\n",(0,r.jsx)(n.strong,{children:"Set when:"})," Namespace is specified\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api --namespace production\n# Process receives: PMDAEMON_NAMESPACE=production\n'})}),"\n",(0,r.jsx)(n.h4,{id:"pmdaemon_version",children:(0,r.jsx)(n.code,{children:"PMDAEMON_VERSION"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," PMDaemon version managing the process\n",(0,r.jsx)(n.strong,{children:"Always set:"})," Yes\n",(0,r.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Process receives: PMDAEMON_VERSION=0.1.1\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-environment-variables",children:"Custom Environment Variables"}),"\n",(0,r.jsx)(n.h3,{id:"setting-via-cli",children:"Setting via CLI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Single variable\npmdaemon start "node server.js" --name web-api --env NODE_ENV=production\n\n# Multiple variables\npmdaemon start "node server.js" --name web-api \\\n  --env NODE_ENV=production \\\n  --env DATABASE_URL=postgres://localhost/mydb \\\n  --env API_KEY=secret123\n'})}),"\n",(0,r.jsx)(n.h3,{id:"setting-via-environment-file",children:"Setting via Environment File"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .env.production\nNODE_ENV=production\nDATABASE_URL=postgres://localhost/mydb\nAPI_KEY=secret123\nPORT=3000\nDEBUG=app:*\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use with PMDaemon:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" --name web-api --env-file .env.production\n'})}),"\n",(0,r.jsx)(n.h3,{id:"setting-via-configuration-file",children:"Setting via Configuration File"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JSON format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "web-api",\n  "script": "node",\n  "args": ["server.js"],\n  "env": {\n    "NODE_ENV": "production",\n    "DATABASE_URL": "postgres://localhost/mydb",\n    "API_KEY": "secret123"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"YAML format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: web-api\nscript: node\nargs: [server.js]\nenv:\n  NODE_ENV: production\n  DATABASE_URL: postgres://localhost/mydb\n  API_KEY: secret123\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-variable-precedence",children:"Environment Variable Precedence"}),"\n",(0,r.jsx)(n.p,{children:"When the same variable is defined in multiple places, PMDaemon uses this precedence:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["CLI ",(0,r.jsx)(n.code,{children:"--env"})," flags"]})," (highest priority)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Environment file (",(0,r.jsx)(n.code,{children:"--env-file"}),")"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Configuration file ",(0,r.jsx)(n.code,{children:"env"})," section"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"PMDaemon-injected variables"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parent process environment"})," (lowest priority)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Parent process has NODE_ENV=development\n# Configuration file has NODE_ENV=staging\n# CLI override takes precedence\npmdaemon start "node server.js" --name web-api --env NODE_ENV=production\n# Process receives: NODE_ENV=production\n'})}),"\n",(0,r.jsx)(n.h2,{id:"environment-variable-patterns",children:"Environment Variable Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"development-vs-production",children:"Development vs Production"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Development:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .env.development\nNODE_ENV=development\nDEBUG=*\nLOG_LEVEL=debug\nDATABASE_URL=postgres://localhost/mydb_dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Production:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .env.production\nNODE_ENV=production\nDEBUG=app:error\nLOG_LEVEL=info\nDATABASE_URL=postgres://prod-server/mydb\n"})}),"\n",(0,r.jsx)(n.h3,{id:"instance-specific-configuration",children:"Instance-Specific Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Different behavior per instance\nconst instanceId = parseInt(process.env.PM2_INSTANCE_ID || '0');\n\n// Instance 0 handles background tasks\nif (instanceId === 0) {\n  require('./background-tasks');\n}\n\n// All instances handle web requests\nrequire('./web-server');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"database-connection-pooling",children:"Database Connection Pooling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Scale connection pool with instances\nconst instanceId = parseInt(process.env.PM2_INSTANCE_ID || '0');\n// Total instances can be tracked in your application logic\n// Total instances can be tracked in your application logic\nconst totalInstances = process.env.INSTANCES || 1;\n\nconst poolSize = Math.ceil(100 / totalInstances); // Distribute 100 connections\nconst dbConfig = {\n  host: process.env.DATABASE_HOST,\n  database: process.env.DATABASE_NAME,\n  pool: {\n    min: 1,\n    max: poolSize\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"sensitive-variables",children:"Sensitive Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Good: Use environment files for secrets\necho "API_KEY=secret123" > .env.production\nchmod 600 .env.production\npmdaemon start "node api.js" --name api --env-file .env.production\n\n# Avoid: Secrets in CLI (visible in process list)\npmdaemon start "node api.js" --name api --env API_KEY=secret123\n'})}),"\n",(0,r.jsx)(n.h3,{id:"variable-validation",children:"Variable Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Validate required environment variables\nconst requiredVars = ['DATABASE_URL', 'API_KEY', 'JWT_SECRET'];\nconst missing = requiredVars.filter(varName => !process.env[varName]);\n\nif (missing.length > 0) {\n  console.error(`Missing required environment variables: ${missing.join(', ')}`);\n  process.exit(1);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"environment-isolation",children:"Environment Isolation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Use namespaces to isolate environments\npmdaemon start "node api.js" --name api --namespace production --env-file .env.prod\npmdaemon start "node api.js" --name api --namespace staging --env-file .env.staging\n'})}),"\n",(0,r.jsx)(n.h2,{id:"debugging-environment-variables",children:"Debugging Environment Variables"}),"\n",(0,r.jsx)(n.h3,{id:"view-process-environment",children:"View Process Environment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# View all environment variables for a process\npmdaemon info web-api\n\n# View specific process details\npmdaemon describe web-api\n"})}),"\n",(0,r.jsx)(n.h3,{id:"log-environment-variables",children:"Log Environment Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Node.js - Log environment on startup\nconsole.log('Environment variables:');\nconsole.log('NODE_ENV:', process.env.NODE_ENV);\nconsole.log('PORT:', process.env.PORT);\nconsole.log('PM2_INSTANCE_ID:', process.env.PM2_INSTANCE_ID);\nconsole.log('PMDAEMON_PROCESS_NAME:', process.env.PMDAEMON_PROCESS_NAME);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"environment-variable-conflicts",children:"Environment Variable Conflicts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check for conflicts\nenv | grep NODE_ENV  # Check system environment\npmdaemon info web-api | grep -A 20 "Environment"  # Check process environment\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-environment-files",children:"1. Use Environment Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Good: Organized environment files\npmdaemon start "node api.js" --name api --env-file .env.production\n\n# Avoid: Long CLI commands\npmdaemon start "node api.js" --name api --env VAR1=value1 --env VAR2=value2 --env VAR3=value3\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-validate-required-variables",children:"2. Validate Required Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Good: Validate on startup\nconst config = {\n  port: process.env.PORT || 3000,\n  dbUrl: process.env.DATABASE_URL || (() => {\n    throw new Error('DATABASE_URL is required');\n  })(),\n  apiKey: process.env.API_KEY || (() => {\n    throw new Error('API_KEY is required');\n  })()\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-instance-specific-logic",children:"3. Use Instance-Specific Logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Good: Instance-aware code\nconst instanceId = parseInt(process.env.PM2_INSTANCE_ID || '0');\n\n// Only instance 0 runs scheduled tasks\nif (instanceId === 0) {\n  startScheduledTasks();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-secure-sensitive-data",children:"4. Secure Sensitive Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Good: Secure file permissions\nchmod 600 .env.production\npmdaemon start "node api.js" --name api --env-file .env.production\n\n# Good: Use external secret management\npmdaemon start "node api.js" --name api --env DATABASE_URL="$(vault kv get -field=url secret/db)"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/cli/configuration-options",children:"Configuration Options"})})," - Complete CLI options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/cli/exit-codes",children:"Exit Codes"})})," - Error code reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Security best practices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Examples"})})," - Real-world examples"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);