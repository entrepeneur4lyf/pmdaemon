"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[5223],{5866:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/use-cases","title":"Real-World Use Cases","description":"This guide showcases practical, real-world scenarios where PMDaemon excels, demonstrating how its advanced features solve common deployment and management challenges.","source":"@site/docs/examples/use-cases.md","sourceDirName":"examples","slug":"/examples/use-cases","permalink":"/pmdaemon/docs/examples/use-cases","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/examples/use-cases.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Examples","permalink":"/pmdaemon/docs/api/api-examples"},"next":{"title":"Deployment Examples","permalink":"/pmdaemon/docs/examples/deployment-examples"}}');var a=r(4848),i=r(8453);const o={},s="Real-World Use Cases",c={},l=[{value:"Web Application Deployment",id:"web-application-deployment",level:2},{value:"Scenario: E-commerce Platform",id:"scenario-e-commerce-platform",level:3},{value:"Requirements",id:"requirements",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Deployment Script",id:"deployment-script",level:4},{value:"Microservices Architecture",id:"microservices-architecture",level:2},{value:"Scenario: Financial Services Platform",id:"scenario-financial-services-platform",level:3},{value:"Architecture",id:"architecture",level:4},{value:"Configuration",id:"configuration-1",level:4},{value:"Monitoring Setup",id:"monitoring-setup",level:4},{value:"Development Environment",id:"development-environment",level:2},{value:"Scenario: Full-Stack Development Setup",id:"scenario-full-stack-development-setup",level:3},{value:"Services",id:"services",level:4},{value:"Configuration",id:"configuration-2",level:4},{value:"Development Scripts",id:"development-scripts",level:4},{value:"CI/CD Pipeline Integration",id:"cicd-pipeline-integration",level:2},{value:"Scenario: Automated Deployment Pipeline",id:"scenario-automated-deployment-pipeline",level:3},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:4},{value:"Deployment Script with Rollback",id:"deployment-script-with-rollback",level:4},{value:"Container Orchestration",id:"container-orchestration",level:2},{value:"Scenario: Docker Swarm Alternative",id:"scenario-docker-swarm-alternative",level:3},{value:"Configuration",id:"configuration-3",level:4},{value:"Multi-Language Application Stack",id:"multi-language-application-stack",level:2},{value:"Scenario: Polyglot Microservices",id:"scenario-polyglot-microservices",level:3},{value:"Configuration",id:"configuration-4",level:4},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"1. Health Check Strategy",id:"1-health-check-strategy",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"3. Port Management",id:"3-port-management",level:3},{value:"4. Configuration Management",id:"4-configuration-management",level:3},{value:"5. Monitoring and Logging",id:"5-monitoring-and-logging",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"real-world-use-cases",children:"Real-World Use Cases"})}),"\n",(0,a.jsx)(n.p,{children:"This guide showcases practical, real-world scenarios where PMDaemon excels, demonstrating how its advanced features solve common deployment and management challenges."}),"\n",(0,a.jsx)(n.h2,{id:"web-application-deployment",children:"Web Application Deployment"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-e-commerce-platform",children:"Scenario: E-commerce Platform"}),"\n",(0,a.jsx)(n.p,{children:"Deploy a Node.js e-commerce platform with multiple services, load balancing, and health monitoring."}),"\n",(0,a.jsx)(n.h4,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Frontend"}),": React app served by Express"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API"}),": Node.js REST API with database"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Workers"}),": Background job processing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monitoring"}),": Health checks and real-time monitoring"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scaling"}),": Auto-scaling based on load"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "ecommerce-frontend",\r\n      "script": "node",\r\n      "args": ["frontend-server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "max_memory_restart": "512M",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "API_URL": "http://localhost:4000"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "ecommerce-api",\r\n      "script": "node",\r\n      "args": ["api-server.js"],\r\n      "instances": 4,\r\n      "port": "4000-4003",\r\n      "max_memory_restart": "1G",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "DATABASE_URL": "postgres://localhost/ecommerce",\r\n        "REDIS_URL": "redis://localhost:6379"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:4000/api/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "order-processor",\r\n      "script": "node",\r\n      "args": ["workers/order-processor.js"],\r\n      "instances": 2,\r\n      "max_memory_restart": "256M",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "QUEUE_NAME": "order_processing",\r\n        "REDIS_URL": "redis://localhost:6379"\r\n      },\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./scripts/worker-health.sh",\r\n        "timeout": 15,\r\n        "interval": 60,\r\n        "retries": 2,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "email-worker",\r\n      "script": "node",\r\n      "args": ["workers/email-worker.js"],\r\n      "max_memory_restart": "128M",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "SMTP_HOST": "smtp.example.com",\r\n        "QUEUE_NAME": "email_queue"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"deployment-script",children:"Deployment Script"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n set -e\r\nset -u  # Exit on undefined variables\r\nset -o pipefail  # Exit on pipe failures\r\n\r\n# deploy-ecommerce.sh\r\n\r\n# Configuration\r\nCONFIG_FILE="ecommerce.json"\r\nLOG_FILE="/var/log/deployment.log"\r\n\r\n# Logging function\r\nlog() {\r\n    echo "$(date \'+%Y-%m-%d %H:%M:%S\'): $1" | tee -a "$LOG_FILE"\r\n}\r\n\r\n# Validation\r\nif [[ ! -f "$CONFIG_FILE" ]]; then\r\n    log "ERROR: Configuration file $CONFIG_FILE not found"\r\n    exit 1\r\nfi\r\n\r\nlog "\ud83d\ude80 Deploying E-commerce Platform..."\r\n\r\n # Stop existing processes\r\nlog "\ud83d\udce6 Stopping existing processes..."\r\npmdaemon delete all --force 2>/dev/null || log "No existing processes to stop"\r\n\r\n# Start services with health check waiting\r\necho "\ud83d\udce6 Starting API services..."\r\npmdaemon --config ecommerce.json start --name ecommerce-api --wait-ready\r\n\r\necho "\ud83c\udf10 Starting frontend..."\r\npmdaemon --config ecommerce.json start --name ecommerce-frontend --wait-ready\r\n\r\necho "\u2699\ufe0f Starting background workers..."\r\npmdaemon --config ecommerce.json start --name order-processor\r\npmdaemon --config ecommerce.json start --name email-worker\r\n\r\necho "\u2705 Deployment complete!"\r\necho "\ud83d\udd0d Monitoring: pmdaemon monit"\r\necho "\ud83d\udcca Web UI: pmdaemon web --host 0.0.0.0"\r\n\r\n# Show status\r\npmdaemon list\n'})}),"\n",(0,a.jsx)(n.h2,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-financial-services-platform",children:"Scenario: Financial Services Platform"}),"\n",(0,a.jsx)(n.p,{children:"Deploy a microservices-based financial platform with strict health monitoring and auto-scaling."}),"\n",(0,a.jsx)(n.h4,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API Gateway"}),": Route requests to services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Service"}),": Authentication and user management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Transaction Service"}),": Payment processing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Notification Service"}),": Email/SMS notifications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Service"}),": Compliance and logging"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"configuration-1",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# financial-platform.yaml\r\napps:\r\n  # API Gateway\r\n  - name: api-gateway\r\n    script: node\r\n    args: [gateway/server.js]\r\n    port: "8080"\r\n    max_memory_restart: "512M"\r\n    env:\r\n      NODE_ENV: production\r\n      LOG_LEVEL: info\r\n      RATE_LIMIT: "1000"\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8080/health\r\n      timeout: 5\r\n      interval: 15\r\n      retries: 3\r\n      enabled: true\r\n\r\n  # User Service\r\n  - name: user-service\r\n    script: node\r\n    args: [services/user/server.js]\r\n    instances: 3\r\n    port: "8001-8003"\r\n    max_memory_restart: "256M"\r\n    env:\r\n      NODE_ENV: production\r\n      DATABASE_URL: postgres://localhost/users\r\n      JWT_SECRET: ${JWT_SECRET}\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8001/health\r\n      timeout: 5\r\n      interval: 30\r\n      enabled: true\r\n\r\n  # Transaction Service (Critical)\r\n  - name: transaction-service\r\n    script: node\r\n    args: [services/transaction/server.js]\r\n    instances: 4\r\n    port: "8004-8007"\r\n    max_memory_restart: "512M"\r\n    max_restarts: 3\r\n    min_uptime: "30s"\r\n    env:\r\n      NODE_ENV: production\r\n      DATABASE_URL: postgres://localhost/transactions\r\n      ENCRYPTION_KEY: ${ENCRYPTION_KEY}\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8004/health\r\n      timeout: 3\r\n      interval: 10\r\n      retries: 5\r\n      enabled: true\r\n\r\n  # Notification Service\r\n  - name: notification-service\r\n    script: python\r\n    args: [-m, uvicorn, main:app, --host, "0.0.0.0"]\r\n    instances: 2\r\n    port: "8008-8009"\r\n    max_memory_restart: "256M"\r\n    cwd: /app/services/notification\r\n    env:\r\n      PYTHONPATH: /app/services/notification\r\n      REDIS_URL: redis://localhost:6379\r\n      EMAIL_PROVIDER: sendgrid\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8008/health\r\n      timeout: 10\r\n      interval: 30\r\n      enabled: true\r\n\r\n  # Audit Service\r\n  - name: audit-service\r\n    script: java\r\n    args: [-jar, audit-service.jar]\r\n    port: "8010"\r\n    max_memory_restart: "1G"\r\n    cwd: /app/services/audit\r\n    env:\r\n      SPRING_PROFILES_ACTIVE: production\r\n      DATABASE_URL: postgres://localhost/audit\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:8010/actuator/health\r\n      timeout: 15\r\n      interval: 60\r\n      enabled: true\n'})}),"\n",(0,a.jsx)(n.h4,{id:"monitoring-setup",children:"Monitoring Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# monitor-financial-platform.sh\r\n\r\n# Start monitoring dashboard\r\npmdaemon web --host 0.0.0.0 --port 9615 &\r\n\r\n# Real-time monitoring with fast updates for critical services\r\npmdaemon monit --interval 1 &\r\n\r\n# Log monitoring for transaction service\r\npmdaemon logs transaction-service --follow &\r\n\r\necho "\ud83d\udd0d Monitoring started:"\r\necho "  - Web Dashboard: http://localhost:9615"\r\necho "  - Real-time CLI: pmdaemon monit"\r\necho "  - Transaction Logs: Following in background"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"development-environment",children:"Development Environment"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-full-stack-development-setup",children:"Scenario: Full-Stack Development Setup"}),"\n",(0,a.jsx)(n.p,{children:"Set up a complete development environment with hot-reloading, database, and external services."}),"\n",(0,a.jsx)(n.h4,{id:"services",children:"Services"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Frontend"}),": React development server"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Backend"}),": Node.js API with hot-reload"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Database"}),": PostgreSQL"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Redis"}),": Caching and sessions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Worker"}),": Background job processing"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"configuration-2",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "frontend-dev",\r\n      "script": "npm",\r\n      "args": ["run", "dev"],\r\n      "port": "3000",\r\n      "cwd": "./frontend",\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "REACT_APP_API_URL": "http://localhost:4000"\r\n      },\r\n      "autorestart": false,\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "backend-dev",\r\n      "script": "npm",\r\n      "args": ["run", "dev"],\r\n      "port": "4000",\r\n      "cwd": "./backend",\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "DATABASE_URL": "postgres://localhost/myapp_dev",\r\n        "REDIS_URL": "redis://localhost:6379"\r\n      },\r\n      "autorestart": false,\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:4000/health",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "postgres-dev",\r\n      "script": "docker",\r\n      "args": [\r\n        "run", "--rm", "--name", "postgres-dev",\r\n        "-p", "5432:5432",\r\n        "-e", "POSTGRES_DB=myapp_dev",\r\n        "-e", "POSTGRES_USER=dev",\r\n        "-e", "POSTGRES_PASSWORD=dev123",\r\n        "postgres:14"\r\n      ],\r\n      "autorestart": true,\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./scripts/postgres-health.sh",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "redis-dev",\r\n      "script": "docker",\r\n      "args": [\r\n        "run", "--rm", "--name", "redis-dev",\r\n        "-p", "6379:6379",\r\n        "redis:7-alpine"\r\n      ],\r\n      "autorestart": true,\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./scripts/redis-health.sh",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"development-scripts",children:"Development Scripts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# dev-start.sh\r\n\r\necho "\ud83d\ude80 Starting development environment..."\r\n\r\n# Start infrastructure first\r\necho "\ud83d\udce6 Starting databases..."\r\npmdaemon --config dev.json start --name postgres-dev --wait-ready\r\npmdaemon --config dev.json start --name redis-dev --wait-ready\r\n\r\n# Start application services\r\necho "\ud83d\udd27 Starting backend..."\r\npmdaemon --config dev.json start --name backend-dev --wait-ready\r\n\r\necho "\ud83c\udf10 Starting frontend..."\r\npmdaemon --config dev.json start --name frontend-dev --wait-ready\r\n\r\necho "\u2705 Development environment ready!"\r\necho "  - Frontend: http://localhost:3000"\r\necho "  - Backend: http://localhost:4000"\r\necho "  - Monitor: pmdaemon monit"\r\n\r\n# Open browser\r\nopen http://localhost:3000\n'})}),"\n",(0,a.jsx)(n.h2,{id:"cicd-pipeline-integration",children:"CI/CD Pipeline Integration"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-automated-deployment-pipeline",children:"Scenario: Automated Deployment Pipeline"}),"\n",(0,a.jsx)(n.p,{children:"Integrate PMDaemon with CI/CD for automated testing and deployment."}),"\n",(0,a.jsx)(n.h4,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/deploy.yml\r\nname: Deploy to Production\r\n\r\non:\r\n  push:\r\n    branches: [main]\r\n\r\njobs:\r\n  deploy:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n\r\n    - name: Install PMDaemon\r\n      run: |\r\n        curl -sSL https://github.com/entrepeneur4lyf/pmdaemon/releases/latest/download/pmdaemon-linux-x86_64.tar.gz | tar -xz\r\n        sudo mv pmdaemon /usr/local/bin/\r\n\r\n    - name: Deploy Application\r\n      run: |\r\n        # Copy config to server\r\n        scp production.json user@server:/app/\r\n\r\n        # Deploy with health check waiting\r\n        ssh user@server << 'EOF'\r\n          cd /app\r\n\r\n          # Graceful deployment\r\n          pmdaemon --config production.json start --name api-server --wait-ready\r\n          pmdaemon --config production.json start --name frontend --wait-ready\r\n\r\n          # Verify deployment\r\n          pmdaemon list\r\n\r\n          # Run health checks\r\n          curl -f http://localhost:3000/health\r\n          curl -f http://localhost:4000/api/health\r\n        EOF\n"})}),"\n",(0,a.jsx)(n.h4,{id:"deployment-script-with-rollback",children:"Deployment Script with Rollback"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# deploy-with-rollback.sh\r\n\r\nset -e\r\n\r\nBACKUP_CONFIG="/tmp/pmdaemon-backup-$(date +%s).json"\r\nNEW_CONFIG="production.json"\r\n\r\necho "\ud83d\ude80 Starting deployment..."\r\n\r\n# Backup current configuration\r\necho "\ud83d\udcbe Backing up current configuration..."\r\npmdaemon list --json > "$BACKUP_CONFIG"\r\n\r\n# Function to rollback on failure\r\nrollback() {\r\n    echo "\u274c Deployment failed, rolling back..."\r\n    pmdaemon delete all --force\r\n    pmdaemon --config "$BACKUP_CONFIG" start\r\n    exit 1\r\n}\r\n\r\n# Set trap for rollback\r\ntrap rollback ERR\r\n\r\n# Deploy new configuration\r\necho "\ud83d\udce6 Deploying new configuration..."\r\npmdaemon --config "$NEW_CONFIG" start --wait-ready\r\n\r\n# Verify deployment\r\necho "\ud83d\udd0d Verifying deployment..."\r\nsleep 10\r\n\r\n# Health check all services\r\nfor service in api-server frontend worker; do\r\n    if ! pmdaemon info "$service" | grep -q "online"; then\r\n        echo "\u274c Service $service is not healthy"\r\n        rollback\r\n    fi\r\ndone\r\n\r\n# Cleanup old processes if everything is healthy\r\necho "\ud83e\uddf9 Cleaning up old processes..."\r\n# Implementation depends on your deployment strategy\r\n\r\necho "\u2705 Deployment successful!"\r\necho "\ud83d\udcca Monitor: pmdaemon web --host 0.0.0.0"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"container-orchestration",children:"Container Orchestration"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-docker-swarm-alternative",children:"Scenario: Docker Swarm Alternative"}),"\n",(0,a.jsx)(n.p,{children:"Use PMDaemon as a lightweight alternative to Docker Swarm for container orchestration."}),"\n",(0,a.jsx)(n.h4,{id:"configuration-3",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# container-orchestration.yaml\r\napps:\r\n  # Load Balancer\r\n  - name: nginx-lb\r\n    script: docker\r\n    args:\r\n      - run\r\n      - --rm\r\n      - --name\r\n      - nginx-lb\r\n      - -p\r\n      - "80:80"\r\n      - -v\r\n      - ./nginx.conf:/etc/nginx/nginx.conf\r\n      - nginx:alpine\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:80/health\r\n      timeout: 5\r\n      interval: 30\r\n      enabled: true\r\n\r\n  # Web Application Containers\r\n  - name: web-app\r\n    script: docker\r\n    args:\r\n      - run\r\n      - --rm\r\n      -      - web-app-${PM2_INSTANCE_ID:-0}\r\n      - -p\r\n      - "${PORT}:3000"\r\n      - myapp:latest\r\n    instances: 3\r\n    port: "8001-8003"\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:${PORT}/health\r\n      timeout: 10\r\n      interval: 30\r\n      enabled: true\r\n\r\n  # Database\r\n  - name: postgres\r\n    script: docker\r\n    args:\r\n      - run\r\n      - --rm\r\n      - --name\r\n      - postgres-prod\r\n      - -p\r\n      - "5432:5432"\r\n      - -e\r\n      - POSTGRES_DB=myapp\r\n      - -v\r\n      - postgres-data:/var/lib/postgresql/data\r\n      - postgres:14\r\n    health_check:\r\n      check_type: script\r\n      script: ./scripts/postgres-health.sh\r\n      timeout: 15\r\n      interval: 60\r\n      enabled: true\r\n\r\n  # Redis Cache\r\n  - name: redis\r\n    script: docker\r\n    args:\r\n      - run\r\n      - --rm\r\n      - --name\r\n      - redis-prod\r\n      - -p\r\n      - "6379:6379"\r\n      - redis:7-alpine\r\n    health_check:\r\n      check_type: script\r\n      script: ./scripts/redis-health.sh\r\n      timeout: 5\r\n      interval: 30\r\n      enabled: true\n'})}),"\n",(0,a.jsx)(n.h2,{id:"multi-language-application-stack",children:"Multi-Language Application Stack"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-polyglot-microservices",children:"Scenario: Polyglot Microservices"}),"\n",(0,a.jsx)(n.p,{children:"Deploy a multi-language application stack with different runtime requirements."}),"\n",(0,a.jsx)(n.h4,{id:"configuration-4",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'# polyglot-stack.toml\r\n\r\n# Node.js API Gateway\r\n[[apps]]\r\nname = "api-gateway"\r\nscript = "node"\r\nargs = ["gateway.js"]\r\nport = "8080"\r\nmax_memory_restart = "512M"\r\n\r\n[apps.env]\r\nNODE_ENV = "production"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:8080/health"\r\ntimeout = 5\r\ninterval = 30\r\nenabled = true\r\n\r\n# Python ML Service\r\n[[apps]]\r\nname = "ml-service"\r\nscript = "python"\r\nargs = ["-m", "uvicorn", "main:app", "--host", "0.0.0.0"]\r\nport = "8001"\r\nmax_memory_restart = "2G"\r\ncwd = "/app/ml-service"\r\n\r\n[apps.env]\r\nPYTHONPATH = "/app/ml-service"\r\nMODEL_PATH = "/models/latest"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:8001/health"\r\ntimeout = 15\r\ninterval = 60\r\nenabled = true\r\n\r\n# Go Analytics Service\r\n[[apps]]\r\nname = "analytics-service"\r\nscript = "./analytics-server"\r\nport = "8002"\r\nmax_memory_restart = "1G"\r\ncwd = "/app/analytics"\r\n\r\n[apps.env]\r\nGO_ENV = "production"\r\nDATABASE_URL = "postgres://localhost/analytics"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:8002/metrics"\r\ntimeout = 10\r\ninterval = 30\r\nenabled = true\r\n\r\n# Rust High-Performance Service\r\n[[apps]]\r\nname = "performance-service"\r\nscript = "./target/release/performance-server"\r\ninstances = 2\r\nport = "8003-8004"\r\nmax_memory_restart = "256M"\r\ncwd = "/app/performance-service"\r\n\r\n[apps.env]\r\nRUST_ENV = "production"\r\nWORKER_THREADS = "4"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:8003/status"\r\ntimeout = 3\r\ninterval = 15\r\nenabled = true\r\n\r\n# Java Spring Boot Service\r\n[[apps]]\r\nname = "legacy-service"\r\nscript = "java"\r\nargs = ["-Xmx1g", "-jar", "legacy-service.jar"]\r\nport = "8005"\r\nmax_memory_restart = "1.5G"\r\ncwd = "/app/legacy"\r\n\r\n[apps.env]\r\nSPRING_PROFILES_ACTIVE = "production"\r\nJVM_OPTS = "-XX:+UseG1GC"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:8005/actuator/health"\r\ntimeout = 20\r\ninterval = 60\r\nenabled = true\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,a.jsx)(n.h3,{id:"1-health-check-strategy",children:"1. Health Check Strategy"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Critical services"}),": Fast, frequent checks (10-15s intervals)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Background services"}),": Slower checks (60s+ intervals)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use blocking start"})," for deployment scripts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Script-based checks"})," for complex validation"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Set memory limits"})," for all services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use appropriate restart policies"})," based on service criticality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monitor resource usage"})," with ",(0,a.jsx)(n.code,{children:"pmdaemon monit"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-port-management",children:"3. Port Management"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use port ranges"})," for clustered services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Auto-assignment"})," for dynamic scaling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Runtime overrides"})," for blue-green deployments"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"4-configuration-management",children:"4. Configuration Management"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Environment-specific configs"})," for different stages"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version control"})," all configuration files"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Validate configs"})," before deployment"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"5-monitoring-and-logging",children:"5. Monitoring and Logging"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Centralized logging"})," with proper log rotation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Real-time monitoring"})," during deployments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Web dashboard"})," for remote monitoring"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"These real-world use cases demonstrate PMDaemon's flexibility and advanced features in practical scenarios. The combination of health checks, port management, and robust process lifecycle management makes PMDaemon ideal for modern application deployment and management."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);