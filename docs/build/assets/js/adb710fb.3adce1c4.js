"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[8486],{8453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>c});var i=r(6540);const s={},a=i.createContext(s);function t(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),i.createElement(a.Provider,{value:e},n.children)}},8648:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"configuration/advanced-configuration","title":"Advanced Configuration","description":"This guide covers advanced PMDaemon configuration patterns, complex scenarios, and sophisticated deployment strategies. Learn how to leverage PMDaemon\'s full potential for enterprise-grade process management.","source":"@site/docs/configuration/advanced-configuration.md","sourceDirName":"configuration","slug":"/configuration/advanced-configuration","permalink":"/pmdaemon/docs/configuration/advanced-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/configuration/advanced-configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Process Configuration","permalink":"/pmdaemon/docs/configuration/process-configuration"},"next":{"title":"Schema Validation","permalink":"/pmdaemon/docs/configuration/schema-validation"}}');var s=r(4848),a=r(8453);const t={},c="Advanced Configuration",o={},l=[{value:"Multi-Environment Configuration",id:"multi-environment-configuration",level:2},{value:"Environment-Specific Configurations",id:"environment-specific-configurations",level:3},{value:"Environment Variable Substitution",id:"environment-variable-substitution",level:3},{value:"Complex Clustering Patterns",id:"complex-clustering-patterns",level:2},{value:"Heterogeneous Clustering",id:"heterogeneous-clustering",level:3},{value:"Load-Balanced Service Groups",id:"load-balanced-service-groups",level:3},{value:"Advanced Port Management",id:"advanced-port-management",level:2},{value:"Dynamic Port Allocation",id:"dynamic-port-allocation",level:3},{value:"Port Ranges with Load Balancer Integration",id:"port-ranges-with-load-balancer-integration",level:3},{value:"Sophisticated Health Checks",id:"sophisticated-health-checks",level:2},{value:"Multi-Stage Health Checks",id:"multi-stage-health-checks",level:3},{value:"Conditional Health Checks",id:"conditional-health-checks",level:3},{value:"Resource Management Strategies",id:"resource-management-strategies",level:2},{value:"Memory-Aware Scaling",id:"memory-aware-scaling",level:3},{value:"CPU-Aware Instance Distribution",id:"cpu-aware-instance-distribution",level:3},{value:"Advanced Logging Patterns",id:"advanced-logging-patterns",level:2},{value:"Structured Logging Configuration",id:"structured-logging-configuration",level:3},{value:"Log Rotation and Management",id:"log-rotation-and-management",level:3},{value:"Service Dependencies and Orchestration",id:"service-dependencies-and-orchestration",level:2},{value:"Dependency-Aware Startup",id:"dependency-aware-startup",level:3},{value:"Graceful Shutdown Orchestration",id:"graceful-shutdown-orchestration",level:3},{value:"Configuration Inheritance and Composition",id:"configuration-inheritance-and-composition",level:2},{value:"Base Configuration Template",id:"base-configuration-template",level:3},{value:"Service-Specific Extensions",id:"service-specific-extensions",level:3},{value:"Performance Optimization Patterns",id:"performance-optimization-patterns",level:2},{value:"Instance-Specific Optimization",id:"instance-specific-optimization",level:3},{value:"Resource Pool Management",id:"resource-pool-management",level:3},{value:"Security Hardening",id:"security-hardening",level:2},{value:"Secure Process Configuration",id:"secure-process-configuration",level:3},{value:"Environment Variable Security",id:"environment-variable-security",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Comprehensive Monitoring Setup",id:"comprehensive-monitoring-setup",level:3},{value:"Best Practices for Advanced Configuration",id:"best-practices-for-advanced-configuration",level:2},{value:"1. Use Configuration Validation",id:"1-use-configuration-validation",level:3},{value:"2. Implement Gradual Rollouts",id:"2-implement-gradual-rollouts",level:3},{value:"3. Use Namespace Organization",id:"3-use-namespace-organization",level:3},{value:"4. Implement Circuit Breakers",id:"4-implement-circuit-breakers",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"advanced-configuration",children:"Advanced Configuration"})}),"\n",(0,s.jsx)(e.p,{children:"This guide covers advanced PMDaemon configuration patterns, complex scenarios, and sophisticated deployment strategies. Learn how to leverage PMDaemon's full potential for enterprise-grade process management."}),"\n",(0,s.jsx)(e.h2,{id:"multi-environment-configuration",children:"Multi-Environment Configuration"}),"\n",(0,s.jsx)(e.h3,{id:"environment-specific-configurations",children:"Environment-Specific Configurations"}),"\n",(0,s.jsx)(e.p,{children:"Create separate configuration files for different environments:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"ecosystem.development.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-dev",\r\n      "script": "npm",\r\n      "args": ["run", "dev"],\r\n      "instances": 1,\r\n      "port": "3000",\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "DEBUG": "*",\r\n        "LOG_LEVEL": "debug"\r\n      },\r\n      "watch": true,\r\n      "ignore_watch": ["node_modules", "logs"],\r\n      "max_restarts": 100,\r\n      "min_uptime": "1s"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"ecosystem.production.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-prod",\r\n      "script": "node",\r\n      "args": ["dist/server.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "LOG_LEVEL": "info"\r\n      },\r\n      "max_memory_restart": "1G",\r\n      "max_restarts": 5,\r\n      "min_uptime": "10s",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"environment-variable-substitution",children:"Environment Variable Substitution"}),"\n",(0,s.jsx)(e.p,{children:"Use environment variables in configuration files:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "${APP_NAME:-api-service}",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": "${INSTANCES:-2}",\r\n      "port": "${PORT_RANGE:-3000-3001}",\r\n      "env": {\r\n        "NODE_ENV": "${NODE_ENV:-production}",\r\n        "DATABASE_URL": "${DATABASE_URL}",\r\n        "REDIS_URL": "${REDIS_URL:-redis://localhost:6379}"\r\n      },\r\n      "max_memory_restart": "${MAX_MEMORY:-512M}"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"export APP_NAME=user-service\r\nexport INSTANCES=4\r\nexport DATABASE_URL=postgres://prod-server/userdb\r\npmdaemon --config ecosystem.json start\n"})}),"\n",(0,s.jsx)(e.h2,{id:"complex-clustering-patterns",children:"Complex Clustering Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"heterogeneous-clustering",children:"Heterogeneous Clustering"}),"\n",(0,s.jsx)(e.p,{children:"Different instance types with specialized roles:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api-master",\r\n      "script": "node",\r\n      "args": ["server.js", "--role=master"],\r\n      "instances": 1,\r\n      "port": "3000",\r\n      "env": {\r\n        "ROLE": "master",\r\n        "ENABLE_CRON": "true",\r\n        "ENABLE_ADMIN": "true"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-workers",\r\n      "script": "node", \r\n      "args": ["server.js", "--role=worker"],\r\n      "instances": 3,\r\n      "port": "3001-3003",\r\n      "env": {\r\n        "ROLE": "worker",\r\n        "ENABLE_CRON": "false",\r\n        "ENABLE_ADMIN": "false"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"load-balanced-service-groups",children:"Load-Balanced Service Groups"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "frontend-servers",\r\n      "script": "node",\r\n      "args": ["frontend.js"],\r\n      "instances": 2,\r\n      "port": "8080-8081",\r\n      "env": {\r\n        "SERVICE_TYPE": "frontend",\r\n        "BACKEND_URL": "http://localhost:3000"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-servers",\r\n      "script": "node",\r\n      "args": ["api.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "env": {\r\n        "SERVICE_TYPE": "api",\r\n        "DATABASE_POOL_SIZE": "25"\r\n      }\r\n    },\r\n    {\r\n      "name": "worker-processes",\r\n      "script": "python",\r\n      "args": ["worker.py"],\r\n      "instances": 2,\r\n      "env": {\r\n        "SERVICE_TYPE": "worker",\r\n        "QUEUE_NAME": "default"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-port-management",children:"Advanced Port Management"}),"\n",(0,s.jsx)(e.h3,{id:"dynamic-port-allocation",children:"Dynamic Port Allocation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "microservice-a",\r\n      "script": "node",\r\n      "args": ["service-a.js"],\r\n      "instances": 2,\r\n      "port": "auto:8000-8100",\r\n      "env": {\r\n        "SERVICE_NAME": "service-a"\r\n      }\r\n    },\r\n    {\r\n      "name": "microservice-b",\r\n      "script": "node",\r\n      "args": ["service-b.js"],\r\n      "instances": 3,\r\n      "port": "auto:8000-8100",\r\n      "env": {\r\n        "SERVICE_NAME": "service-b"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"port-ranges-with-load-balancer-integration",children:"Port Ranges with Load Balancer Integration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-tier",\r\n      "script": "node",\r\n      "args": ["web.js"],\r\n      "instances": 4,\r\n      "port": "8080-8083",\r\n      "env": {\r\n        "TIER": "web",\r\n        "UPSTREAM_SERVERS": "localhost:3000,localhost:3001,localhost:3002,localhost:3003"\r\n      }\r\n    },\r\n    {\r\n      "name": "api-tier",\r\n      "script": "node",\r\n      "args": ["api.js"],\r\n      "instances": 4,\r\n      "port": "3000-3003",\r\n      "env": {\r\n        "TIER": "api",\r\n        "DATABASE_POOL_SIZE": "10"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"sophisticated-health-checks",children:"Sophisticated Health Checks"}),"\n",(0,s.jsx)(e.h3,{id:"multi-stage-health-checks",children:"Multi-Stage Health Checks"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "complex-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "health_check": {\r\n    "check_type": "script",\r\n    "script": "./health-checks/comprehensive.sh",\r\n    "timeout": 30,\r\n    "interval": 45,\r\n    "retries": 3,\r\n    "enabled": true\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"comprehensive.sh:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\n# Stage 1: Basic process check\r\nif ! pgrep -f "node service.js" > /dev/null; then\r\n    echo "Process not running"\r\n    exit 1\r\nfi\r\n\r\n# Stage 2: HTTP endpoint check\r\nif ! curl -f -s http://localhost:3000/health > /dev/null; then\r\n    echo "HTTP health check failed"\r\n    exit 1\r\nfi\r\n\r\n# Stage 3: Database connectivity\r\nif ! node -e "require(\'./db\').testConnection()" 2>/dev/null; then\r\n    echo "Database connection failed"\r\n    exit 1\r\nfi\r\n\r\n# Stage 4: External service dependencies\r\nif ! curl -f -s http://external-api/status > /dev/null; then\r\n    echo "External service unavailable"\r\n    exit 1\r\nfi\r\n\r\n# Stage 5: Resource utilization check\r\nMEMORY_USAGE=$(ps -o pid,vsz,comm -p $(pgrep -f "node service.js") | tail -1 | awk \'{print $2}\')\r\nif [ "$MEMORY_USAGE" -gt 1048576 ]; then  # 1GB in KB\r\n    echo "Memory usage too high: ${MEMORY_USAGE}KB"\r\n    exit 1\r\nfi\r\n\r\necho "All health checks passed"\r\nexit 0\n'})}),"\n",(0,s.jsx)(e.h3,{id:"conditional-health-checks",children:"Conditional Health Checks"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "adaptive-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "env": {\r\n    "HEALTH_CHECK_MODE": "comprehensive"\r\n  },\r\n  "health_check": {\r\n    "check_type": "script",\r\n    "script": "./health-checks/adaptive.sh",\r\n    "timeout": 20,\r\n    "interval": 30,\r\n    "enabled": true\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"adaptive.sh:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\nMODE=${HEALTH_CHECK_MODE:-basic}\r\n\r\ncase $MODE in\r\n    "basic")\r\n        curl -f -s http://localhost:3000/ping > /dev/null\r\n        ;;\r\n    "standard")\r\n        curl -f -s http://localhost:3000/health > /dev/null\r\n        ;;\r\n    "comprehensive")\r\n        # Full health check suite\r\n        ./health-checks/comprehensive.sh\r\n        ;;\r\n    *)\r\n        echo "Unknown health check mode: $MODE"\r\n        exit 1\r\n        ;;\r\nesac\n'})}),"\n",(0,s.jsx)(e.h2,{id:"resource-management-strategies",children:"Resource Management Strategies"}),"\n",(0,s.jsx)(e.h3,{id:"memory-aware-scaling",children:"Memory-Aware Scaling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "memory-intensive-service",\r\n      "script": "python",\r\n      "args": ["ml_service.py"],\r\n      "instances": 2,\r\n      "max_memory_restart": "2G",\r\n      "env": {\r\n        "MEMORY_LIMIT": "2048",\r\n        "BATCH_SIZE": "100"\r\n      }\r\n    },\r\n    {\r\n      "name": "lightweight-service",\r\n      "script": "node",\r\n      "args": ["api.js"],\r\n      "instances": 8,\r\n      "max_memory_restart": "256M",\r\n      "env": {\r\n        "MEMORY_LIMIT": "256",\r\n        "CACHE_SIZE": "50"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"cpu-aware-instance-distribution",children:"CPU-Aware Instance Distribution"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "cpu-bound-service",\r\n      "script": "python",\r\n      "args": ["compute.py"],\r\n      "instances": "max",\r\n      "env": {\r\n        "WORKER_TYPE": "cpu_intensive",\r\n        "THREAD_POOL_SIZE": "1"\r\n      }\r\n    },\r\n    {\r\n      "name": "io-bound-service",\r\n      "script": "node",\r\n      "args": ["io_service.js"],\r\n      "instances": 4,\r\n      "env": {\r\n        "WORKER_TYPE": "io_intensive",\r\n        "CONNECTION_POOL_SIZE": "100"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-logging-patterns",children:"Advanced Logging Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"structured-logging-configuration",children:"Structured Logging Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "structured-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "env": {\r\n    "LOG_FORMAT": "json",\r\n    "LOG_LEVEL": "info"\r\n  },\r\n  "out_file": "/var/log/services/structured-service.json",\r\n  "error_file": "/var/log/services/structured-service-error.json",\r\n  "log_date_format": "YYYY-MM-DD HH:mm:ss.SSS Z"\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"log-rotation-and-management",children:"Log Rotation and Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "high-volume-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "log": {\r\n    "out_file": "/var/log/services/high-volume.out",\r\n    "error_file": "/var/log/services/high-volume.err",\r\n    "max_log_size": "100M",\r\n    "max_log_files": 10,\r\n    "compress_logs": true\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"service-dependencies-and-orchestration",children:"Service Dependencies and Orchestration"}),"\n",(0,s.jsx)(e.h3,{id:"dependency-aware-startup",children:"Dependency-Aware Startup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "database",\r\n      "script": "postgres",\r\n      "args": ["-D", "/var/lib/postgresql/data"],\r\n      "autorestart": true,\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./health-checks/postgres.sh",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "redis",\r\n      "script": "redis-server",\r\n      "args": ["/etc/redis/redis.conf"],\r\n      "autorestart": true,\r\n      "health_check": {\r\n        "check_type": "script",\r\n        "script": "./health-checks/redis.sh",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    },\r\n    {\r\n      "name": "api-service",\r\n      "script": "node",\r\n      "args": ["api.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "depends_on": ["database", "redis"],\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"graceful-shutdown-orchestration",children:"Graceful Shutdown Orchestration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "graceful-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "kill_timeout": "60s",\r\n  "env": {\r\n    "GRACEFUL_SHUTDOWN_TIMEOUT": "50000"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"service.js:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"process.on('SIGTERM', async () => {\r\n  console.log('Received SIGTERM, starting graceful shutdown...');\r\n  \r\n  // Stop accepting new requests\r\n  server.close();\r\n  \r\n  // Finish processing existing requests\r\n  await finishPendingRequests();\r\n  \r\n  // Close database connections\r\n  await database.close();\r\n  \r\n  // Clean up resources\r\n  await cleanup();\r\n  \r\n  console.log('Graceful shutdown complete');\r\n  process.exit(0);\r\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuration-inheritance-and-composition",children:"Configuration Inheritance and Composition"}),"\n",(0,s.jsx)(e.h3,{id:"base-configuration-template",children:"Base Configuration Template"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"base.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "base_config": {\r\n    "autorestart": true,\r\n    "max_restarts": 10,\r\n    "min_uptime": "5s",\r\n    "restart_delay": "1s",\r\n    "kill_timeout": "30s",\r\n    "env": {\r\n      "NODE_ENV": "production",\r\n      "LOG_LEVEL": "info"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"service-specific-extensions",children:"Service-Specific Extensions"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"web-service.json:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "extends": "./base.json",\r\n  "name": "web-service",\r\n  "script": "node",\r\n  "args": ["web.js"],\r\n  "instances": 4,\r\n  "port": "3000-3003",\r\n  "env": {\r\n    "SERVICE_TYPE": "web"\r\n  },\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "enabled": true\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"performance-optimization-patterns",children:"Performance Optimization Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"instance-specific-optimization",children:"Instance-Specific Optimization"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "optimized-service",\r\n      "script": "node",\r\n      "args": ["--max-old-space-size=1024", "service.js"],\r\n      "instances": 4,\r\n      "env": {\r\n        "UV_THREADPOOL_SIZE": "16",\r\n        "NODE_OPTIONS": "--max-old-space-size=1024"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"resource-pool-management",children:"Resource Pool Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "pooled-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "instances": 4,\r\n  "env": {\r\n    "DB_POOL_SIZE": "25",\r\n    "REDIS_POOL_SIZE": "10",\r\n    "HTTP_KEEP_ALIVE_TIMEOUT": "5000"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"security-hardening",children:"Security Hardening"}),"\n",(0,s.jsx)(e.h3,{id:"secure-process-configuration",children:"Secure Process Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "secure-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "user": "app-user",\r\n  "group": "app-group",\r\n  "env": {\r\n    "NODE_ENV": "production",\r\n    "SECURE_MODE": "true"\r\n  },\r\n  "cwd": "/opt/secure-app",\r\n  "umask": "0027"\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"environment-variable-security",children:"Environment Variable Security"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "secure-api",\r\n  "script": "node",\r\n  "args": ["api.js"],\r\n  "env_file": "/etc/secrets/api.env",\r\n  "env": {\r\n    "CONFIG_FILE": "/etc/app/config.json"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"/etc/secrets/api.env:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"DATABASE_PASSWORD=secret123\r\nJWT_SECRET=supersecret\r\nAPI_KEY=private-key\n"})}),"\n",(0,s.jsx)(e.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,s.jsx)(e.h3,{id:"comprehensive-monitoring-setup",children:"Comprehensive Monitoring Setup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "monitored-service",\r\n  "script": "node",\r\n  "args": ["service.js"],\r\n  "env": {\r\n    "METRICS_PORT": "9090",\r\n    "TRACING_ENABLED": "true",\r\n    "LOG_STRUCTURED": "true"\r\n  },\r\n  "health_check": {\r\n    "check_type": "http",\r\n    "url": "http://localhost:3000/health",\r\n    "timeout": 10,\r\n    "interval": 30,\r\n    "enabled": true\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices-for-advanced-configuration",children:"Best Practices for Advanced Configuration"}),"\n",(0,s.jsx)(e.h3,{id:"1-use-configuration-validation",children:"1. Use Configuration Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Validate configuration before deployment\r\npmdaemon --config ecosystem.json validate\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-implement-gradual-rollouts",children:"2. Implement Gradual Rollouts"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "service-v1",\r\n      "script": "node",\r\n      "args": ["service-v1.js"],\r\n      "instances": 3,\r\n      "port": "3000-3002"\r\n    },\r\n    {\r\n      "name": "service-v2",\r\n      "script": "node", \r\n      "args": ["service-v2.js"],\r\n      "instances": 1,\r\n      "port": "3003"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-use-namespace-organization",children:"3. Use Namespace Organization"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "api",\r\n      "namespace": "production",\r\n      "script": "node",\r\n      "args": ["api.js"]\r\n    },\r\n    {\r\n      "name": "worker",\r\n      "namespace": "production", \r\n      "script": "python",\r\n      "args": ["worker.py"]\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"4-implement-circuit-breakers",children:"4. Implement Circuit Breakers"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// In your application code\r\nconst CircuitBreaker = require('opossum');\r\n\r\nconst options = {\r\n  timeout: 3000,\r\n  errorThresholdPercentage: 50,\r\n  resetTimeout: 30000\r\n};\r\n\r\nconst breaker = new CircuitBreaker(callExternalService, options);\n"})}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/configuration/schema-validation",children:"Schema Validation"})})," - Configuration validation details"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/configuration/process-configuration",children:"Process Configuration"})})," - Individual process settings"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Security best practices"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimization strategies"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);