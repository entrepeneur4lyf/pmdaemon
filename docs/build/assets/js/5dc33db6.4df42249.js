"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[3299],{1784:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"features/configuration","title":"Configuration","description":"PMDaemon provides flexible configuration options that allow you to customize every aspect of process management. From basic process settings to advanced clustering and health checks, PMDaemon\'s configuration system is designed for both simplicity and power.","source":"@site/docs/features/configuration.md","sourceDirName":"features","slug":"/features/configuration","permalink":"/pmdaemon/docs/features/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/features/configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Web API","permalink":"/pmdaemon/docs/features/web-api"},"next":{"title":"CLI Commands Reference","permalink":"/pmdaemon/docs/cli/commands"}}');var i=r(4848),t=r(8453);const a={},d="Configuration",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Configuration Methods",id:"configuration-methods",level:2},{value:"1. CLI Arguments (Primary)",id:"1-cli-arguments-primary",level:3},{value:"2. Configuration Files",id:"2-configuration-files",level:3},{value:"3. Environment Variables",id:"3-environment-variables",level:3},{value:"Core Configuration Options",id:"core-configuration-options",level:2},{value:"Basic Process Settings",id:"basic-process-settings",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Resource Limits",id:"resource-limits",level:3},{value:"Port Management",id:"port-management",level:3},{value:"Process Control",id:"process-control",level:3},{value:"Logging Configuration",id:"logging-configuration",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Clustering Configuration",id:"clustering-configuration",level:3},{value:"Namespace Configuration",id:"namespace-configuration",level:3},{value:"Watch Mode (Future Feature)",id:"watch-mode-future-feature",level:3},{value:"Configuration File Formats",id:"configuration-file-formats",level:2},{value:"JSON Configuration",id:"json-configuration",level:3},{value:"YAML Configuration",id:"yaml-configuration",level:3},{value:"TOML Configuration",id:"toml-configuration",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Required Fields",id:"required-fields",level:3},{value:"Value Validation",id:"value-validation",level:3},{value:"Conflict Detection",id:"conflict-detection",level:3},{value:"Configuration Best Practices",id:"configuration-best-practices",level:2},{value:"1. Use Configuration Files for Complex Setups",id:"1-use-configuration-files-for-complex-setups",level:3},{value:"2. Set Appropriate Resource Limits",id:"2-set-appropriate-resource-limits",level:3},{value:"3. Use Health Checks for Critical Services",id:"3-use-health-checks-for-critical-services",level:3},{value:"4. Organize with Namespaces",id:"4-organize-with-namespaces",level:3},{value:"Runtime Configuration Changes",id:"runtime-configuration-changes",level:2},{value:"Temporary Overrides",id:"temporary-overrides",level:3},{value:"Permanent Changes",id:"permanent-changes",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,i.jsxs)(n.p,{children:["PMDaemon provides flexible ",(0,i.jsx)(n.strong,{children:"configuration options"})," that allow you to customize every aspect of process management. From basic process settings to advanced clustering and health checks, PMDaemon's configuration system is designed for both simplicity and power."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"PMDaemon supports configuration through:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udda5\ufe0f CLI arguments"})," - Direct command-line configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Configuration files"})," - JSON, YAML, and TOML formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udd27 Environment variables"})," - System-level configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\u2699\ufe0f Runtime overrides"})," - Temporary configuration changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf Default values"})," - Sensible defaults for all options"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,i.jsx)(n.h3,{id:"1-cli-arguments-primary",children:"1. CLI Arguments (Primary)"}),"\n",(0,i.jsx)(n.p,{children:"The most common way to configure processes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --instances 2 \\\r\n  --port 3000-3001 \\\r\n  --max-memory 512M \\\r\n  --env NODE_ENV=production \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-configuration-files",children:"2. Configuration Files"}),"\n",(0,i.jsx)(n.p,{children:"Define complex configurations in files:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ecosystem.json:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-api",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "max_memory_restart": "512M",\r\n      "env": {\r\n        "NODE_ENV": "production"\r\n      },\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 5,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ecosystem.yaml:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apps:\r\n  - name: web-api\r\n    script: node\r\n    args: [server.js]\r\n    instances: 2\r\n    port: "3000-3001"\r\n    max_memory_restart: 512M\r\n    env:\r\n      NODE_ENV: production\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:3000/health\r\n      timeout: 5\r\n      interval: 30\r\n      retries: 3\r\n      enabled: true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-environment-variables",children:"3. Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"System-level configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set default values\r\nexport PMDAEMON_DEFAULT_INSTANCES=2\r\nexport PMDAEMON_DEFAULT_MAX_MEMORY=512M\r\nexport PMDAEMON_LOG_LEVEL=info\r\n\r\n# Use in commands\r\npmdaemon start "node server.js" --name web-api\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-configuration-options",children:"Core Configuration Options"}),"\n",(0,i.jsx)(n.h3,{id:"basic-process-settings",children:"Basic Process Settings"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--name"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Unique process identifier"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Script"})}),(0,i.jsx)(n.td,{children:"First argument"}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Command or script to execute"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Arguments"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--args"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[]"})}),(0,i.jsx)(n.td,{children:"Command line arguments"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Working Directory"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--cwd"})}),(0,i.jsx)(n.td,{children:"Current dir"}),(0,i.jsx)(n.td,{children:"Process working directory"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Instances"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--instances"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})}),(0,i.jsx)(n.td,{children:"Number of process instances"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Basic configuration\r\npmdaemon start "python app.py" \\\r\n  --name python-api \\\r\n  --args "--port 8000 --workers 4" \\\r\n  --cwd /app \\\r\n  --instances 2\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Environment"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--env"})}),(0,i.jsx)(n.td,{children:"Inherited"}),(0,i.jsx)(n.td,{children:"Environment variables"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Environment File"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--env-file"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Load environment from file"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set environment variables\r\npmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --env NODE_ENV=production \\\r\n  --env DATABASE_URL=postgres://localhost/mydb \\\r\n  --env-file .env.production\n'})}),"\n",(0,i.jsx)(n.h3,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Limit"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--max-memory"})}),(0,i.jsx)(n.td,{children:"Unlimited"}),(0,i.jsx)(n.td,{children:"Memory limit before restart"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CPU Limit"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--max-cpu"})}),(0,i.jsx)(n.td,{children:"Unlimited"}),(0,i.jsx)(n.td,{children:"CPU limit (future feature)"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set resource limits\r\npmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --max-memory 1G\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Memory format examples:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"100K"})," or ",(0,i.jsx)(n.code,{children:"100KB"})," - Kilobytes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"512M"})," or ",(0,i.jsx)(n.code,{children:"512MB"})," - Megabytes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2G"})," or ",(0,i.jsx)(n.code,{children:"2GB"})," - Gigabytes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1073741824"})," - Raw bytes"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"port-management",children:"Port Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Port"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--port"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Port assignment"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Port Range"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--port"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Port range for clusters"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Auto Port"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--port"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Auto-assign from range"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Port configuration examples\r\npmdaemon start "node server.js" --port 3000                    # Single port\r\npmdaemon start "node server.js" --instances 4 --port 3000-3003 # Port range\r\npmdaemon start "node server.js" --instances 3 --port auto:5000-5100 # Auto-assign\n'})}),"\n",(0,i.jsx)(n.h3,{id:"process-control",children:"Process Control"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Auto Restart"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--autorestart"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"true"})}),(0,i.jsx)(n.td,{children:"Restart on crash"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Max Restarts"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--max-restarts"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"16"})}),(0,i.jsx)(n.td,{children:"Maximum restart attempts"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Min Uptime"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--min-uptime"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1000ms"})}),(0,i.jsx)(n.td,{children:"Minimum uptime before stable"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Restart Delay"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--restart-delay"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"0ms"})}),(0,i.jsx)(n.td,{children:"Delay between restarts"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Kill Timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--kill-timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1600ms"})}),(0,i.jsx)(n.td,{children:"Graceful shutdown timeout"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Process control configuration\r\npmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --autorestart true \\\r\n  --max-restarts 10 \\\r\n  --min-uptime 5s \\\r\n  --restart-delay 1s \\\r\n  --kill-timeout 30s\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logging-configuration",children:"Logging Configuration"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Output File"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--out-file"})}),(0,i.jsx)(n.td,{children:"Auto-generated"}),(0,i.jsx)(n.td,{children:"Stdout log file"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Error File"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--error-file"})}),(0,i.jsx)(n.td,{children:"Auto-generated"}),(0,i.jsx)(n.td,{children:"Stderr log file"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Log File"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--log-file"})}),(0,i.jsx)(n.td,{children:"Auto-generated"}),(0,i.jsx)(n.td,{children:"Combined log file"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PID File"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--pid-file"})}),(0,i.jsx)(n.td,{children:"Auto-generated"}),(0,i.jsx)(n.td,{children:"Process ID file"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Logging configuration\r\npmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --out-file /var/log/web-api.out \\\r\n  --error-file /var/log/web-api.err \\\r\n  --pid-file /var/run/web-api.pid\n'})}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"CLI Flag"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Health Check URL"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--health-check-url"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"HTTP health check endpoint"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Health Check Script"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--health-check-script"})}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Script-based health check"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Health Check Timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--health-check-timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"30s"})}),(0,i.jsx)(n.td,{children:"Health check timeout"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Health Check Interval"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--health-check-interval"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"60s"})}),(0,i.jsx)(n.td,{children:"Health check frequency"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Health Check Retries"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--health-check-retries"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"3"})}),(0,i.jsx)(n.td,{children:"Retries before failure"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Wait Ready"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--wait-ready"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{children:"Block start until healthy"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Wait Timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--wait-timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"30s"})}),(0,i.jsx)(n.td,{children:"Blocking start timeout"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Health check configuration\r\npmdaemon start "node api.js" \\\r\n  --name api-service \\\r\n  --port 3000 \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-timeout 10s \\\r\n  --health-check-interval 30s \\\r\n  --health-check-retries 5 \\\r\n  --wait-ready \\\r\n  --wait-timeout 60s\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"clustering-configuration",children:"Clustering Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Advanced clustering setup\r\npmdaemon start "node server.js" \\\r\n  --name web-cluster \\\r\n  --instances 4 \\\r\n  --port 3000-3003 \\\r\n  --exec-mode cluster \\\r\n  --instance-var INSTANCE_ID \\\r\n  --merge-logs true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"namespace-configuration",children:"Namespace Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Organize processes by namespace\r\npmdaemon start "node api.js" \\\r\n  --name api \\\r\n  --namespace production\r\n\r\npmdaemon start "node worker.js" \\\r\n  --name worker \\\r\n  --namespace production\r\n\r\n# List processes by namespace\r\npmdaemon list --namespace production\n'})}),"\n",(0,i.jsx)(n.h3,{id:"watch-mode-future-feature",children:"Watch Mode (Future Feature)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# File watching for auto-restart\r\npmdaemon start "node server.js" \\\r\n  --name dev-server \\\r\n  --watch true \\\r\n  --watch-delay 1000 \\\r\n  --ignore-watch "node_modules logs *.log"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-file-formats",children:"Configuration File Formats"}),"\n",(0,i.jsx)(n.h3,{id:"json-configuration",children:"JSON Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "web-api",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "instances": 2,\r\n      "port": "3000-3001",\r\n      "cwd": "/app",\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "PORT": "3000"\r\n      },\r\n      "max_memory_restart": "512M",\r\n      "autorestart": true,\r\n      "max_restarts": 10,\r\n      "min_uptime": "5s",\r\n      "health_check": {\r\n        "check_type": "http",\r\n        "url": "http://localhost:3000/health",\r\n        "timeout": 10,\r\n        "interval": 30,\r\n        "retries": 3,\r\n        "enabled": true\r\n      },\r\n      "log": {\r\n        "out_file": "/var/log/web-api.out",\r\n        "error_file": "/var/log/web-api.err",\r\n        "pid_file": "/var/run/web-api.pid"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"yaml-configuration",children:"YAML Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apps:\r\n  - name: web-api\r\n    script: node\r\n    args: [server.js]\r\n    instances: 2\r\n    port: "3000-3001"\r\n    cwd: /app\r\n    env:\r\n      NODE_ENV: production\r\n      PORT: "3000"\r\n    max_memory_restart: 512M\r\n    autorestart: true\r\n    max_restarts: 10\r\n    min_uptime: 5s\r\n    health_check:\r\n      check_type: http\r\n      url: http://localhost:3000/health\r\n      timeout: 10\r\n      interval: 30\r\n      retries: 3\r\n      enabled: true\r\n    log:\r\n      out_file: /var/log/web-api.out\r\n      error_file: /var/log/web-api.err\r\n      pid_file: /var/run/web-api.pid\n'})}),"\n",(0,i.jsx)(n.h3,{id:"toml-configuration",children:"TOML Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[[apps]]\r\nname = "web-api"\r\nscript = "node"\r\nargs = ["server.js"]\r\ninstances = 2\r\nport = "3000-3001"\r\ncwd = "/app"\r\nmax_memory_restart = "512M"\r\nautorestart = true\r\nmax_restarts = 10\r\nmin_uptime = "5s"\r\n\r\n[apps.env]\r\nNODE_ENV = "production"\r\nPORT = "3000"\r\n\r\n[apps.health_check]\r\ncheck_type = "http"\r\nurl = "http://localhost:3000/health"\r\ntimeout = 10\r\ninterval = 30\r\nretries = 3\r\nenabled = true\r\n\r\n[apps.log]\r\nout_file = "/var/log/web-api.out"\r\nerror_file = "/var/log/web-api.err"\r\npid_file = "/var/run/web-api.pid"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,i.jsx)(n.p,{children:"PMDaemon validates all configuration options:"}),"\n",(0,i.jsx)(n.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Error: Missing required fields\r\npmdaemon start --name web-api\r\n# Error: Script is required\r\n\r\npmdaemon start "node server.js"\r\n# Error: Name is required\n'})}),"\n",(0,i.jsx)(n.h3,{id:"value-validation",children:"Value Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Error: Invalid memory format\r\npmdaemon start \"node server.js\" --name web-api --max-memory \"invalid\"\r\n# Error: Invalid memory format 'invalid'. Use formats like '512M', '1G', etc.\r\n\r\n# Error: Invalid port range\r\npmdaemon start \"node server.js\" --name web-api --instances 4 --port 3000-3001\r\n# Error: Port range 3000-3001 has only 2 ports but 4 instances requested\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conflict-detection",children:"Conflict Detection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Error: Name conflict\r\npmdaemon start "node server.js" --name web-api\r\npmdaemon start "python app.py" --name web-api\r\n# Error: Process with name \'web-api\' already exists\r\n\r\n# Error: Port conflict\r\npmdaemon start "node server.js" --name api1 --port 3000\r\npmdaemon start "python app.py" --name api2 --port 3000\r\n# Error: Port 3000 is already assigned to process \'api1\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-best-practices",children:"Configuration Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-use-configuration-files-for-complex-setups",children:"1. Use Configuration Files for Complex Setups"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Good: Use config file for multiple processes\r\npmdaemon --config ecosystem.json start\r\n\r\n# Avoid: Long CLI commands\r\npmdaemon start "node server.js" --name web-api --instances 4 --port 3000-3003 --max-memory 512M --env NODE_ENV=production --health-check-url http://localhost:3000/health --wait-ready\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-set-appropriate-resource-limits",children:"2. Set Appropriate Resource Limits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Good: Set memory limits\r\npmdaemon start "node server.js" --name web-api --max-memory 512M\r\n\r\n# Avoid: No limits (can cause system issues)\r\npmdaemon start "node server.js" --name web-api\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-use-health-checks-for-critical-services",children:"3. Use Health Checks for Critical Services"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Good: Health checks for web services\r\npmdaemon start "node api.js" \\\r\n  --name api \\\r\n  --health-check-url http://localhost:3000/health\r\n\r\n# Good: Script checks for workers\r\npmdaemon start "python worker.py" \\\r\n  --name worker \\\r\n  --health-check-script ./health-check.sh\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-organize-with-namespaces",children:"4. Organize with Namespaces"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Good: Use namespaces for organization\r\npmdaemon start "node api.js" --name api --namespace production\r\npmdaemon start "node worker.js" --name worker --namespace production\r\n\r\n# List by namespace\r\npmdaemon list --namespace production\n'})}),"\n",(0,i.jsx)(n.h2,{id:"runtime-configuration-changes",children:"Runtime Configuration Changes"}),"\n",(0,i.jsx)(n.h3,{id:"temporary-overrides",children:"Temporary Overrides"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start with default configuration\r\npmdaemon start "node server.js" --name web-api --port 3000\r\n\r\n# Restart with temporary port override\r\npmdaemon restart web-api --port 3001\r\n\r\n# Configuration file still shows port 3000, but process runs on 3001\n'})}),"\n",(0,i.jsx)(n.h3,{id:"permanent-changes",children:"Permanent Changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# To permanently change configuration, delete and recreate\r\npmdaemon delete web-api\r\npmdaemon start "node server.js" --name web-api --port 3001\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/configuration/process-configuration",children:"Process Configuration"})})," - Detailed process options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/configuration/advanced-configuration",children:"Advanced Configuration"})})," - Complex scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/configuration/schema-validation",children:"Schema Validation"})})," - Configuration validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Examples"})})," - Real-world configurations"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);