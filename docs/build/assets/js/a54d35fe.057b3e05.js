"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[710],{5835:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/websocket-api","title":"WebSocket API","description":"PMDaemon\'s WebSocket API provides real-time communication for monitoring process status, receiving live updates, and managing processes interactively. Built for high performance and low latency, it\'s perfect for dashboards, monitoring tools, and real-time applications.","source":"@site/docs/api/websocket-api.md","sourceDirName":"api","slug":"/api/websocket-api","permalink":"/pmdaemon/docs/api/websocket-api","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/api/websocket-api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"REST API Reference","permalink":"/pmdaemon/docs/api/rest-api"},"next":{"title":"Library Usage","permalink":"/pmdaemon/docs/api/library-usage"}}');var r=s(4848),c=s(8453);const i={},a="WebSocket API",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Connection",id:"connection",level:2},{value:"Basic Connection",id:"basic-connection",level:3},{value:"Connection with Authentication (Future)",id:"connection-with-authentication-future",level:3},{value:"Message Format",id:"message-format",level:2},{value:"Incoming Message Types",id:"incoming-message-types",level:2},{value:"Process Status Updates",id:"process-status-updates",level:3},{value:"Process Metrics Updates",id:"process-metrics-updates",level:3},{value:"System Metrics Updates",id:"system-metrics-updates",level:3},{value:"Health Check Updates",id:"health-check-updates",level:3},{value:"Process Events",id:"process-events",level:3},{value:"Log Messages",id:"log-messages",level:3},{value:"Outgoing Message Types",id:"outgoing-message-types",level:2},{value:"Subscribe to Events",id:"subscribe-to-events",level:3},{value:"Unsubscribe from Events",id:"unsubscribe-from-events",level:3},{value:"Process Commands",id:"process-commands",level:3},{value:"Request Process Information",id:"request-process-information",level:3},{value:"Request System Information",id:"request-system-information",level:3},{value:"Client Examples",id:"client-examples",level:2},{value:"JavaScript/Browser",id:"javascriptbrowser",level:3},{value:"Node.js",id:"nodejs",level:3},{value:"Python",id:"python",level:3},{value:"Real-time Dashboard Example",id:"real-time-dashboard-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Handle Connection Failures",id:"1-handle-connection-failures",level:3},{value:"2. Efficient Event Filtering",id:"2-efficient-event-filtering",level:3},{value:"3. Message Queuing",id:"3-message-queuing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"websocket-api",children:"WebSocket API"})}),"\n",(0,r.jsxs)(n.p,{children:["PMDaemon's ",(0,r.jsx)(n.strong,{children:"WebSocket API"})," provides real-time communication for monitoring process status, receiving live updates, and managing processes interactively. Built for high performance and low latency, it's perfect for dashboards, monitoring tools, and real-time applications."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The WebSocket API offers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\u26a1 Real-time updates"})," - Instant process status changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udcca Live metrics"})," - CPU, memory, and system metrics streaming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udd04 Bidirectional communication"})," - Send commands and receive responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udcf1 Multiple clients"})," - Support for concurrent connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83c\udfaf Event filtering"})," - Subscribe to specific event types"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,r.jsx)(n.h3,{id:"basic-connection",children:"Basic Connection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const ws = new WebSocket('ws://localhost:9615/ws');\n\nws.onopen = function() {\n    console.log('Connected to PMDaemon WebSocket');\n};\n\nws.onmessage = function(event) {\n    const data = JSON.parse(event.data);\n    console.log('Received:', data);\n};\n\nws.onclose = function() {\n    console.log('WebSocket connection closed');\n};\n\nws.onerror = function(error) {\n    console.error('WebSocket error:', error);\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"connection-with-authentication-future",children:"Connection with Authentication (Future)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const ws = new WebSocket('ws://localhost:9615/ws', {\n    headers: {\n        'Authorization': 'Bearer your-jwt-token' // Node only\n    }\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"message-format",children:"Message Format"}),"\n",(0,r.jsx)(n.p,{children:"All WebSocket messages use JSON format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "message_type",\n  "data": {\n    // Message-specific data\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z",\n  "id": "unique-message-id"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"incoming-message-types",children:"Incoming Message Types"}),"\n",(0,r.jsx)(n.h3,{id:"process-status-updates",children:"Process Status Updates"}),"\n",(0,r.jsx)(n.p,{children:"Sent when process status changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "process_status",\n  "data": {\n    "id": 0,\n    "name": "web-api",\n    "status": "online",\n    "pid": 1234,\n    "port": 3000,\n    "previous_status": "starting"\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Status values:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"starting"})," - Process is starting up"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"online"})," - Process running normally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stopping"})," - Process shutting down"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stopped"})," - Process not running"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"errored"})," - Process crashed or failed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"restarting"})," - Process restarting"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"process-metrics-updates",children:"Process Metrics Updates"}),"\n",(0,r.jsx)(n.p,{children:"Real-time metrics for all processes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "process_metrics",\n  "data": {\n    "processes": [\n      {\n        "id": 0,\n        "name": "web-api",\n        "cpu": 2.5,\n        "memory": 47185920,\n        "uptime": 7890000,\n        "restarts": 0\n      },\n      {\n        "id": 1,\n        "name": "worker",\n        "cpu": 1.2,\n        "memory": 32145920,\n        "uptime": 5430000,\n        "restarts": 1\n      }\n    ]\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"system-metrics-updates",children:"System Metrics Updates"}),"\n",(0,r.jsx)(n.p,{children:"System-wide performance metrics:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "system_metrics",\n  "data": {\n    "cpu": {\n      "usage": 15.2,\n      "cores": 8\n    },\n    "memory": {\n      "total": 8589934592,\n      "used": 2147483648,\n      "available": 6442450944,\n      "usage_percent": 25.0\n    },\n    "load": {\n      "one": 0.85,\n      "five": 1.2,\n      "fifteen": 0.9\n    }\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"health-check-updates",children:"Health Check Updates"}),"\n",(0,r.jsx)(n.p,{children:"Health status changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "health_update",\n  "data": {\n    "process": "web-api",\n    "status": "healthy",\n    "previous_status": "unhealthy",\n    "check_type": "http",\n    "details": {\n      "url": "http://localhost:3000/health",\n      "response_time": 45,\n      "status_code": 200\n    }\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"process-events",children:"Process Events"}),"\n",(0,r.jsx)(n.p,{children:"Lifecycle events for processes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "process_event",\n  "data": {\n    "event": "started",\n    "process": "new-api",\n    "details": {\n      "pid": 5678,\n      "port": 3001,\n      "startup_time": 1250\n    }\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"started"})," - Process successfully started"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stopped"})," - Process stopped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"crashed"})," - Process crashed unexpectedly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"restarted"})," - Process restarted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"health_check_failed"})," - Health check failed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"memory_limit_exceeded"})," - Memory limit reached"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"log-messages",children:"Log Messages"}),"\n",(0,r.jsx)(n.p,{children:"Real-time log streaming:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "log_message",\n  "data": {\n    "process": "web-api",\n    "instance": 0,\n    "level": "info",\n    "message": "Server started on port 3000",\n    "stream": "stdout"\n  },\n  "timestamp": "2024-01-15T14:30:25.123Z"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"outgoing-message-types",children:"Outgoing Message Types"}),"\n",(0,r.jsx)(n.h3,{id:"subscribe-to-events",children:"Subscribe to Events"}),"\n",(0,r.jsx)(n.p,{children:"Subscribe to specific event types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "subscribe",\n  "data": {\n    "events": ["process_status", "process_metrics"],\n    "processes": ["web-api", "worker"],\n    "interval": 1000\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Subscription options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"events"})," - Array of event types to receive"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"processes"})," - Array of process names (optional, defaults to all)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"interval"})," - Update interval in milliseconds (for metrics)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"unsubscribe-from-events",children:"Unsubscribe from Events"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "unsubscribe",\n  "data": {\n    "events": ["system_metrics"]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"process-commands",children:"Process Commands"}),"\n",(0,r.jsx)(n.p,{children:"Send process management commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "command",\n  "data": {\n    "action": "start",\n    "process": "new-service",\n    "config": {\n      "script": "node",\n      "args": ["server.js"],\n      "port": "3002"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available actions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"start"})," - Start a new process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stop"})," - Stop a process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"restart"})," - Restart a process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"delete"})," - Delete a process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"reload"})," - Reload process configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"request-process-information",children:"Request Process Information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "get_info",\n  "data": {\n    "process": "web-api"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"request-system-information",children:"Request System Information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "get_system",\n  "data": {}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"client-examples",children:"Client Examples"}),"\n",(0,r.jsx)(n.h3,{id:"javascriptbrowser",children:"JavaScript/Browser"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class PMDaemonWebSocket {\n  constructor(url = 'ws://localhost:9615/ws') {\n    this.url = url;\n    this.ws = null;\n    this.listeners = new Map();\n  }\n\n  connect() {\n    this.ws = new WebSocket(this.url);\n    \n    this.ws.onopen = () => {\n      console.log('Connected to PMDaemon');\n      this.emit('connected');\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.emit(message.type, message.data);\n    };\n\n    this.ws.onclose = () => {\n      console.log('Disconnected from PMDaemon');\n      this.emit('disconnected');\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    };\n  }\n\n  subscribe(events, processes = null, interval = 1000) {\n    this.send('subscribe', {\n      events,\n      processes,\n      interval\n    });\n  }\n\n  startProcess(name, config) {\n    this.send('command', {\n      action: 'start',\n      process: name,\n      config\n    });\n  }\n\n  // Note: WebSocket API is read-only for security\n  // Use REST API for process management commands\n\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Usage\nconst pmdaemon = new PMDaemonWebSocket();\n\npmdaemon.on('connected', () => {\n  // Subscribe to process status and metrics\n  pmdaemon.subscribe(['process_status', 'process_metrics']);\n});\n\npmdaemon.on('process_status', (data) => {\n  console.log(`Process ${data.name} is now ${data.status}`);\n});\n\npmdaemon.on('process_metrics', (data) => {\n  data.processes.forEach(process => {\n    console.log(`${process.name}: CPU ${process.cpu}%, Memory ${process.memory}`);\n  });\n});\n\npmdaemon.connect();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nodejs",children:"Node.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const WebSocket = require('ws');\n\nclass PMDaemonClient {\n  constructor(url = 'ws://localhost:9615/ws') {\n    this.url = url;\n    this.ws = null;\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.on('open', () => {\n        console.log('Connected to PMDaemon');\n        resolve();\n      });\n\n      this.ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        this.handleMessage(message);\n      });\n\n      this.ws.on('close', () => {\n        console.log('Disconnected from PMDaemon');\n      });\n\n      this.ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      });\n    });\n  }\n\n  handleMessage(message) {\n    switch (message.type) {\n      case 'process_status':\n        console.log(`Process ${message.data.name} status: ${message.data.status}`);\n        break;\n      case 'process_metrics':\n        this.updateMetrics(message.data.processes);\n        break;\n      case 'system_metrics':\n        this.updateSystemMetrics(message.data);\n        break;\n    }\n  }\n\n  subscribe(events, processes = null) {\n    this.send('subscribe', { events, processes });\n  }\n\n  send(type, data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type, data }));\n    }\n  }\n}\n\n// Usage\nasync function main() {\n  const client = new PMDaemonClient();\n  await client.connect();\n  \n  // Subscribe to all events\n  client.subscribe(['process_status', 'process_metrics', 'system_metrics']);\n}\n\nmain().catch(console.error);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nimport websockets\nimport json\n\nclass PMDaemonClient:\n    def __init__(self, url=\"ws://localhost:9615/ws\"):\n        self.url = url\n        self.websocket = None\n\n    async def connect(self):\n        self.websocket = await websockets.connect(self.url)\n        print(\"Connected to PMDaemon\")\n\n    async def listen(self):\n        async for message in self.websocket:\n            data = json.loads(message)\n            await self.handle_message(data)\n\n    async def handle_message(self, message):\n        msg_type = message.get('type')\n        data = message.get('data')\n        \n        if msg_type == 'process_status':\n            print(f\"Process {data['name']} status: {data['status']}\")\n        elif msg_type == 'process_metrics':\n            for process in data['processes']:\n                print(f\"{process['name']}: CPU {process['cpu']}%, Memory {process['memory']}\")\n        elif msg_type == 'system_metrics':\n            cpu = data['cpu']['usage']\n            memory = data['memory']['usage_percent']\n            print(f\"System: CPU {cpu}%, Memory {memory}%\")\n\n    async def subscribe(self, events, processes=None):\n        message = {\n            'type': 'subscribe',\n            'data': {\n                'events': events,\n                'processes': processes\n            }\n        }\n        await self.websocket.send(json.dumps(message))\n\n    async def start_process(self, name, config):\n        message = {\n            'type': 'command',\n            'data': {\n                'action': 'start',\n                'process': name,\n                'config': config\n            }\n        }\n        await self.websocket.send(json.dumps(message))\n\n# Usage\nasync def main():\n    client = PMDaemonClient()\n    await client.connect()\n    \n    # Subscribe to events\n    await client.subscribe(['process_status', 'process_metrics'])\n    \n    # Listen for messages\n    await client.listen()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"})}),"\n",(0,r.jsx)(n.h2,{id:"real-time-dashboard-example",children:"Real-time Dashboard Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html>\n<head>\n    <title>PMDaemon Dashboard</title>\n    <style>\n        .process { margin: 10px; padding: 10px; border: 1px solid #ccc; }\n        .online { background-color: #d4edda; }\n        .stopped { background-color: #f8d7da; }\n        .starting { background-color: #fff3cd; }\n    </style>\n</head>\n<body>\n    <h1>PMDaemon Real-time Dashboard</h1>\n    <div id=\"processes\"></div>\n    <div id=\"system-metrics\"></div>\n\n    <script>\n        const ws = new WebSocket('ws://localhost:9615/ws');\n        const processesDiv = document.getElementById('processes');\n        const systemDiv = document.getElementById('system-metrics');\n\n        ws.onopen = function() {\n            // Subscribe to all updates\n            ws.send(JSON.stringify({\n                type: 'subscribe',\n                data: {\n                    events: ['process_status', 'process_metrics', 'system_metrics'],\n                    interval: 1000\n                }\n            }));\n        };\n\n        ws.onmessage = function(event) {\n            const message = JSON.parse(event.data);\n            \n            switch (message.type) {\n                case 'process_metrics':\n                    updateProcesses(message.data.processes);\n                    break;\n                case 'system_metrics':\n                    updateSystemMetrics(message.data);\n                    break;\n            }\n        };\n\n        function updateProcesses(processes) {\n            processesDiv.innerHTML = processes.map(process => `\n                <div class=\"process ${process.status}\">\n                    <h3>${process.name}</h3>\n                    <p>Status: ${process.status}</p>\n                    <p>CPU: ${process.cpu}%</p>\n                    <p>Memory: ${(process.memory / 1024 / 1024).toFixed(1)}MB</p>\n                    <p>Uptime: ${Math.floor(process.uptime / 1000)}s</p>\n                </div>\n            `).join('');\n        }\n\n        function updateSystemMetrics(metrics) {\n            systemDiv.innerHTML = `\n                <h3>System Metrics</h3>\n                <p>CPU: ${metrics.cpu.usage}%</p>\n                <p>Memory: ${metrics.memory.usage_percent}%</p>\n                <p>Load: ${metrics.load.one}</p>\n            `;\n        }\n    <\/script>\n</body>\n</html>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-handle-connection-failures",children:"1. Handle Connection Failures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class RobustPMDaemonClient {\n  constructor(url) {\n    this.url = url;\n    this.reconnectInterval = 5000;\n    this.maxReconnectAttempts = 10;\n    this.reconnectAttempts = 0;\n  }\n\n  connect() {\n    this.ws = new WebSocket(this.url);\n    \n    this.ws.onopen = () => {\n      this.reconnectAttempts = 0;\n      this.onConnected();\n    };\n\n    this.ws.onclose = () => {\n      this.reconnect();\n    };\n  }\n\n  reconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => this.connect(), this.reconnectInterval);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-efficient-event-filtering",children:"2. Efficient Event Filtering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Subscribe only to needed events\nws.send(JSON.stringify({\n  type: 'subscribe',\n  data: {\n    events: ['process_status'],  // Only status changes\n    processes: ['critical-service'],  // Only critical processes\n    interval: 5000  // Less frequent updates\n  }\n}));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-message-queuing",children:"3. Message Queuing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class QueuedWebSocket {\n  constructor(url) {\n    this.url = url;\n    this.messageQueue = [];\n    this.connected = false;\n  }\n\n  send(message) {\n    if (this.connected) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  onConnected() {\n    this.connected = true;\n    // Send queued messages\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/api/rest-api",children:"REST API"})})," - HTTP API reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/api/api-examples",children:"API Examples"})})," - More client examples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/api/library-usage",children:"Library Usage"})})," - Using PMDaemon as a library"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/pmdaemon/docs/examples/integration-examples",children:"Integration Examples"})})," - Framework integration"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const r={},c=t.createContext(r);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);