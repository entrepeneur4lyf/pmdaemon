"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[9317],{4100:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"features/load-balancing","title":"Clustering & Process Distribution","description":"PMDaemon provides clustering capabilities that allow you to run multiple instances of your application for improved performance and reliability. While PMDaemon handles process management and port distribution, external load balancing is handled by reverse proxies or load balancers.","source":"@site/docs/features/load-balancing.md","sourceDirName":"features","slug":"/features/load-balancing","permalink":"/pmdaemon/docs/features/load-balancing","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/features/load-balancing.md","tags":[],"version":"current","frontMatter":{}}');var a=s(4848),i=s(8453);const t={},l="Clustering & Process Distribution",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Clustering Configuration",id:"clustering-configuration",level:2},{value:"Basic Clustering",id:"basic-clustering",level:3},{value:"Port Distribution",id:"port-distribution",level:3},{value:"Auto Port Assignment",id:"auto-port-assignment",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Cluster Management",id:"cluster-management",level:2},{value:"Start All Instances",id:"start-all-instances",level:3},{value:"Individual Instance Control",id:"individual-instance-control",level:3},{value:"Cluster-wide Operations",id:"cluster-wide-operations",level:3},{value:"Load Balancing with External Tools",id:"load-balancing-with-external-tools",level:2},{value:"Nginx Configuration",id:"nginx-configuration",level:3},{value:"HAProxy Configuration",id:"haproxy-configuration",level:3},{value:"Node.js Cluster Integration",id:"nodejs-cluster-integration",level:3},{value:"Monitoring Clusters",id:"monitoring-clusters",level:2},{value:"Process List View",id:"process-list-view",level:3},{value:"Real-time Monitoring",id:"real-time-monitoring",level:3},{value:"API Access",id:"api-access",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Instance Count",id:"1-instance-count",level:3},{value:"2. Resource Limits",id:"2-resource-limits",level:3},{value:"3. Health Checks",id:"3-health-checks",level:3},{value:"4. Graceful Shutdowns",id:"4-graceful-shutdowns",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Port Conflicts",id:"port-conflicts",level:3},{value:"Instance Failures",id:"instance-failures",level:3},{value:"Memory Issues",id:"memory-issues",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Kubernetes",id:"kubernetes",level:3},{value:"Future Roadmap",id:"future-roadmap",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"clustering--process-distribution",children:"Clustering & Process Distribution"})}),"\n",(0,a.jsxs)(n.p,{children:["PMDaemon provides ",(0,a.jsx)(n.strong,{children:"clustering capabilities"})," that allow you to run multiple instances of your application for improved performance and reliability. While PMDaemon handles process management and port distribution, external load balancing is handled by reverse proxies or load balancers."]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"PMDaemon's clustering features include:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\ude80 Multiple Process Instances"})," - Run N copies of your application"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\udd0c Automatic Port Distribution"})," - Each instance gets its own port"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\udcca Process Management"})," - Start, stop, restart all instances together"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\udcbe Shared Configuration"})," - Single config manages all instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\udd04 Individual Instance Control"})," - Manage instances independently"]}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," PMDaemon focuses on ",(0,a.jsx)(n.strong,{children:"process management"})," rather than traffic load balancing. For HTTP/TCP load balancing, use a reverse proxy like Nginx, HAProxy, or a cloud load balancer."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"clustering-configuration",children:"Clustering Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"basic-clustering",children:"Basic Clustering"}),"\n",(0,a.jsx)(n.p,{children:"Run multiple instances of the same application:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# CLI - Start 4 instances\npmdaemon start "node server.js" --name web-app --instances 4\n\n# Each instance will be named: web-app-0, web-app-1, web-app-2, web-app-3\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "web-app",\n  "script": "node",\n  "args": ["server.js"],\n  "instances": 4,\n  "exec_mode": "cluster"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"port-distribution",children:"Port Distribution"}),"\n",(0,a.jsx)(n.p,{children:"PMDaemon automatically assigns ports to cluster instances:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "api-cluster",\n  "script": "node",\n  "args": ["api.js"],\n  "instances": 3,\n  "port": "3000-3002"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Result:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"api-cluster-0"})," \u2192 Port 3000"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"api-cluster-1"})," \u2192 Port 3001"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"api-cluster-2"})," \u2192 Port 3002"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"auto-port-assignment",children:"Auto Port Assignment"}),"\n",(0,a.jsx)(n.p,{children:"Let PMDaemon find available ports automatically:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "worker-cluster",\n  "script": "python",\n  "args": ["worker.py"],\n  "instances": 5,\n  "port": "auto:8000-8100"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"PMDaemon will assign the first 5 available ports in the range 8000-8100."}),"\n",(0,a.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(n.p,{children:"Each cluster instance receives automatic environment variables:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"PORT"})})," - The assigned port number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"PM2_INSTANCE_ID"})})," - Instance number (0, 1, 2, ...)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"NODE_APP_INSTANCE"})})," - Node.js compatible instance ID"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// In your application\nconst port = process.env.PORT || 3000;\nconst instanceId = process.env.PM2_INSTANCE_ID || 0;\n\nconsole.log(`Instance ${instanceId} starting on port ${port}`);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cluster-management",children:"Cluster Management"}),"\n",(0,a.jsx)(n.h3,{id:"start-all-instances",children:"Start All Instances"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pmdaemon start ecosystem.json  # Starts all configured instances\n"})}),"\n",(0,a.jsx)(n.h3,{id:"individual-instance-control",children:"Individual Instance Control"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Stop specific instance\npmdaemon stop web-app-1\n\n# Restart specific instance  \npmdaemon restart web-app-2\n\n# View all instances\npmdaemon list\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cluster-wide-operations",children:"Cluster-wide Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Stop all instances of an app\npmdaemon stop web-app\n\n# Restart entire cluster\npmdaemon restart web-app\n\n# Delete cluster\npmdaemon delete web-app\n"})}),"\n",(0,a.jsx)(n.h2,{id:"load-balancing-with-external-tools",children:"Load Balancing with External Tools"}),"\n",(0,a.jsxs)(n.p,{children:["Since PMDaemon handles ",(0,a.jsx)(n.strong,{children:"process management"}),", use these tools for ",(0,a.jsx)(n.strong,{children:"traffic load balancing"}),":"]}),"\n",(0,a.jsx)(n.h3,{id:"nginx-configuration",children:"Nginx Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-nginx",children:"upstream app_backend {\n    server 127.0.0.1:3000;\n    server 127.0.0.1:3001;\n    server 127.0.0.1:3002;\n    server 127.0.0.1:3003;\n}\n\nserver {\n    listen 80;\n    server_name example.com;\n    \n    location / {\n        proxy_pass http://app_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"haproxy-configuration",children:"HAProxy Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"backend app_servers\n    balance roundrobin\n    server app1 127.0.0.1:3000 check\n    server app2 127.0.0.1:3001 check\n    server app3 127.0.0.1:3002 check\n    server app4 127.0.0.1:3003 check\n\nfrontend app_frontend\n    bind *:80\n    default_backend app_servers\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nodejs-cluster-integration",children:"Node.js Cluster Integration"}),"\n",(0,a.jsx)(n.p,{children:"For Node.js applications, you can combine PMDaemon clustering with Node's built-in cluster module:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// server.js\nconst cluster = require('cluster');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster && process.env.PM2_INSTANCE_ID === '0') {\n    // Only fork from the first PMDaemon instance\n    for (let i = 0; i < numCPUs; i++) {\n        cluster.fork();\n    }\n} else {\n    // Worker process or other PMDaemon instances\n    require('./app.js');\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-clusters",children:"Monitoring Clusters"}),"\n",(0,a.jsx)(n.h3,{id:"process-list-view",children:"Process List View"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pmdaemon list\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u2502 ID \u2502 Name        \u2502 Status \u2502 PID   \u2502 Port \u2502 CPU (%) \u2502 Memory   \u2502 Uptime  \u2502 Restarts \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1  \u2502 web-app-0   \u2502 online \u2502 1234  \u2502 3000 \u2502 15.2    \u2502 125.4MB  \u2502 2h 15m  \u2502 0        \u2502\n\u2502 2  \u2502 web-app-1   \u2502 online \u2502 1235  \u2502 3001 \u2502 12.8    \u2502 118.7MB  \u2502 2h 15m  \u2502 0        \u2502\n\u2502 3  \u2502 web-app-2   \u2502 online \u2502 1236  \u2502 3002 \u2502 18.5    \u2502 132.1MB  \u2502 2h 15m  \u2502 0        \u2502\n\u2502 4  \u2502 web-app-3   \u2502 online \u2502 1237  \u2502 3003 \u2502 14.1    \u2502 127.9MB  \u2502 2h 15m  \u2502 0        \u2502\n"})}),"\n",(0,a.jsx)(n.h3,{id:"real-time-monitoring",children:"Real-time Monitoring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pmdaemon monit --interval 2\n"})}),"\n",(0,a.jsx)(n.p,{children:"Monitor all cluster instances with real-time CPU, memory, and status updates."}),"\n",(0,a.jsx)(n.h3,{id:"api-access",children:"API Access"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# List all instances via API\ncurl http://localhost:9615/api/processes\n\n# Get specific instance\ncurl http://localhost:9615/api/processes/web-app-1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-instance-count",children:"1. Instance Count"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Match CPU cores for CPU-bound apps\npmdaemon start "node cpu-heavy.js" --instances $(nproc)\n\n# Use fewer instances for I/O-bound apps\npmdaemon start "node io-app.js" --instances 2\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-resource-limits",children:"2. Resource Limits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "memory-limited-cluster",\n  "script": "node",\n  "args": ["app.js"],\n  "instances": 4,\n  "max_memory_restart": "512M",\n  "port": "auto:4000-4100"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-health-checks",children:"3. Health Checks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "health-checked-cluster",\n  "script": "node",\n  "args": ["server.js"],\n  "instances": 3,\n  "port": "5000-5002",\n  "health_check": {\n    "check_type": "http",\n    "url": "http://localhost:{PORT}/health",\n    "timeout": 5,\n    "interval": 30,\n    "retries": 3,\n    "enabled": true\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-graceful-shutdowns",children:"4. Graceful Shutdowns"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "graceful-cluster",\n  "script": "node",\n  "args": ["app.js"],\n  "instances": 4,\n  "kill_timeout": 5000,\n  "restart_delay": 1000\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Check port allocation\npmdaemon list\n\n# Use auto-assignment to avoid conflicts\n# Change from: "port": "3000-3003"\n# To: "port": "auto:3000-3100"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"instance-failures",children:"Instance Failures"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check logs for failed instances\npmdaemon logs web-app-1 --lines 50\n\n# Restart individual instances\npmdaemon restart web-app-1\n"})}),"\n",(0,a.jsx)(n.h3,{id:"memory-issues",children:"Memory Issues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Monitor memory usage\npmdaemon monit\n\n# Set memory limits\npmdaemon start "node app.js" --max-memory 256M --instances 4\n'})}),"\n",(0,a.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,a.jsx)(n.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\nservices:\n  app:\n    build: .\n    command: pmdaemon start ecosystem.json\n    ports:\n      - "3000-3003:3000-3003"\n    environment:\n      - NODE_ENV=production\n  \n  nginx:\n    image: nginx\n    ports:\n      - "80:80"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n      - app\n'})}),"\n",(0,a.jsx)(n.h3,{id:"kubernetes",children:"Kubernetes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pmdaemon-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pmdaemon-app\n  template:\n    metadata:\n      labels:\n        app: pmdaemon-app\n    spec:\n      containers:\n      - name: app\n        image: my-app:latest\n        command: ["pmdaemon", "start", "ecosystem.json"]\n        ports:\n        - containerPort: 3000\n        - containerPort: 3001\n        - containerPort: 3002\n        - containerPort: 3003\n'})}),"\n",(0,a.jsx)(n.h2,{id:"future-roadmap",children:"Future Roadmap"}),"\n",(0,a.jsxs)(n.p,{children:["PMDaemon focuses on ",(0,a.jsx)(n.strong,{children:"process management excellence"}),". For advanced load balancing features, we recommend:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Traffic Load Balancing"}),": Nginx, HAProxy, Envoy, or cloud load balancers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Service Discovery"}),": Consul, etcd, or Kubernetes services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Circuit Breakers"}),": Application-level libraries or service mesh"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SSL Termination"}),": Reverse proxy or CDN solutions"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This separation of concerns allows PMDaemon to excel at process management while leveraging mature, battle-tested tools for traffic distribution."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/features/port-management",children:"Port Management"})})," - Advanced port allocation strategies"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/features/health-checks",children:"Health Checks"})})," - Application health monitoring"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Process and system monitoring"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/pmdaemon/docs/features/configuration",children:"Configuration"})})," - Ecosystem file configuration"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);