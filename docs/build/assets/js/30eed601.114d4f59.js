"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[7583],{7624:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>h,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"features/health-checks","title":"Health Checks","description":"PMDaemon\'s health check system provides robust monitoring and validation of your processes, ensuring they\'re not just running but actually functioning correctly. This goes beyond basic process monitoring to verify that your applications are healthy and ready to serve traffic.","source":"@site/docs/features/health-checks.md","sourceDirName":"features","slug":"/features/health-checks","permalink":"/pmdaemon/docs/features/health-checks","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/features/health-checks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Port Management","permalink":"/pmdaemon/docs/features/port-management"},"next":{"title":"Monitoring","permalink":"/pmdaemon/docs/features/monitoring"}}');var s=r(4848),a=r(8453);const h={},i="Health Checks",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Health Check Types",id:"health-check-types",level:2},{value:"HTTP Health Checks",id:"http-health-checks",level:3},{value:"Script-based Health Checks",id:"script-based-health-checks",level:3},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Timeout Settings",id:"timeout-settings",level:3},{value:"Interval Settings",id:"interval-settings",level:3},{value:"Retry Settings",id:"retry-settings",level:3},{value:"Blocking Start Command",id:"blocking-start-command",level:2},{value:"Health Check Examples",id:"health-check-examples",level:2},{value:"Web API Health Check",id:"web-api-health-check",level:3},{value:"Database Worker Health Check",id:"database-worker-health-check",level:3},{value:"Microservice Health Check",id:"microservice-health-check",level:3},{value:"Health Status Integration",id:"health-status-integration",level:2},{value:"Process List",id:"process-list",level:3},{value:"Real-time Monitoring",id:"real-time-monitoring",level:3},{value:"Process Information",id:"process-information",level:3},{value:"Auto-restart on Health Failure",id:"auto-restart-on-health-failure",level:2},{value:"Web API Integration",id:"web-api-integration",level:2},{value:"REST API",id:"rest-api",level:3},{value:"WebSocket Updates",id:"websocket-updates",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Design Proper Health Endpoints",id:"1-design-proper-health-endpoints",level:3},{value:"2. Set Appropriate Timeouts",id:"2-set-appropriate-timeouts",level:3},{value:"3. Use Blocking Start for Dependencies",id:"3-use-blocking-start-for-dependencies",level:3},{value:"4. Monitor Health Check Performance",id:"4-monitor-health-check-performance",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Health Checks Always Failing",id:"health-checks-always-failing",level:3},{value:"Blocking Start Timing Out",id:"blocking-start-timing-out",level:3},{value:"False Positive Health Failures",id:"false-positive-health-failures",level:3},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"health-checks",children:"Health Checks"})}),"\n",(0,s.jsxs)(n.p,{children:["PMDaemon's ",(0,s.jsx)(n.strong,{children:"health check system"})," provides robust monitoring and validation of your processes, ensuring they're not just running but actually functioning correctly. This goes beyond basic process monitoring to verify that your applications are healthy and ready to serve traffic."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Health checks in PMDaemon offer:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83c\udfe5 HTTP health checks"})," - Monitor web services via HTTP endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udcdc Script-based health checks"})," - Custom validation logic for any application type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u23f1\ufe0f Configurable parameters"})," - Timeout, interval, and retry settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udea6 Blocking start command"})," - Wait for processes to be healthy before continuing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udd04 Auto-restart on failure"})," - Automatic restart when health checks fail"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udcca Health status integration"})," - Visible in all monitoring interfaces"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"health-check-types",children:"Health Check Types"}),"\n",(0,s.jsx)(n.h3,{id:"http-health-checks",children:"HTTP Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Monitor web services by making HTTP requests to specific endpoints:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Basic HTTP health check\r\npmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --port 3000 \\\r\n  --health-check-url http://localhost:3000/health\r\n\r\n# With custom parameters\r\npmdaemon start "python api.py" \\\r\n  --name python-api \\\r\n  --port 8000 \\\r\n  --health-check-url http://localhost:8000/status \\\r\n  --health-check-timeout 10s \\\r\n  --health-check-interval 30s \\\r\n  --health-check-retries 3\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"PMDaemon makes HTTP GET requests to the specified URL"}),"\n",(0,s.jsx)(n.li,{children:"Considers 2xx status codes as healthy"}),"\n",(0,s.jsx)(n.li,{children:"Retries on failure according to retry settings"}),"\n",(0,s.jsx)(n.li,{children:"Marks process as unhealthy after max retries exceeded"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"script-based-health-checks",children:"Script-based Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Run custom scripts for complex health validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Basic script health check\r\npmdaemon start "python worker.py" \\\r\n  --name background-worker \\\r\n  --health-check-script ./health-check.sh\r\n\r\n# With custom parameters\r\npmdaemon start "node processor.js" \\\r\n  --name data-processor \\\r\n  --health-check-script ./scripts/check-processor.py \\\r\n  --health-check-timeout 15s \\\r\n  --health-check-interval 60s \\\r\n  --health-check-retries 2\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"PMDaemon executes the specified script/command"}),"\n",(0,s.jsx)(n.li,{children:"Exit code 0 indicates healthy, non-zero indicates unhealthy"}),"\n",(0,s.jsx)(n.li,{children:"Script output is captured for debugging"}),"\n",(0,s.jsx)(n.li,{children:"Retries on failure according to retry settings"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"timeout-settings",children:"Timeout Settings"}),"\n",(0,s.jsx)(n.p,{children:"Control how long to wait for health check responses:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Short timeout for fast services\r\n--health-check-timeout 5s\r\n\r\n# Longer timeout for complex checks\r\n--health-check-timeout 30s\r\n\r\n# Very long timeout for heavy operations\r\n--health-check-timeout 2m\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported formats:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"5s"})," - 5 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"30s"})," - 30 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2m"})," - 2 minutes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1h"})," - 1 hour"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"interval-settings",children:"Interval Settings"}),"\n",(0,s.jsx)(n.p,{children:"Configure how often health checks run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Frequent checks for critical services\r\n--health-check-interval 10s\r\n\r\n# Standard interval for most services\r\n--health-check-interval 30s\r\n\r\n# Less frequent for stable services\r\n--health-check-interval 5m\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retry-settings",children:"Retry Settings"}),"\n",(0,s.jsx)(n.p,{children:"Set how many times to retry failed health checks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Conservative - fail fast\r\n--health-check-retries 1\r\n\r\n# Balanced - allow for temporary issues\r\n--health-check-retries 3\r\n\r\n# Aggressive - very tolerant of failures\r\n--health-check-retries 5\n"})}),"\n",(0,s.jsx)(n.h2,{id:"blocking-start-command",children:"Blocking Start Command"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--wait-ready"})," flag makes the start command wait until health checks pass:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Wait for HTTP service to be ready\r\npmdaemon start "node api.js" \\\r\n  --name api-service \\\r\n  --port 3000 \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready\r\n\r\n# Wait with custom timeout\r\npmdaemon start "python worker.py" \\\r\n  --name worker \\\r\n  --health-check-script ./health.sh \\\r\n  --wait-ready \\\r\n  --wait-timeout 60s\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Perfect for deployment scripts:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# Deploy script that waits for services\r\n\r\necho "Starting API service..."\r\npmdaemon start "node api.js" \\\r\n  --name api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready\r\n\r\necho "API is ready! Starting worker..."\r\npmdaemon start "python worker.py" \\\r\n  --name worker \\\r\n  --health-check-script ./worker-health.sh \\\r\n  --wait-ready\r\n\r\necho "All services are healthy and ready!"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"health-check-examples",children:"Health Check Examples"}),"\n",(0,s.jsx)(n.h3,{id:"web-api-health-check",children:"Web API Health Check"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Application code (Node.js):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// server.js\r\nconst express = require('express');\r\nconst app = express();\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  // Check database connection, external services, etc.\r\n  const isHealthy = checkDatabase() && checkRedis();\r\n  \r\n  if (isHealthy) {\r\n    res.status(200).json({ status: 'healthy', timestamp: new Date() });\r\n  } else {\r\n    res.status(503).json({ status: 'unhealthy', timestamp: new Date() });\r\n  }\r\n});\r\n\r\napp.listen(3000);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"PMDaemon configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "node server.js" \\\r\n  --name web-api \\\r\n  --port 3000 \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-timeout 5s \\\r\n  --health-check-interval 30s \\\r\n  --health-check-retries 3 \\\r\n  --wait-ready\n'})}),"\n",(0,s.jsx)(n.h3,{id:"database-worker-health-check",children:"Database Worker Health Check"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Health check script:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# worker-health.sh\r\n\r\n# Check if worker process is responding\r\nif ! pgrep -f "python worker.py" > /dev/null; then\r\n    echo "Worker process not found"\r\n    exit 1\r\nfi\r\n\r\n# Check if worker can connect to database\r\nif ! python -c "import psycopg2; psycopg2.connect(\'host=localhost dbname=mydb\')" 2>/dev/null; then\r\n    echo "Cannot connect to database"\r\n    exit 1\r\nfi\r\n\r\n# Check if worker queue is not too backed up\r\nQUEUE_SIZE=$(redis-cli llen worker_queue)\r\nif [ "$QUEUE_SIZE" -gt 1000 ]; then\r\n    echo "Queue too large: $QUEUE_SIZE items"\r\n    exit 1\r\nfi\r\n\r\necho "Worker is healthy"\r\nexit 0\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"PMDaemon configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "python worker.py" \\\r\n  --name db-worker \\\r\n  --health-check-script ./worker-health.sh \\\r\n  --health-check-timeout 10s \\\r\n  --health-check-interval 60s \\\r\n  --health-check-retries 2\n'})}),"\n",(0,s.jsx)(n.h3,{id:"microservice-health-check",children:"Microservice Health Check"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python FastAPI with health endpoint:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# main.py\r\nfrom fastapi import FastAPI, HTTPException\r\nimport asyncio\r\nimport aioredis\r\n\r\napp = FastAPI()\r\n\r\n@app.get("/health")\r\nasync def health_check():\r\n    try:\r\n        # Check Redis connection\r\n        redis = await aioredis.from_url("redis://localhost")\r\n        await redis.ping()\r\n        await redis.close()\r\n        \r\n        # Check other dependencies...\r\n        \r\n        return {"status": "healthy", "checks": {"redis": "ok"}}\r\n    except Exception as e:\r\n        raise HTTPException(status_code=503, detail=f"Unhealthy: {str(e)}")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"PMDaemon configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pmdaemon start "python -m uvicorn main:app --host 0.0.0.0 --port 8000" \\\r\n  --name microservice \\\r\n  --port 8000 \\\r\n  --health-check-url http://localhost:8000/health \\\r\n  --health-check-timeout 15s \\\r\n  --health-check-interval 45s \\\r\n  --wait-ready\n'})}),"\n",(0,s.jsx)(n.h2,{id:"health-status-integration",children:"Health Status Integration"}),"\n",(0,s.jsx)(n.p,{children:"Health status is visible throughout PMDaemon's interfaces:"}),"\n",(0,s.jsx)(n.h3,{id:"process-list",children:"Process List"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pmdaemon list\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 ID \u2502 Name        \u2502 Status \u2502 PID \u2502 Port \u2502 CPU \u2502 Memory \u2502 Uptime  \u2502 Restarts \u2502 Health \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0  \u2502 web-api     \u2502 \ud83d\udfe2     \u2502 123 \u2502 3000 \u2502 2%  \u2502 45MB   \u2502 2h 15m  \u2502 0        \u2502 \u2705     \u2502\r\n\u2502 1  \u2502 worker      \u2502 \ud83d\udfe2     \u2502 124 \u2502 -    \u2502 1%  \u2502 32MB   \u2502 1h 30m  \u2502 1        \u2502 \u26a0\ufe0f     \u2502\r\n\u2502 2  \u2502 processor   \u2502 \ud83d\udd34     \u2502 -   \u2502 -    \u2502 -   \u2502 -      \u2502 -       \u2502 3        \u2502 \u274c     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Health indicators:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Healthy - All health checks passing"}),"\n",(0,s.jsx)(n.li,{children:"\u26a0\ufe0f Warning - Some health checks failing but within retry limits"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Unhealthy - Health checks failed, process may be restarted"}),"\n",(0,s.jsx)(n.li,{children:"\u2753 Unknown - Health checks not configured or not yet run"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-time-monitoring",children:"Real-time Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pmdaemon monit\n"})}),"\n",(0,s.jsx)(n.p,{children:"Shows live health status updates with color-coded indicators."}),"\n",(0,s.jsx)(n.h3,{id:"process-information",children:"Process Information"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pmdaemon info web-api\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Process Information:\r\n  Name: web-api\r\n  Status: Online\r\n  PID: 1234\r\n  Port: 3000\r\n  Health Check:\r\n    Type: HTTP\r\n    URL: http://localhost:3000/health\r\n    Status: Healthy\r\n    Last Check: 2024-01-15 14:30:25\r\n    Success Rate: 98.5% (197/200)\r\n    Timeout: 5s\r\n    Interval: 30s\r\n    Retries: 3\n"})}),"\n",(0,s.jsx)(n.h2,{id:"auto-restart-on-health-failure",children:"Auto-restart on Health Failure"}),"\n",(0,s.jsx)(n.p,{children:"When health checks fail consistently, PMDaemon can automatically restart the process:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Enable auto-restart on health failure (default behavior)\r\npmdaemon start "node api.js" \\\r\n  --name api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --health-check-retries 3  # Restart after 3 consecutive failures\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Restart behavior:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Health check fails"}),"\n",(0,s.jsxs)(n.li,{children:["PMDaemon retries according to ",(0,s.jsx)(n.code,{children:"--health-check-retries"})]}),"\n",(0,s.jsx)(n.li,{children:"If all retries fail, process is marked as unhealthy"}),"\n",(0,s.jsx)(n.li,{children:"Process is automatically restarted"}),"\n",(0,s.jsx)(n.li,{children:"Health checks resume after restart"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"web-api-integration",children:"Web API Integration"}),"\n",(0,s.jsx)(n.p,{children:"Health status is available via the REST API and WebSocket:"}),"\n",(0,s.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Get all processes with health status\r\ncurl http://localhost:9615/api/processes\r\n\r\n# Get specific process health\r\ncurl http://localhost:9615/api/processes/web-api/health\n"})}),"\n",(0,s.jsx)(n.h3,{id:"websocket-updates",children:"WebSocket Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Connect to WebSocket for real-time health updates\r\nwscat -c ws://localhost:9615/ws\n"})}),"\n",(0,s.jsx)(n.p,{children:"Health status changes are broadcast in real-time to connected clients."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-design-proper-health-endpoints",children:"1. Design Proper Health Endpoints"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Good: Comprehensive health check\r\napp.get('/health', async (req, res) => {\r\n  const checks = {\r\n    database: await checkDatabase(),\r\n    redis: await checkRedis(),\r\n    external_api: await checkExternalAPI(),\r\n    disk_space: checkDiskSpace()\r\n  };\r\n  \r\n  const isHealthy = Object.values(checks).every(check => check.healthy);\r\n  \r\n  res.status(isHealthy ? 200 : 503).json({\r\n    status: isHealthy ? 'healthy' : 'unhealthy',\r\n    checks,\r\n    timestamp: new Date()\r\n  });\r\n});\r\n\r\n// Avoid: Simple always-healthy endpoint\r\napp.get('/health', (req, res) => {\r\n  res.json({ status: 'ok' });  // Not useful\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-appropriate-timeouts",children:"2. Set Appropriate Timeouts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Fast web APIs\r\n--health-check-timeout 5s --health-check-interval 30s\r\n\r\n# Database operations\r\n--health-check-timeout 15s --health-check-interval 60s\r\n\r\n# Heavy batch processing\r\n--health-check-timeout 30s --health-check-interval 300s\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-use-blocking-start-for-dependencies",children:"3. Use Blocking Start for Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Start database first and wait\r\npmdaemon start "postgres" --name db --wait-ready\r\n\r\n# Then start API that depends on database\r\npmdaemon start "node api.js" \\\r\n  --name api \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-monitor-health-check-performance",children:"4. Monitor Health Check Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# View health check statistics\r\npmdaemon info process-name\r\n\r\n# Monitor for patterns in health failures\r\npmdaemon logs process-name | grep "health"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"health-checks-always-failing",children:"Health Checks Always Failing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check if health endpoint is accessible\r\ncurl http://localhost:3000/health\r\n\r\n# Verify health check script manually\r\n./health-check.sh\r\necho $?  # Should be 0 for healthy\r\n\r\n# Check PMDaemon logs\r\npmdaemon logs process-name\n"})}),"\n",(0,s.jsx)(n.h3,{id:"blocking-start-timing-out",children:"Blocking Start Timing Out"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Increase wait timeout\r\npmdaemon start app.js \\\r\n  --health-check-url http://localhost:3000/health \\\r\n  --wait-ready \\\r\n  --wait-timeout 120s  # Increase from default 30s\r\n\r\n# Check what's preventing health checks from passing\r\ncurl -v http://localhost:3000/health\n"})}),"\n",(0,s.jsx)(n.h3,{id:"false-positive-health-failures",children:"False Positive Health Failures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Increase retry count for flaky services\r\n--health-check-retries 5\r\n\r\n# Increase timeout for slow responses\r\n--health-check-timeout 30s\r\n\r\n# Reduce check frequency\r\n--health-check-interval 120s\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Real-time process monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/pmdaemon/docs/features/web-api",children:"Web API"})})," - Access health status via API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/pmdaemon/docs/examples/deployment-examples",children:"Deployment Examples"})})," - Production deployment patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Common issues and solutions"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>h,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function h(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:h(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);