"use strict";(self.webpackChunkpmdaemon_docs=self.webpackChunkpmdaemon_docs||[]).push([[4881],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var o=r(6540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}},9995:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"advanced/logging","title":"Logging","description":"PMDaemon provides comprehensive logging capabilities for process output, system events, and operational monitoring. This guide covers advanced logging configuration, log management, and integration with external logging systems.","source":"@site/docs/advanced/logging.md","sourceDirName":"advanced","slug":"/advanced/logging","permalink":"/pmdaemon/docs/advanced/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/entrepeneur4lyf/pmdaemon/tree/main/docs/docs/advanced/logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Clustering","permalink":"/pmdaemon/docs/advanced/clustering"},"next":{"title":"Troubleshooting","permalink":"/pmdaemon/docs/advanced/troubleshooting"}}');var t=r(4848),s=r(8453);const i={},a="Logging",l={},g=[{value:"Overview",id:"overview",level:2},{value:"Basic Logging Configuration",id:"basic-logging-configuration",level:2},{value:"Default Logging",id:"default-logging",level:3},{value:"Custom Log Files",id:"custom-log-files",level:3},{value:"Configuration File Logging",id:"configuration-file-logging",level:3},{value:"Advanced Logging Configuration",id:"advanced-logging-configuration",level:2},{value:"Structured Logging",id:"structured-logging",level:3},{value:"Log Rotation",id:"log-rotation",level:3},{value:"Environment-Specific Logging",id:"environment-specific-logging",level:3},{value:"Application-Level Logging",id:"application-level-logging",level:2},{value:"Node.js Structured Logging",id:"nodejs-structured-logging",level:3},{value:"Request Logging Middleware",id:"request-logging-middleware",level:3},{value:"Error Logging",id:"error-logging",level:3},{value:"Log Management",id:"log-management",level:2},{value:"Viewing Logs",id:"viewing-logs",level:3},{value:"Log Filtering",id:"log-filtering",level:3},{value:"Log Rotation with Logrotate",id:"log-rotation-with-logrotate",level:3},{value:"External Logging Integration",id:"external-logging-integration",level:2},{value:"Syslog Integration",id:"syslog-integration",level:3},{value:"ELK Stack Integration",id:"elk-stack-integration",level:3},{value:"Filebeat Configuration",id:"filebeat-configuration",level:4},{value:"Logstash Configuration",id:"logstash-configuration",level:4},{value:"Fluentd Integration",id:"fluentd-integration",level:3},{value:"Monitoring and Alerting",id:"monitoring-and-alerting",level:2},{value:"Log-Based Monitoring",id:"log-based-monitoring",level:3},{value:"Log Analysis Scripts",id:"log-analysis-scripts",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Structured Logging",id:"1-use-structured-logging",level:3},{value:"2. Set Appropriate Log Levels",id:"2-set-appropriate-log-levels",level:3},{value:"3. Implement Log Rotation",id:"3-implement-log-rotation",level:3},{value:"4. Sanitize Sensitive Data",id:"4-sanitize-sensitive-data",level:3},{value:"5. Monitor Log Health",id:"5-monitor-log-health",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"logging",children:"Logging"})}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon provides comprehensive logging capabilities for process output, system events, and operational monitoring. This guide covers advanced logging configuration, log management, and integration with external logging systems."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"PMDaemon logging features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcdd Process output capture"})," - Stdout and stderr logging"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd04 Automatic log rotation"})," - Prevent disk space issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcca Structured logging"})," - JSON and custom formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83c\udfaf Log filtering"})," - Filter by level, process, or pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udce4 External integration"})," - Syslog, ELK stack, and more"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-logging-configuration",children:"Basic Logging Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"default-logging",children:"Default Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Basic process with default logging\r\npmdaemon start "node server.js" --name web-app\r\n\r\n# Logs are automatically created:\r\n# ~/.pmdaemon/logs/web-app-0-out.log (stdout)\r\n# ~/.pmdaemon/logs/web-app-0-err.log (stderr)\r\n# ~/.pmdaemon/logs/web-app-0.pid (process ID)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-log-files",children:"Custom Log Files"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Specify custom log file locations\r\npmdaemon start "node server.js" --name web-app \\\r\n  --out-file /var/log/myapp/web-app.out \\\r\n  --error-file /var/log/myapp/web-app.err \\\r\n  --pid-file /var/run/myapp/web-app.pid\n'})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-file-logging",children:"Configuration File Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "web-app",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "out_file": "/var/log/myapp/web-app.out",\r\n  "error_file": "/var/log/myapp/web-app.err",\r\n  "log_file": "/var/log/myapp/web-app.log",\r\n  "pid_file": "/var/run/myapp/web-app.pid",\r\n  "log_date_format": "YYYY-MM-DD HH:mm:ss Z",\r\n  "merge_logs": true\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-logging-configuration",children:"Advanced Logging Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "structured-app",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "log": {\r\n    "out_file": "/var/log/myapp/app.json",\r\n    "error_file": "/var/log/myapp/app-error.json",\r\n    "log_type": "json",\r\n    "log_date_format": "YYYY-MM-DD HH:mm:ss.SSS Z",\r\n    "merge_logs": false,\r\n    "max_log_size": "100M",\r\n    "max_log_files": 10,\r\n    "compress_logs": true\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"log-rotation",children:"Log Rotation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "rotating-logs-app",\r\n  "script": "node",\r\n  "args": ["server.js"],\r\n  "log": {\r\n    "out_file": "/var/log/myapp/app.log",\r\n    "error_file": "/var/log/myapp/app-error.log",\r\n    "max_log_size": "50M",\r\n    "max_log_files": 5,\r\n    "compress_logs": true,\r\n    "rotation_schedule": "daily"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"environment-specific-logging",children:"Environment-Specific Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "apps": [\r\n    {\r\n      "name": "app-development",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "env": {\r\n        "NODE_ENV": "development",\r\n        "LOG_LEVEL": "debug"\r\n      },\r\n      "out_file": "/dev/stdout",\r\n      "error_file": "/dev/stderr"\r\n    },\r\n    {\r\n      "name": "app-production",\r\n      "script": "node",\r\n      "args": ["server.js"],\r\n      "env": {\r\n        "NODE_ENV": "production",\r\n        "LOG_LEVEL": "info"\r\n      },\r\n      "out_file": "/var/log/myapp/app.log",\r\n      "error_file": "/var/log/myapp/app-error.log",\r\n      "log": {\r\n        "max_log_size": "100M",\r\n        "max_log_files": 10,\r\n        "compress_logs": true\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"application-level-logging",children:"Application-Level Logging"}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-structured-logging",children:"Node.js Structured Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// logger.js - Winston configuration\r\nconst winston = require('winston');\r\nconst path = require('path');\r\n\r\nconst logFormat = winston.format.combine(\r\n  winston.format.timestamp({\r\n    format: 'YYYY-MM-DD HH:mm:ss.SSS Z'\r\n  }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json(),\r\n  winston.format.printf(info => {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    \r\n    const logEntry = {\r\n      timestamp,\r\n      level,\r\n      message,\r\n      service: 'web-app',\r\n      instance: process.env.PM2_INSTANCE_ID || 0,\r\n      pid: process.pid,\r\n      ...meta\r\n    };\r\n    \r\n    return JSON.stringify(logEntry);\r\n  })\r\n);\r\n\r\nconst logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: logFormat,\r\n  defaultMeta: {\r\n    service: 'web-app',\r\n    version: process.env.APP_VERSION || '1.0.0'\r\n  },\r\n  transports: [\r\n    new winston.transports.File({\r\n      filename: '/var/log/myapp/error.log',\r\n      level: 'error',\r\n      maxsize: 50 * 1024 * 1024, // 50MB\r\n      maxFiles: 5,\r\n      tailable: true\r\n    }),\r\n    new winston.transports.File({\r\n      filename: '/var/log/myapp/combined.log',\r\n      maxsize: 100 * 1024 * 1024, // 100MB\r\n      maxFiles: 10,\r\n      tailable: true\r\n    })\r\n  ]\r\n});\r\n\r\n// Add console transport for development\r\nif (process.env.NODE_ENV !== 'production') {\r\n  logger.add(new winston.transports.Console({\r\n    format: winston.format.combine(\r\n      winston.format.colorize(),\r\n      winston.format.simple()\r\n    )\r\n  }));\r\n}\r\n\r\nmodule.exports = logger;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"request-logging-middleware",children:"Request Logging Middleware"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// middleware/logging.js\r\nconst logger = require('../logger');\r\n\r\nfunction requestLogger(req, res, next) {\r\n  const start = Date.now();\r\n  \r\n  // Log request\r\n  logger.info('Request started', {\r\n    method: req.method,\r\n    url: req.url,\r\n    userAgent: req.get('User-Agent'),\r\n    ip: req.ip,\r\n    requestId: req.id\r\n  });\r\n  \r\n  // Log response\r\n  res.on('finish', () => {\r\n    const duration = Date.now() - start;\r\n    \r\n    logger.info('Request completed', {\r\n      method: req.method,\r\n      url: req.url,\r\n      statusCode: res.statusCode,\r\n      duration,\r\n      requestId: req.id\r\n    });\r\n  });\r\n  \r\n  next();\r\n}\r\n\r\nmodule.exports = requestLogger;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"error-logging",children:"Error Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// middleware/errorHandler.js\r\nconst logger = require('../logger');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n  // Log error with context\r\n  logger.error('Unhandled error', {\r\n    error: {\r\n      message: err.message,\r\n      stack: err.stack,\r\n      name: err.name\r\n    },\r\n    request: {\r\n      method: req.method,\r\n      url: req.url,\r\n      headers: req.headers,\r\n      body: req.body,\r\n      params: req.params,\r\n      query: req.query\r\n    },\r\n    user: req.user?.id,\r\n    requestId: req.id\r\n  });\r\n  \r\n  // Send error response\r\n  res.status(err.status || 500).json({\r\n    error: 'Internal server error',\r\n    requestId: req.id\r\n  });\r\n}\r\n\r\nmodule.exports = errorHandler;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"log-management",children:"Log Management"}),"\n",(0,t.jsx)(n.h3,{id:"viewing-logs",children:"Viewing Logs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# View recent logs\r\npmdaemon logs web-app\r\n\r\n# View specific number of lines\r\npmdaemon logs web-app --lines 100\r\n\r\n# Follow logs in real-time\r\npmdaemon logs web-app --follow\r\n\r\n# View logs with timestamps\r\npmdaemon logs web-app --timestamps\r\n\r\n# View only error logs\r\npmdaemon logs web-app --error\r\n\r\n# View logs from specific instance\r\npmdaemon logs web-app --instance 2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"log-filtering",children:"Log Filtering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Filter logs by pattern\r\npmdaemon logs web-app --grep "ERROR"\r\n\r\n# Filter by log level\r\npmdaemon logs web-app --level error\r\n\r\n# Filter by time range\r\npmdaemon logs web-app --since "2024-01-15 10:00:00"\r\npmdaemon logs web-app --until "2024-01-15 12:00:00"\r\n\r\n# Combine filters\r\npmdaemon logs web-app --grep "database" --level error --lines 50\n'})}),"\n",(0,t.jsx)(n.h3,{id:"log-rotation-with-logrotate",children:"Log Rotation with Logrotate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create logrotate configuration\r\nsudo tee /etc/logrotate.d/pmdaemon << 'EOF'\r\n/var/log/myapp/*.log {\r\n    daily\r\n    rotate 30\r\n    compress\r\n    delaycompress\r\n    missingok\r\n    notifempty\r\n    create 644 pmdaemon pmdaemon\r\n    postrotate\r\n        # Send USR1 signal to reload logs\r\n        pkill -USR1 -f pmdaemon || true\r\n    endscript\r\n}\r\n\r\n/var/log/myapp/*.json {\r\n    daily\r\n    rotate 7\r\n    compress\r\n    delaycompress\r\n    missingok\r\n    notifempty\r\n    create 644 pmdaemon pmdaemon\r\n    copytruncate\r\n}\r\nEOF\r\n\r\n# Test logrotate configuration\r\nsudo logrotate -d /etc/logrotate.d/pmdaemon\r\n\r\n# Force rotation (for testing)\r\nsudo logrotate -f /etc/logrotate.d/pmdaemon\n"})}),"\n",(0,t.jsx)(n.h2,{id:"external-logging-integration",children:"External Logging Integration"}),"\n",(0,t.jsx)(n.h3,{id:"syslog-integration",children:"Syslog Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Send logs to syslog\r\npmdaemon start "node server.js | logger -t web-app" --name web-app\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Application syslog integration\r\nconst winston = require('winston');\r\nrequire('winston-syslog').Syslog;\r\n\r\nconst logger = winston.createLogger({\r\n  transports: [\r\n    new winston.transports.Syslog({\r\n      host: 'localhost',\r\n      port: 514,\r\n      protocol: 'udp4',\r\n      facility: 'local0',\r\n      app_name: 'web-app',\r\n      eol: '\\n'\r\n    })\r\n  ]\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"elk-stack-integration",children:"ELK Stack Integration"}),"\n",(0,t.jsx)(n.h4,{id:"filebeat-configuration",children:"Filebeat Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# filebeat.yml\r\nfilebeat.inputs:\r\n- type: log\r\n  enabled: true\r\n  paths:\r\n    - /var/log/myapp/*.json\r\n  json.keys_under_root: true\r\n  json.add_error_key: true\r\n  fields:\r\n    service: myapp\r\n    environment: production\r\n  fields_under_root: true\r\n\r\noutput.elasticsearch:\r\n  hosts: ["elasticsearch:9200"]\r\n  index: "myapp-logs-%{+yyyy.MM.dd}"\r\n\r\nsetup.template.name: "myapp-logs"\r\nsetup.template.pattern: "myapp-logs-*"\r\n\r\nlogging.level: info\r\nlogging.to_files: true\r\nlogging.files:\r\n  path: /var/log/filebeat\r\n  name: filebeat\r\n  keepfiles: 7\r\n  permissions: 0644\n'})}),"\n",(0,t.jsx)(n.h4,{id:"logstash-configuration",children:"Logstash Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# logstash.conf\r\ninput {\r\n  beats {\r\n    port => 5044\r\n  }\r\n}\r\n\r\nfilter {\r\n  if [service] == "myapp" {\r\n    # Parse timestamp\r\n    date {\r\n      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS Z" ]\r\n    }\r\n    \r\n    # Add computed fields\r\n    mutate {\r\n      add_field => { "log_processed_at" => "%{@timestamp}" }\r\n    }\r\n    \r\n    # Parse error stack traces\r\n    if [level] == "error" and [error][stack] {\r\n      mutate {\r\n        add_field => { "error_parsed" => "true" }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\noutput {\r\n  elasticsearch {\r\n    hosts => ["elasticsearch:9200"]\r\n    index => "myapp-logs-%{+YYYY.MM.dd}"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fluentd-integration",children:"Fluentd Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# fluent.conf\r\n<source>\r\n  @type tail\r\n  path /var/log/myapp/*.json\r\n  pos_file /var/log/fluentd/myapp.log.pos\r\n  tag myapp.logs\r\n  format json\r\n  time_key timestamp\r\n  time_format %Y-%m-%d %H:%M:%S.%L %z\r\n</source>\r\n\r\n<filter myapp.logs>\r\n  @type record_transformer\r\n  <record>\r\n    hostname "#{Socket.gethostname}"\r\n    environment production\r\n  </record>\r\n</filter>\r\n\r\n<match myapp.logs>\r\n  @type elasticsearch\r\n  host elasticsearch\r\n  port 9200\r\n  index_name myapp-logs\r\n  type_name _doc\r\n  logstash_format true\r\n  logstash_prefix myapp-logs\r\n  logstash_dateformat %Y.%m.%d\r\n  include_tag_key true\r\n  tag_key @log_name\r\n  flush_interval 1s\r\n</match>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-alerting",children:"Monitoring and Alerting"}),"\n",(0,t.jsx)(n.h3,{id:"log-based-monitoring",children:"Log-Based Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# log-monitor.sh\r\n\r\nLOG_FILE="/var/log/myapp/app.log"\r\nERROR_THRESHOLD=10\r\nTIME_WINDOW=300  # 5 minutes\r\n\r\n# Count errors in the last 5 minutes\r\nERROR_COUNT=$(tail -n 1000 "$LOG_FILE" | \\\r\n  jq -r --arg since "$(date -d \'5 minutes ago\' \'+%Y-%m-%d %H:%M:%S\')" \\\r\n  \'select(.timestamp > $since and .level == "error")\' | \\\r\n  wc -l)\r\n\r\nif [ "$ERROR_COUNT" -gt "$ERROR_THRESHOLD" ]; then\r\n  echo "ALERT: $ERROR_COUNT errors in the last $TIME_WINDOW seconds"\r\n  # Send alert (email, Slack, etc.)\r\n  curl -X POST -H \'Content-type: application/json\' \\\r\n    --data "{\\"text\\":\\"High error rate: $ERROR_COUNT errors in 5 minutes\\"}" \\\r\n    "$SLACK_WEBHOOK_URL"\r\nfi\n'})}),"\n",(0,t.jsx)(n.h3,{id:"log-analysis-scripts",children:"Log Analysis Scripts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\r\n# log-analyzer.py\r\n\r\nimport json\r\nimport sys\r\nfrom datetime import datetime, timedelta\r\nfrom collections import defaultdict\r\n\r\ndef analyze_logs(log_file, hours=1):\r\n    \"\"\"Analyze logs for the last N hours\"\"\"\r\n    \r\n    cutoff_time = datetime.now() - timedelta(hours=hours)\r\n    \r\n    stats = {\r\n        'total_requests': 0,\r\n        'error_count': 0,\r\n        'status_codes': defaultdict(int),\r\n        'response_times': [],\r\n        'error_messages': defaultdict(int)\r\n    }\r\n    \r\n    with open(log_file, 'r') as f:\r\n        for line in f:\r\n            try:\r\n                log_entry = json.loads(line)\r\n                \r\n                # Parse timestamp\r\n                log_time = datetime.fromisoformat(\r\n                    log_entry['timestamp'].replace('Z', '+00:00')\r\n                )\r\n                \r\n                if log_time < cutoff_time:\r\n                    continue\r\n                \r\n                # Count requests\r\n                if 'Request completed' in log_entry.get('message', ''):\r\n                    stats['total_requests'] += 1\r\n                    \r\n                    if 'statusCode' in log_entry:\r\n                        stats['status_codes'][log_entry['statusCode']] += 1\r\n                    \r\n                    if 'duration' in log_entry:\r\n                        stats['response_times'].append(log_entry['duration'])\r\n                \r\n                # Count errors\r\n                if log_entry.get('level') == 'error':\r\n                    stats['error_count'] += 1\r\n                    error_msg = log_entry.get('message', 'Unknown error')\r\n                    stats['error_messages'][error_msg] += 1\r\n                    \r\n            except (json.JSONDecodeError, KeyError, ValueError):\r\n                continue\r\n    \r\n    # Calculate averages\r\n    if stats['response_times']:\r\n        stats['avg_response_time'] = sum(stats['response_times']) / len(stats['response_times'])\r\n        stats['max_response_time'] = max(stats['response_times'])\r\n    \r\n    return stats\r\n\r\nif __name__ == '__main__':\r\n    log_file = sys.argv[1] if len(sys.argv) > 1 else '/var/log/myapp/app.log'\r\n    hours = int(sys.argv[2]) if len(sys.argv) > 2 else 1\r\n    \r\n    stats = analyze_logs(log_file, hours)\r\n    \r\n    print(f\"Log Analysis (Last {hours} hour(s)):\")\r\n    print(f\"Total Requests: {stats['total_requests']}\")\r\n    print(f\"Error Count: {stats['error_count']}\")\r\n    print(f\"Error Rate: {stats['error_count'] / max(stats['total_requests'], 1) * 100:.2f}%\")\r\n    \r\n    if stats.get('avg_response_time'):\r\n        print(f\"Avg Response Time: {stats['avg_response_time']:.2f}ms\")\r\n        print(f\"Max Response Time: {stats['max_response_time']:.2f}ms\")\r\n    \r\n    print(\"\\nStatus Code Distribution:\")\r\n    for code, count in sorted(stats['status_codes'].items()):\r\n        print(f\"  {code}: {count}\")\r\n    \r\n    if stats['error_messages']:\r\n        print(\"\\nTop Error Messages:\")\r\n        for msg, count in sorted(stats['error_messages'].items(), \r\n                                key=lambda x: x[1], reverse=True)[:5]:\r\n            print(f\"  {count}x: {msg}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-structured-logging",children:"1. Use Structured Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Good: Structured logging\r\nlogger.info('User login', {\r\n  userId: user.id,\r\n  email: user.email,\r\n  ip: req.ip,\r\n  userAgent: req.get('User-Agent')\r\n});\r\n\r\n// Avoid: Unstructured logging\r\nconsole.log(`User ${user.email} logged in from ${req.ip}`);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-set-appropriate-log-levels",children:"2. Set Appropriate Log Levels"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Development\r\nlogger.level = 'debug';\r\n\r\n// Production\r\nlogger.level = 'info';\r\n\r\n// Critical systems\r\nlogger.level = 'warn';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-implement-log-rotation",children:"3. Implement Log Rotation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "log": {\r\n    "max_log_size": "100M",\r\n    "max_log_files": 10,\r\n    "compress_logs": true\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-sanitize-sensitive-data",children:"4. Sanitize Sensitive Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function sanitizeLog(data) {\r\n  const sanitized = { ...data };\r\n  \r\n  // Remove sensitive fields\r\n  delete sanitized.password;\r\n  delete sanitized.token;\r\n  delete sanitized.creditCard;\r\n  \r\n  // Mask email addresses\r\n  if (sanitized.email) {\r\n    sanitized.email = sanitized.email.replace(/(.{2}).*@/, '$1***@');\r\n  }\r\n  \r\n  return sanitized;\r\n}\r\n\r\nlogger.info('User data', sanitizeLog(userData));\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-monitor-log-health",children:"5. Monitor Log Health"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check log file sizes\r\ndu -sh /var/log/myapp/*\r\n\r\n# Check log rotation\r\nls -la /var/log/myapp/*.gz\r\n\r\n# Monitor disk space\r\ndf -h /var/log\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/features/monitoring",children:"Monitoring"})})," - Real-time monitoring integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/security",children:"Security"})})," - Secure logging practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/performance-tuning",children:"Performance Tuning"})})," - Optimize logging performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/pmdaemon/docs/advanced/troubleshooting",children:"Troubleshooting"})})," - Debug using logs"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);